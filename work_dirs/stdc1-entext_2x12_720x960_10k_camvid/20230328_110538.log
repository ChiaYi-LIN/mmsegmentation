2023-03-28 11:05:38,335 - mmseg - INFO - Multi-processing start method is `None`
2023-03-28 11:05:38,360 - mmseg - INFO - OpenCV num_threads is `96
2023-03-28 11:05:38,361 - mmseg - INFO - OMP num threads is 1
2023-03-28 11:05:38,460 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0]
CUDA available: True
GPU 0,1: NVIDIA GeForce RTX 3090
CUDA_HOME: None
GCC: gcc (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0
PyTorch: 1.12.1+cu113
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.13.1+cu113
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.3
MMSegmentation: 0.30.0+792c24a
------------------------------------------------------------

2023-03-28 11:05:38,461 - mmseg - INFO - Distributed training: True
2023-03-28 11:05:39,398 - mmseg - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    pretrained=None,
    backbone=dict(
        type='STDCEnTextNet',
        backbone_cfg=dict(
            type='STDCNet',
            stdc_type='STDCNet1',
            in_channels=3,
            channels=(32, 64, 256, 512, 1024),
            bottleneck_type='cat',
            num_convs=4,
            norm_cfg=dict(type='BN', requires_grad=True),
            act_cfg=dict(type='ReLU'),
            with_final_conv=False,
            init_cfg=dict(
                type='Pretrained',
                checkpoint=
                'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth'
            )),
        last_in_channels=(1035, 512),
        out_channels=128,
        ffm_cfg=dict(in_channels=384, out_channels=256, scale_factor=4),
        text_embeddings='./pretrained/textfeat_camvid_11_RN50_1024.pth'),
    decode_head=dict(
        type='FCNHead',
        in_channels=256,
        channels=256,
        num_convs=1,
        num_classes=19,
        in_index=3,
        concat_input=False,
        dropout_ratio=0.1,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=True,
        sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=10000),
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=[
        dict(
            type='FCNHead',
            in_channels=128,
            channels=64,
            num_convs=1,
            num_classes=11,
            in_index=2,
            norm_cfg=dict(type='BN', requires_grad=True),
            concat_input=False,
            align_corners=False,
            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=10000),
            loss_decode=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
        dict(
            type='FCNHead',
            in_channels=128,
            channels=64,
            num_convs=1,
            num_classes=11,
            in_index=1,
            norm_cfg=dict(type='BN', requires_grad=True),
            concat_input=False,
            align_corners=False,
            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=10000),
            loss_decode=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
        dict(
            type='STDCHead',
            in_channels=256,
            channels=64,
            num_convs=1,
            num_classes=2,
            boundary_threshold=0.1,
            in_index=0,
            norm_cfg=dict(type='BN', requires_grad=True),
            concat_input=False,
            align_corners=True,
            loss_decode=[
                dict(
                    type='CrossEntropyLoss',
                    loss_name='loss_ce',
                    use_sigmoid=True,
                    loss_weight=1.0),
                dict(type='DiceLoss', loss_name='loss_dice', loss_weight=1.0)
            ]),
        dict(
            type='VanillaHead',
            temperature=0.07,
            in_channels=11,
            channels=1,
            num_classes=11,
            in_index=4,
            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=10000),
            loss_decode=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0))
    ],
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'CamVidDataset'
data_root = 'data/CamVid/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (720, 960)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(type='Resize', img_scale=(2048, 720), ratio_range=(0.5, 2.5)),
    dict(type='RandomCrop', crop_size=(720, 960), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(720, 960), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 720),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=12,
    workers_per_gpu=4,
    train=dict(
        type='CamVidDataset',
        data_root='data/CamVid/',
        img_dir='train',
        ann_dir='train_labelIds',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(type='Resize', img_scale=(2048, 720), ratio_range=(0.5, 2.5)),
            dict(type='RandomCrop', crop_size=(720, 960), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(720, 960), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='CamVidDataset',
        data_root='data/CamVid/',
        img_dir='val',
        ann_dir='val_labelIds',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 720),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CamVidDataset',
        data_root='data/CamVid/',
        img_dir='val',
        ann_dir='val_labelIds',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 720),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(
    type='SGD',
    lr=0.01,
    momentum=0.9,
    weight_decay=0.0005,
    paramwise_cfg=dict(custom_keys=dict(norm=dict(decay_mult=0.0))))
optimizer_config = dict()
lr_config = dict(
    policy='poly',
    power=0.9,
    min_lr=1e-06,
    by_epoch=False,
    warmup='linear',
    warmup_iters=200,
    warmup_ratio=1e-05)
runner = dict(type='IterBasedRunner', max_iters=10000)
checkpoint_config = dict(by_epoch=False, interval=1000)
evaluation = dict(interval=1000, metric='mIoU', pre_eval=True)
checkpoint = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth'
work_dir = './work_dirs/stdc1-entext_2x12_720x960_10k_camvid'
gpu_ids = range(0, 2)
auto_resume = False

2023-03-28 11:05:41,127 - mmseg - INFO - Set random seed to 585546469, deterministic: False
2023-03-28 11:05:41,133 - mmseg - INFO - Loaded 367 images
2023-03-28 11:05:42,299 - mmseg - INFO - initialize STDCNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth'}
2023-03-28 11:05:42,358 - mmseg - INFO - initialize FCNHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
Name of parameter - Initialization information

backbone.backbone.stages.0.conv.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.0.bn.weight - torch.Size([32]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.0.bn.bias - torch.Size([32]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.1.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.1.bn.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.1.bn.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.0.layers.0.conv.weight - torch.Size([128, 64, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.0.layers.0.bn.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.0.layers.0.bn.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.0.layers.1.conv.weight - torch.Size([64, 128, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.0.layers.1.bn.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.0.layers.1.bn.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.0.layers.2.conv.weight - torch.Size([32, 64, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.0.layers.2.bn.weight - torch.Size([32]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.0.layers.2.bn.bias - torch.Size([32]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.0.layers.3.conv.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.0.layers.3.bn.weight - torch.Size([32]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.0.layers.3.bn.bias - torch.Size([32]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.0.downsample.conv.weight - torch.Size([128, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.0.downsample.bn.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.0.downsample.bn.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.1.layers.0.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.1.layers.0.bn.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.1.layers.0.bn.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.1.layers.1.conv.weight - torch.Size([64, 128, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.1.layers.1.bn.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.1.layers.1.bn.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.1.layers.2.conv.weight - torch.Size([32, 64, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.1.layers.2.bn.weight - torch.Size([32]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.1.layers.2.bn.bias - torch.Size([32]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.1.layers.3.conv.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.1.layers.3.bn.weight - torch.Size([32]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.2.1.layers.3.bn.bias - torch.Size([32]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.0.layers.0.conv.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.0.layers.0.bn.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.0.layers.0.bn.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.0.layers.1.conv.weight - torch.Size([128, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.0.layers.1.bn.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.0.layers.1.bn.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.0.layers.2.conv.weight - torch.Size([64, 128, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.0.layers.2.bn.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.0.layers.2.bn.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.0.layers.3.conv.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.0.layers.3.bn.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.0.layers.3.bn.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.0.downsample.conv.weight - torch.Size([256, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.0.downsample.bn.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.0.downsample.bn.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.1.layers.0.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.1.layers.0.bn.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.1.layers.0.bn.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.1.layers.1.conv.weight - torch.Size([128, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.1.layers.1.bn.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.1.layers.1.bn.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.1.layers.2.conv.weight - torch.Size([64, 128, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.1.layers.2.bn.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.1.layers.2.bn.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.1.layers.3.conv.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.1.layers.3.bn.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.3.1.layers.3.bn.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.0.layers.0.conv.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.0.layers.0.bn.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.0.layers.0.bn.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.0.layers.1.conv.weight - torch.Size([256, 512, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.0.layers.1.bn.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.0.layers.1.bn.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.0.layers.2.conv.weight - torch.Size([128, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.0.layers.2.bn.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.0.layers.2.bn.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.0.layers.3.conv.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.0.layers.3.bn.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.0.layers.3.bn.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.0.downsample.conv.weight - torch.Size([512, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.0.downsample.bn.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.0.downsample.bn.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.1.layers.0.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.1.layers.0.bn.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.1.layers.0.bn.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.1.layers.1.conv.weight - torch.Size([256, 512, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.1.layers.1.bn.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.1.layers.1.bn.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.1.layers.2.conv.weight - torch.Size([128, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.1.layers.2.bn.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.1.layers.2.bn.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.1.layers.3.conv.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.1.layers.3.bn.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.backbone.stages.4.1.layers.3.bn.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth 

backbone.arms.0.conv_layer.conv.weight - torch.Size([128, 1035, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.arms.0.conv_layer.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.arms.0.conv_layer.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.arms.0.atten_conv_layer.1.conv.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.arms.0.atten_conv_layer.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.arms.0.atten_conv_layer.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.arms.1.conv_layer.conv.weight - torch.Size([128, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.arms.1.conv_layer.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.arms.1.conv_layer.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.arms.1.atten_conv_layer.1.conv.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.arms.1.atten_conv_layer.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.arms.1.atten_conv_layer.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.convs.0.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.convs.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.convs.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.convs.1.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.convs.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.convs.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.conv_avg.conv.weight - torch.Size([128, 1035, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.conv_avg.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.conv_avg.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.ffm.conv0.conv.weight - torch.Size([256, 384, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.ffm.conv0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.ffm.conv0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.ffm.attention.1.conv.weight - torch.Size([64, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.ffm.attention.2.conv.weight - torch.Size([256, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_seg.weight - torch.Size([19, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([19]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.0.conv_seg.weight - torch.Size([11, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.0.conv_seg.bias - torch.Size([11]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.0.convs.0.conv.weight - torch.Size([64, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.0.convs.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.0.convs.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.1.conv_seg.weight - torch.Size([11, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.1.conv_seg.bias - torch.Size([11]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.1.convs.0.conv.weight - torch.Size([64, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.1.convs.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.1.convs.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.2.fusion_kernel - torch.Size([1, 3, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.2.conv_seg.weight - torch.Size([2, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.2.conv_seg.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.2.convs.0.conv.weight - torch.Size([64, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.2.convs.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.2.convs.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023-03-28 11:05:42,361 - mmseg - INFO - EncoderDecoder(
  (backbone): STDCEnTextNet(
    (backbone): STDCNet(
      (stages): ModuleList(
        (0): ConvModule(
          (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (1): ConvModule(
          (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): STDCModule(
            (layers): ModuleList(
              (0): ConvModule(
                (conv): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
              (1): ConvModule(
                (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
              (2): ConvModule(
                (conv): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
              (3): ConvModule(
                (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
            )
            (downsample): ConvModule(
              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128, bias=False)
              (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (skip): AvgPool2d(kernel_size=3, stride=2, padding=1)
          )
          (1): STDCModule(
            (layers): ModuleList(
              (0): ConvModule(
                (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
              (1): ConvModule(
                (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
              (2): ConvModule(
                (conv): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
              (3): ConvModule(
                (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
            )
          )
        )
        (3): Sequential(
          (0): STDCModule(
            (layers): ModuleList(
              (0): ConvModule(
                (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
              (1): ConvModule(
                (conv): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
              (2): ConvModule(
                (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
              (3): ConvModule(
                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
            )
            (downsample): ConvModule(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256, bias=False)
              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (skip): AvgPool2d(kernel_size=3, stride=2, padding=1)
          )
          (1): STDCModule(
            (layers): ModuleList(
              (0): ConvModule(
                (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
              (1): ConvModule(
                (conv): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
              (2): ConvModule(
                (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
              (3): ConvModule(
                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
            )
          )
        )
        (4): Sequential(
          (0): STDCModule(
            (layers): ModuleList(
              (0): ConvModule(
                (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
              (1): ConvModule(
                (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
              (2): ConvModule(
                (conv): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
              (3): ConvModule(
                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
            )
            (downsample): ConvModule(
              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=512, bias=False)
              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (skip): AvgPool2d(kernel_size=3, stride=2, padding=1)
          )
          (1): STDCModule(
            (layers): ModuleList(
              (0): ConvModule(
                (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
              (1): ConvModule(
                (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
              (2): ConvModule(
                (conv): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
              (3): ConvModule(
                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (activate): ReLU(inplace=True)
              )
            )
          )
        )
      )
    )
    init_cfg={'type': 'Pretrained', 'checkpoint': 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth'}
    (arms): ModuleList(
      (0): AttentionRefinementModule(
        (conv_layer): ConvModule(
          (conv): Conv2d(1035, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (atten_conv_layer): Sequential(
          (0): AdaptiveAvgPool2d(output_size=(1, 1))
          (1): ConvModule(
            (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): Sigmoid()
        )
      )
      (1): AttentionRefinementModule(
        (conv_layer): ConvModule(
          (conv): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (atten_conv_layer): Sequential(
          (0): AdaptiveAvgPool2d(output_size=(1, 1))
          (1): ConvModule(
            (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): Sigmoid()
        )
      )
    )
    (convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (1): ConvModule(
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
    (conv_avg): ConvModule(
      (conv): Conv2d(1035, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (ffm): FeatureFusionModule(
      (conv0): ConvModule(
        (conv): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (attention): Sequential(
        (0): AdaptiveAvgPool2d(output_size=(1, 1))
        (1): ConvModule(
          (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (activate): ReLU(inplace=True)
        )
        (2): ConvModule(
          (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (3): Sigmoid()
      )
    )
  )
  (decode_head): FCNHead(
    input_transform=None, ignore_index=255, align_corners=True
    (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
    (conv_seg): Conv2d(256, 19, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (convs): Sequential(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
  (auxiliary_head): ModuleList(
    (0): FCNHead(
      input_transform=None, ignore_index=255, align_corners=False
      (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
      (conv_seg): Conv2d(64, 11, kernel_size=(1, 1), stride=(1, 1))
      (dropout): Dropout2d(p=0.1, inplace=False)
      (convs): Sequential(
        (0): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
    init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
    (1): FCNHead(
      input_transform=None, ignore_index=255, align_corners=False
      (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
      (conv_seg): Conv2d(64, 11, kernel_size=(1, 1), stride=(1, 1))
      (dropout): Dropout2d(p=0.1, inplace=False)
      (convs): Sequential(
        (0): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
    init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
    (2): STDCHead(
      input_transform=None, ignore_index=255, align_corners=True
      (loss_decode): ModuleList(
        (0): CrossEntropyLoss(avg_non_ignore=False)
        (1): DiceLoss()
      )
      (conv_seg): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))
      (dropout): Dropout2d(p=0.1, inplace=False)
      (convs): Sequential(
        (0): ConvModule(
          (conv): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
    init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
    (3): VanillaHead(
      input_transform=None, ignore_index=255, align_corners=False
      (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
      (conv_seg): None
      (dropout): Dropout2d(p=0.1, inplace=False)
    )
    init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
  )
)
2023-03-28 11:05:42,407 - mmseg - INFO - Loaded 101 images
2023-03-28 11:05:42,408 - mmseg - INFO - Start running, host: linchiayi@cml9, work_dir: /tmp2/linchiayi/mmsegmentation/work_dirs/stdc1-entext_2x12_720x960_10k_camvid
2023-03-28 11:05:42,408 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-03-28 11:05:42,409 - mmseg - INFO - workflow: [('train', 1)], max: 10000 iters
2023-03-28 11:05:42,409 - mmseg - INFO - Checkpoints will be saved to /tmp2/linchiayi/mmsegmentation/work_dirs/stdc1-entext_2x12_720x960_10k_camvid by HardDiskBackend.
2023-03-28 11:07:10,589 - mmseg - INFO - Iter [50/10000]	lr: 2.439e-03, eta: 4:51:04, time: 1.755, data_time: 0.604, memory: 17071, decode.loss_ce: 1.9247, decode.acc_seg: 32.7516, aux_0.loss_ce: 1.8459, aux_0.acc_seg: 17.5196, aux_1.loss_ce: 1.7625, aux_1.acc_seg: 22.4842, aux_2.loss_ce: 0.5062, aux_2.loss_dice: 0.4651, aux_2.acc_seg: 90.7489, aux_3.loss_ce: 1.9032, aux_3.acc_seg: 4.3048, loss: 8.4076
2023-03-28 11:08:19,883 - mmseg - INFO - Iter [100/10000]	lr: 4.906e-03, eta: 4:19:08, time: 1.386, data_time: 0.229, memory: 17071, decode.loss_ce: 1.0217, decode.acc_seg: 62.4104, aux_0.loss_ce: 1.0211, aux_0.acc_seg: 64.8868, aux_1.loss_ce: 1.0656, aux_1.acc_seg: 62.3413, aux_2.loss_ce: 0.2551, aux_2.loss_dice: 0.4537, aux_2.acc_seg: 95.7907, aux_3.loss_ce: 1.6629, aux_3.acc_seg: 49.0748, loss: 5.4801
2023-03-28 11:09:28,517 - mmseg - INFO - Iter [150/10000]	lr: 7.350e-03, eta: 4:07:00, time: 1.373, data_time: 0.230, memory: 17071, decode.loss_ce: 0.6110, decode.acc_seg: 77.1138, aux_0.loss_ce: 0.5313, aux_0.acc_seg: 80.1967, aux_1.loss_ce: 0.5602, aux_1.acc_seg: 79.7647, aux_2.loss_ce: 0.2115, aux_2.loss_dice: 0.4009, aux_2.acc_seg: 95.8803, aux_3.loss_ce: 1.2142, aux_3.acc_seg: 81.0324, loss: 3.5291
2023-03-28 11:10:40,325 - mmseg - INFO - Iter [200/10000]	lr: 9.772e-03, eta: 4:02:57, time: 1.436, data_time: 0.289, memory: 17071, decode.loss_ce: 0.4055, decode.acc_seg: 84.3000, aux_0.loss_ce: 0.3912, aux_0.acc_seg: 85.2374, aux_1.loss_ce: 0.4131, aux_1.acc_seg: 84.4391, aux_2.loss_ce: 0.1798, aux_2.loss_dice: 0.3521, aux_2.acc_seg: 95.7689, aux_3.loss_ce: 0.9607, aux_3.acc_seg: 83.9603, loss: 2.7024
2023-03-28 11:11:49,370 - mmseg - INFO - Iter [250/10000]	lr: 9.776e-03, eta: 3:58:15, time: 1.381, data_time: 0.225, memory: 17071, decode.loss_ce: 0.3288, decode.acc_seg: 86.5337, aux_0.loss_ce: 0.3327, aux_0.acc_seg: 86.8961, aux_1.loss_ce: 0.3515, aux_1.acc_seg: 86.3055, aux_2.loss_ce: 0.1583, aux_2.loss_dice: 0.3326, aux_2.acc_seg: 95.7974, aux_3.loss_ce: 0.8342, aux_3.acc_seg: 85.5559, loss: 2.3382
2023-03-28 11:12:58,255 - mmseg - INFO - Iter [300/10000]	lr: 9.731e-03, eta: 3:54:38, time: 1.378, data_time: 0.227, memory: 17071, decode.loss_ce: 0.2866, decode.acc_seg: 87.7791, aux_0.loss_ce: 0.2970, aux_0.acc_seg: 87.7658, aux_1.loss_ce: 0.3135, aux_1.acc_seg: 87.1736, aux_2.loss_ce: 0.1518, aux_2.loss_dice: 0.3204, aux_2.acc_seg: 95.7110, aux_3.loss_ce: 0.7583, aux_3.acc_seg: 86.8974, loss: 2.1276
2023-03-28 11:14:10,482 - mmseg - INFO - Iter [350/10000]	lr: 9.685e-03, eta: 3:53:16, time: 1.445, data_time: 0.288, memory: 17071, decode.loss_ce: 0.2553, decode.acc_seg: 88.8377, aux_0.loss_ce: 0.2686, aux_0.acc_seg: 88.5393, aux_1.loss_ce: 0.2841, aux_1.acc_seg: 87.9656, aux_2.loss_ce: 0.1475, aux_2.loss_dice: 0.3131, aux_2.acc_seg: 95.6937, aux_3.loss_ce: 0.6893, aux_3.acc_seg: 87.9706, loss: 1.9578
2023-03-28 11:15:19,308 - mmseg - INFO - Iter [400/10000]	lr: 9.640e-03, eta: 3:50:35, time: 1.377, data_time: 0.225, memory: 17071, decode.loss_ce: 0.2174, decode.acc_seg: 90.4292, aux_0.loss_ce: 0.2275, aux_0.acc_seg: 90.3716, aux_1.loss_ce: 0.2437, aux_1.acc_seg: 89.8492, aux_2.loss_ce: 0.1436, aux_2.loss_dice: 0.3084, aux_2.acc_seg: 95.7134, aux_3.loss_ce: 0.6446, aux_3.acc_seg: 89.5780, loss: 1.7853
2023-03-28 11:16:27,941 - mmseg - INFO - Iter [450/10000]	lr: 9.595e-03, eta: 3:48:10, time: 1.373, data_time: 0.223, memory: 17071, decode.loss_ce: 0.2089, decode.acc_seg: 90.6933, aux_0.loss_ce: 0.2166, aux_0.acc_seg: 90.6082, aux_1.loss_ce: 0.2357, aux_1.acc_seg: 90.0438, aux_2.loss_ce: 0.1417, aux_2.loss_dice: 0.3053, aux_2.acc_seg: 95.6956, aux_3.loss_ce: 0.6131, aux_3.acc_seg: 89.7467, loss: 1.7212
2023-03-28 11:17:39,914 - mmseg - INFO - Iter [500/10000]	lr: 9.550e-03, eta: 3:47:04, time: 1.439, data_time: 0.285, memory: 17071, decode.loss_ce: 0.2013, decode.acc_seg: 90.8583, aux_0.loss_ce: 0.2127, aux_0.acc_seg: 90.7022, aux_1.loss_ce: 0.2311, aux_1.acc_seg: 90.0582, aux_2.loss_ce: 0.1396, aux_2.loss_dice: 0.3015, aux_2.acc_seg: 95.7513, aux_3.loss_ce: 0.5936, aux_3.acc_seg: 89.7787, loss: 1.6797
2023-03-28 11:18:49,176 - mmseg - INFO - Iter [550/10000]	lr: 9.505e-03, eta: 3:45:10, time: 1.385, data_time: 0.232, memory: 17071, decode.loss_ce: 0.1895, decode.acc_seg: 91.3454, aux_0.loss_ce: 0.1980, aux_0.acc_seg: 91.2208, aux_1.loss_ce: 0.2163, aux_1.acc_seg: 90.5354, aux_2.loss_ce: 0.1407, aux_2.loss_dice: 0.3004, aux_2.acc_seg: 95.6557, aux_3.loss_ce: 0.5685, aux_3.acc_seg: 90.3125, loss: 1.6135
2023-03-28 11:19:58,372 - mmseg - INFO - Iter [600/10000]	lr: 9.459e-03, eta: 3:43:23, time: 1.384, data_time: 0.230, memory: 17071, decode.loss_ce: 0.1800, decode.acc_seg: 91.7084, aux_0.loss_ce: 0.1898, aux_0.acc_seg: 91.5230, aux_1.loss_ce: 0.2077, aux_1.acc_seg: 90.9142, aux_2.loss_ce: 0.1373, aux_2.loss_dice: 0.2962, aux_2.acc_seg: 95.7602, aux_3.loss_ce: 0.5439, aux_3.acc_seg: 90.4713, loss: 1.5549
2023-03-28 11:21:11,081 - mmseg - INFO - Iter [650/10000]	lr: 9.414e-03, eta: 3:42:32, time: 1.454, data_time: 0.290, memory: 17071, decode.loss_ce: 0.1751, decode.acc_seg: 91.7530, aux_0.loss_ce: 0.1849, aux_0.acc_seg: 91.5309, aux_1.loss_ce: 0.2044, aux_1.acc_seg: 90.9046, aux_2.loss_ce: 0.1377, aux_2.loss_dice: 0.2956, aux_2.acc_seg: 95.7186, aux_3.loss_ce: 0.5284, aux_3.acc_seg: 90.4608, loss: 1.5260
2023-03-28 11:22:20,484 - mmseg - INFO - Iter [700/10000]	lr: 9.369e-03, eta: 3:40:54, time: 1.388, data_time: 0.225, memory: 17071, decode.loss_ce: 0.1633, decode.acc_seg: 92.2870, aux_0.loss_ce: 0.1733, aux_0.acc_seg: 91.9862, aux_1.loss_ce: 0.1908, aux_1.acc_seg: 91.4591, aux_2.loss_ce: 0.1381, aux_2.loss_dice: 0.2935, aux_2.acc_seg: 95.6809, aux_3.loss_ce: 0.5048, aux_3.acc_seg: 91.0851, loss: 1.4638
2023-03-28 11:23:30,236 - mmseg - INFO - Iter [750/10000]	lr: 9.323e-03, eta: 3:39:24, time: 1.395, data_time: 0.237, memory: 17071, decode.loss_ce: 0.1660, decode.acc_seg: 92.2721, aux_0.loss_ce: 0.1772, aux_0.acc_seg: 91.9567, aux_1.loss_ce: 0.1939, aux_1.acc_seg: 91.4456, aux_2.loss_ce: 0.1373, aux_2.loss_dice: 0.2943, aux_2.acc_seg: 95.7641, aux_3.loss_ce: 0.5102, aux_3.acc_seg: 91.0393, loss: 1.4790
2023-03-28 11:24:42,569 - mmseg - INFO - Iter [800/10000]	lr: 9.278e-03, eta: 3:38:26, time: 1.446, data_time: 0.289, memory: 17071, decode.loss_ce: 0.1758, decode.acc_seg: 91.7519, aux_0.loss_ce: 0.1852, aux_0.acc_seg: 91.4923, aux_1.loss_ce: 0.2031, aux_1.acc_seg: 90.9316, aux_2.loss_ce: 0.1370, aux_2.loss_dice: 0.2945, aux_2.acc_seg: 95.8116, aux_3.loss_ce: 0.5119, aux_3.acc_seg: 90.4271, loss: 1.5074
2023-03-28 11:25:52,027 - mmseg - INFO - Iter [850/10000]	lr: 9.233e-03, eta: 3:36:56, time: 1.389, data_time: 0.225, memory: 17071, decode.loss_ce: 0.1505, decode.acc_seg: 92.7913, aux_0.loss_ce: 0.1628, aux_0.acc_seg: 92.4818, aux_1.loss_ce: 0.1776, aux_1.acc_seg: 91.8755, aux_2.loss_ce: 0.1363, aux_2.loss_dice: 0.2903, aux_2.acc_seg: 95.7414, aux_3.loss_ce: 0.4722, aux_3.acc_seg: 91.4393, loss: 1.3897
2023-03-28 11:27:00,856 - mmseg - INFO - Iter [900/10000]	lr: 9.187e-03, eta: 3:35:22, time: 1.377, data_time: 0.227, memory: 17071, decode.loss_ce: 0.1463, decode.acc_seg: 93.0024, aux_0.loss_ce: 0.1567, aux_0.acc_seg: 92.6851, aux_1.loss_ce: 0.1734, aux_1.acc_seg: 92.1454, aux_2.loss_ce: 0.1362, aux_2.loss_dice: 0.2889, aux_2.acc_seg: 95.7698, aux_3.loss_ce: 0.4633, aux_3.acc_seg: 91.6474, loss: 1.3648
2023-03-28 11:28:13,688 - mmseg - INFO - Iter [950/10000]	lr: 9.142e-03, eta: 3:34:28, time: 1.457, data_time: 0.290, memory: 17071, decode.loss_ce: 0.1405, decode.acc_seg: 93.2020, aux_0.loss_ce: 0.1523, aux_0.acc_seg: 92.8934, aux_1.loss_ce: 0.1667, aux_1.acc_seg: 92.3102, aux_2.loss_ce: 0.1352, aux_2.loss_dice: 0.2885, aux_2.acc_seg: 95.8224, aux_3.loss_ce: 0.4529, aux_3.acc_seg: 91.8893, loss: 1.3361
2023-03-28 11:29:23,235 - mmseg - INFO - Saving checkpoint at 1000 iterations
2023-03-28 11:29:23,512 - mmseg - INFO - Exp name: stdc1-entext_2x12_720x960_10k_camvid.py
2023-03-28 11:29:23,512 - mmseg - INFO - Iter [1000/10000]	lr: 9.096e-03, eta: 3:33:06, time: 1.399, data_time: 0.229, memory: 17071, decode.loss_ce: 0.1352, decode.acc_seg: 93.4476, aux_0.loss_ce: 0.1473, aux_0.acc_seg: 93.0985, aux_1.loss_ce: 0.1610, aux_1.acc_seg: 92.5498, aux_2.loss_ce: 0.1344, aux_2.loss_dice: 0.2861, aux_2.acc_seg: 95.8225, aux_3.loss_ce: 0.4298, aux_3.acc_seg: 92.0493, loss: 1.2938
2023-03-28 11:29:46,193 - mmseg - INFO - per class results:
2023-03-28 11:29:46,194 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  Bicyclist  | 13.82 |  13.9 |
|   Building  | 86.39 | 88.02 |
|     Car     | 79.49 | 94.41 |
| Column_Pole |  5.64 |  8.36 |
|    Fence    |  71.1 | 93.49 |
|  Pedestrian | 20.53 | 69.61 |
|     Road    | 96.18 | 97.83 |
|   Sidewalk  | 86.97 | 97.64 |
|  SignSymbol |  0.0  |  0.0  |
|     Sky     | 92.85 | 95.66 |
|     Tree    | 87.55 | 98.38 |
+-------------+-------+-------+
2023-03-28 11:29:46,194 - mmseg - INFO - Summary:
2023-03-28 11:29:46,194 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc |  mIoU |  mAcc |
+-------+-------+-------+
| 92.15 | 58.23 | 68.85 |
+-------+-------+-------+
2023-03-28 11:29:46,194 - mmseg - INFO - Exp name: stdc1-entext_2x12_720x960_10k_camvid.py
2023-03-28 11:29:46,195 - mmseg - INFO - Iter(val) [51]	aAcc: 0.9215, mIoU: 0.5823, mAcc: 0.6885, IoU.Bicyclist: 0.1382, IoU.Building: 0.8639, IoU.Car: 0.7949, IoU.Column_Pole: 0.0564, IoU.Fence: 0.7110, IoU.Pedestrian: 0.2053, IoU.Road: 0.9618, IoU.Sidewalk: 0.8697, IoU.SignSymbol: 0.0000, IoU.Sky: 0.9285, IoU.Tree: 0.8755, Acc.Bicyclist: 0.1390, Acc.Building: 0.8802, Acc.Car: 0.9441, Acc.Column_Pole: 0.0836, Acc.Fence: 0.9349, Acc.Pedestrian: 0.6961, Acc.Road: 0.9783, Acc.Sidewalk: 0.9764, Acc.SignSymbol: 0.0000, Acc.Sky: 0.9566, Acc.Tree: 0.9838
2023-03-28 11:30:55,781 - mmseg - INFO - Iter [1050/10000]	lr: 9.051e-03, eta: 3:34:56, time: 1.843, data_time: 0.677, memory: 17071, decode.loss_ce: 0.1497, decode.acc_seg: 92.9129, aux_0.loss_ce: 0.1587, aux_0.acc_seg: 92.6199, aux_1.loss_ce: 0.1764, aux_1.acc_seg: 92.0319, aux_2.loss_ce: 0.1361, aux_2.loss_dice: 0.2887, aux_2.acc_seg: 95.7792, aux_3.loss_ce: 0.4597, aux_3.acc_seg: 91.5364, loss: 1.3693
2023-03-28 11:32:08,555 - mmseg - INFO - Iter [1100/10000]	lr: 9.005e-03, eta: 3:33:49, time: 1.455, data_time: 0.287, memory: 17071, decode.loss_ce: 0.1529, decode.acc_seg: 92.6638, aux_0.loss_ce: 0.1636, aux_0.acc_seg: 92.3850, aux_1.loss_ce: 0.1807, aux_1.acc_seg: 91.7759, aux_2.loss_ce: 0.1356, aux_2.loss_dice: 0.2881, aux_2.acc_seg: 95.8188, aux_3.loss_ce: 0.4558, aux_3.acc_seg: 91.2316, loss: 1.3767
2023-03-28 11:33:18,211 - mmseg - INFO - Iter [1150/10000]	lr: 8.960e-03, eta: 3:32:19, time: 1.393, data_time: 0.225, memory: 17071, decode.loss_ce: 0.1306, decode.acc_seg: 93.5955, aux_0.loss_ce: 0.1408, aux_0.acc_seg: 93.2929, aux_1.loss_ce: 0.1550, aux_1.acc_seg: 92.7165, aux_2.loss_ce: 0.1354, aux_2.loss_dice: 0.2861, aux_2.acc_seg: 95.7726, aux_3.loss_ce: 0.4074, aux_3.acc_seg: 92.2139, loss: 1.2554
2023-03-28 11:34:27,743 - mmseg - INFO - Iter [1200/10000]	lr: 8.914e-03, eta: 3:30:49, time: 1.391, data_time: 0.228, memory: 17071, decode.loss_ce: 0.1349, decode.acc_seg: 93.4475, aux_0.loss_ce: 0.1463, aux_0.acc_seg: 93.1581, aux_1.loss_ce: 0.1608, aux_1.acc_seg: 92.5648, aux_2.loss_ce: 0.1358, aux_2.loss_dice: 0.2857, aux_2.acc_seg: 95.7567, aux_3.loss_ce: 0.4154, aux_3.acc_seg: 92.0220, loss: 1.2790
2023-03-28 11:35:40,140 - mmseg - INFO - Iter [1250/10000]	lr: 8.869e-03, eta: 3:29:41, time: 1.448, data_time: 0.289, memory: 17071, decode.loss_ce: 0.1270, decode.acc_seg: 93.7396, aux_0.loss_ce: 0.1369, aux_0.acc_seg: 93.4317, aux_1.loss_ce: 0.1522, aux_1.acc_seg: 92.8295, aux_2.loss_ce: 0.1346, aux_2.loss_dice: 0.2835, aux_2.acc_seg: 95.7638, aux_3.loss_ce: 0.3814, aux_3.acc_seg: 92.2946, loss: 1.2157
2023-03-28 11:36:49,383 - mmseg - INFO - Iter [1300/10000]	lr: 8.823e-03, eta: 3:28:11, time: 1.385, data_time: 0.223, memory: 17071, decode.loss_ce: 0.1290, decode.acc_seg: 93.6089, aux_0.loss_ce: 0.1374, aux_0.acc_seg: 93.3511, aux_1.loss_ce: 0.1525, aux_1.acc_seg: 92.7439, aux_2.loss_ce: 0.1344, aux_2.loss_dice: 0.2821, aux_2.acc_seg: 95.7974, aux_3.loss_ce: 0.3692, aux_3.acc_seg: 92.1366, loss: 1.2046
2023-03-28 11:37:58,856 - mmseg - INFO - Iter [1350/10000]	lr: 8.777e-03, eta: 3:26:44, time: 1.389, data_time: 0.225, memory: 17071, decode.loss_ce: 0.1205, decode.acc_seg: 93.9753, aux_0.loss_ce: 0.1283, aux_0.acc_seg: 93.6978, aux_1.loss_ce: 0.1441, aux_1.acc_seg: 93.0906, aux_2.loss_ce: 0.1336, aux_2.loss_dice: 0.2816, aux_2.acc_seg: 95.7925, aux_3.loss_ce: 0.3594, aux_3.acc_seg: 92.4917, loss: 1.1674
2023-03-28 11:39:11,330 - mmseg - INFO - Iter [1400/10000]	lr: 8.732e-03, eta: 3:25:37, time: 1.449, data_time: 0.291, memory: 17071, decode.loss_ce: 0.1181, decode.acc_seg: 94.0881, aux_0.loss_ce: 0.1277, aux_0.acc_seg: 93.8176, aux_1.loss_ce: 0.1420, aux_1.acc_seg: 93.1854, aux_2.loss_ce: 0.1320, aux_2.loss_dice: 0.2797, aux_2.acc_seg: 95.8591, aux_3.loss_ce: 0.3562, aux_3.acc_seg: 92.6220, loss: 1.1558
2023-03-28 11:40:20,994 - mmseg - INFO - Iter [1450/10000]	lr: 8.686e-03, eta: 3:24:13, time: 1.393, data_time: 0.230, memory: 17071, decode.loss_ce: 0.1165, decode.acc_seg: 94.1461, aux_0.loss_ce: 0.1244, aux_0.acc_seg: 93.8744, aux_1.loss_ce: 0.1399, aux_1.acc_seg: 93.2468, aux_2.loss_ce: 0.1338, aux_2.loss_dice: 0.2816, aux_2.acc_seg: 95.8002, aux_3.loss_ce: 0.3452, aux_3.acc_seg: 92.6873, loss: 1.1414
2023-03-28 11:41:30,948 - mmseg - INFO - Iter [1500/10000]	lr: 8.640e-03, eta: 3:22:52, time: 1.399, data_time: 0.235, memory: 17071, decode.loss_ce: 0.1162, decode.acc_seg: 94.2350, aux_0.loss_ce: 0.1243, aux_0.acc_seg: 93.9747, aux_1.loss_ce: 0.1410, aux_1.acc_seg: 93.3336, aux_2.loss_ce: 0.1335, aux_2.loss_dice: 0.2805, aux_2.acc_seg: 95.7715, aux_3.loss_ce: 0.3440, aux_3.acc_seg: 92.7386, loss: 1.1396
2023-03-28 11:42:43,615 - mmseg - INFO - Iter [1550/10000]	lr: 8.595e-03, eta: 3:21:46, time: 1.453, data_time: 0.294, memory: 17071, decode.loss_ce: 0.1117, decode.acc_seg: 94.3327, aux_0.loss_ce: 0.1191, aux_0.acc_seg: 94.0605, aux_1.loss_ce: 0.1342, aux_1.acc_seg: 93.4468, aux_2.loss_ce: 0.1321, aux_2.loss_dice: 0.2781, aux_2.acc_seg: 95.8290, aux_3.loss_ce: 0.3296, aux_3.acc_seg: 92.8529, loss: 1.1047
2023-03-28 11:43:53,043 - mmseg - INFO - Iter [1600/10000]	lr: 8.549e-03, eta: 3:20:23, time: 1.389, data_time: 0.228, memory: 17071, decode.loss_ce: 0.1134, decode.acc_seg: 94.2636, aux_0.loss_ce: 0.1208, aux_0.acc_seg: 93.9971, aux_1.loss_ce: 0.1367, aux_1.acc_seg: 93.3706, aux_2.loss_ce: 0.1309, aux_2.loss_dice: 0.2775, aux_2.acc_seg: 95.8920, aux_3.loss_ce: 0.3324, aux_3.acc_seg: 92.8483, loss: 1.1116
2023-03-28 11:45:02,571 - mmseg - INFO - Iter [1650/10000]	lr: 8.503e-03, eta: 3:19:01, time: 1.391, data_time: 0.224, memory: 17071, decode.loss_ce: 0.1142, decode.acc_seg: 94.2477, aux_0.loss_ce: 0.1220, aux_0.acc_seg: 93.9993, aux_1.loss_ce: 0.1379, aux_1.acc_seg: 93.3448, aux_2.loss_ce: 0.1344, aux_2.loss_dice: 0.2790, aux_2.acc_seg: 95.7113, aux_3.loss_ce: 0.3332, aux_3.acc_seg: 92.8320, loss: 1.1207
2023-03-28 11:46:15,295 - mmseg - INFO - Iter [1700/10000]	lr: 8.457e-03, eta: 3:17:56, time: 1.454, data_time: 0.282, memory: 17071, decode.loss_ce: 0.1120, decode.acc_seg: 94.3171, aux_0.loss_ce: 0.1200, aux_0.acc_seg: 94.0529, aux_1.loss_ce: 0.1360, aux_1.acc_seg: 93.3946, aux_2.loss_ce: 0.1323, aux_2.loss_dice: 0.2771, aux_2.acc_seg: 95.7838, aux_3.loss_ce: 0.3245, aux_3.acc_seg: 92.9049, loss: 1.1018
2023-03-28 11:47:24,630 - mmseg - INFO - Iter [1750/10000]	lr: 8.411e-03, eta: 3:16:34, time: 1.387, data_time: 0.230, memory: 17071, decode.loss_ce: 0.1102, decode.acc_seg: 94.4278, aux_0.loss_ce: 0.1179, aux_0.acc_seg: 94.1574, aux_1.loss_ce: 0.1343, aux_1.acc_seg: 93.5127, aux_2.loss_ce: 0.1331, aux_2.loss_dice: 0.2784, aux_2.acc_seg: 95.7647, aux_3.loss_ce: 0.3224, aux_3.acc_seg: 92.9231, loss: 1.0963
2023-03-28 11:48:34,368 - mmseg - INFO - Iter [1800/10000]	lr: 8.365e-03, eta: 3:15:14, time: 1.395, data_time: 0.226, memory: 17071, decode.loss_ce: 0.1082, decode.acc_seg: 94.4302, aux_0.loss_ce: 0.1153, aux_0.acc_seg: 94.1742, aux_1.loss_ce: 0.1300, aux_1.acc_seg: 93.5655, aux_2.loss_ce: 0.1313, aux_2.loss_dice: 0.2759, aux_2.acc_seg: 95.8235, aux_3.loss_ce: 0.3172, aux_3.acc_seg: 92.9878, loss: 1.0779
2023-03-28 11:49:46,570 - mmseg - INFO - Iter [1850/10000]	lr: 8.320e-03, eta: 3:14:06, time: 1.444, data_time: 0.286, memory: 17071, decode.loss_ce: 0.1164, decode.acc_seg: 94.2210, aux_0.loss_ce: 0.1228, aux_0.acc_seg: 93.9690, aux_1.loss_ce: 0.1403, aux_1.acc_seg: 93.3119, aux_2.loss_ce: 0.1308, aux_2.loss_dice: 0.2771, aux_2.acc_seg: 95.8943, aux_3.loss_ce: 0.3438, aux_3.acc_seg: 92.8042, loss: 1.1312
2023-03-28 11:50:56,290 - mmseg - INFO - Iter [1900/10000]	lr: 8.274e-03, eta: 3:12:47, time: 1.394, data_time: 0.227, memory: 17071, decode.loss_ce: 0.1110, decode.acc_seg: 94.4006, aux_0.loss_ce: 0.1195, aux_0.acc_seg: 94.1316, aux_1.loss_ce: 0.1350, aux_1.acc_seg: 93.4963, aux_2.loss_ce: 0.1334, aux_2.loss_dice: 0.2768, aux_2.acc_seg: 95.7553, aux_3.loss_ce: 0.3163, aux_3.acc_seg: 93.0021, loss: 1.0920
2023-03-28 11:52:06,110 - mmseg - INFO - Iter [1950/10000]	lr: 8.228e-03, eta: 3:11:29, time: 1.396, data_time: 0.227, memory: 17071, decode.loss_ce: 0.1052, decode.acc_seg: 94.6032, aux_0.loss_ce: 0.1120, aux_0.acc_seg: 94.3456, aux_1.loss_ce: 0.1277, aux_1.acc_seg: 93.7189, aux_2.loss_ce: 0.1317, aux_2.loss_dice: 0.2752, aux_2.acc_seg: 95.8147, aux_3.loss_ce: 0.2935, aux_3.acc_seg: 93.2233, loss: 1.0451
2023-03-28 11:53:18,864 - mmseg - INFO - Saving checkpoint at 2000 iterations
2023-03-28 11:53:19,151 - mmseg - INFO - Exp name: stdc1-entext_2x12_720x960_10k_camvid.py
2023-03-28 11:53:19,151 - mmseg - INFO - Iter [2000/10000]	lr: 8.182e-03, eta: 3:10:25, time: 1.463, data_time: 0.292, memory: 17071, decode.loss_ce: 0.1088, decode.acc_seg: 94.4326, aux_0.loss_ce: 0.1163, aux_0.acc_seg: 94.1897, aux_1.loss_ce: 0.1302, aux_1.acc_seg: 93.5585, aux_2.loss_ce: 0.1331, aux_2.loss_dice: 0.2770, aux_2.acc_seg: 95.7397, aux_3.loss_ce: 0.3004, aux_3.acc_seg: 93.0806, loss: 1.0658
2023-03-28 11:53:21,694 - mmseg - INFO - per class results:
2023-03-28 11:53:21,695 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  Bicyclist  | 73.82 | 78.41 |
|   Building  | 92.13 | 94.13 |
|     Car     | 86.28 | 94.54 |
| Column_Pole |  9.0  | 10.06 |
|    Fence    | 78.65 | 93.84 |
|  Pedestrian | 45.13 | 72.17 |
|     Road    | 96.91 |  98.4 |
|   Sidewalk  | 89.81 | 96.82 |
|  SignSymbol |  0.0  |  0.0  |
|     Sky     | 93.33 | 95.95 |
|     Tree    | 91.25 | 97.83 |
+-------------+-------+-------+
2023-03-28 11:53:21,695 - mmseg - INFO - Summary:
2023-03-28 11:53:21,695 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc |  mIoU |  mAcc |
+-------+-------+-------+
| 95.33 | 68.76 | 75.65 |
+-------+-------+-------+
2023-03-28 11:53:21,695 - mmseg - INFO - Exp name: stdc1-entext_2x12_720x960_10k_camvid.py
2023-03-28 11:53:21,695 - mmseg - INFO - Iter(val) [51]	aAcc: 0.9533, mIoU: 0.6876, mAcc: 0.7565, IoU.Bicyclist: 0.7382, IoU.Building: 0.9213, IoU.Car: 0.8628, IoU.Column_Pole: 0.0900, IoU.Fence: 0.7865, IoU.Pedestrian: 0.4513, IoU.Road: 0.9691, IoU.Sidewalk: 0.8981, IoU.SignSymbol: 0.0000, IoU.Sky: 0.9333, IoU.Tree: 0.9125, Acc.Bicyclist: 0.7841, Acc.Building: 0.9413, Acc.Car: 0.9454, Acc.Column_Pole: 0.1006, Acc.Fence: 0.9384, Acc.Pedestrian: 0.7217, Acc.Road: 0.9840, Acc.Sidewalk: 0.9682, Acc.SignSymbol: 0.0000, Acc.Sky: 0.9595, Acc.Tree: 0.9783
2023-03-28 11:54:31,387 - mmseg - INFO - Iter [2050/10000]	lr: 8.136e-03, eta: 3:09:16, time: 1.443, data_time: 0.280, memory: 17071, decode.loss_ce: 0.1082, decode.acc_seg: 94.4795, aux_0.loss_ce: 0.1145, aux_0.acc_seg: 94.2542, aux_1.loss_ce: 0.1301, aux_1.acc_seg: 93.6400, aux_2.loss_ce: 0.1330, aux_2.loss_dice: 0.2774, aux_2.acc_seg: 95.7960, aux_3.loss_ce: 0.2918, aux_3.acc_seg: 93.1425, loss: 1.0550
2023-03-28 11:55:41,224 - mmseg - INFO - Iter [2100/10000]	lr: 8.090e-03, eta: 3:07:59, time: 1.397, data_time: 0.228, memory: 17071, decode.loss_ce: 0.1031, decode.acc_seg: 94.6758, aux_0.loss_ce: 0.1104, aux_0.acc_seg: 94.4426, aux_1.loss_ce: 0.1245, aux_1.acc_seg: 93.8167, aux_2.loss_ce: 0.1302, aux_2.loss_dice: 0.2741, aux_2.acc_seg: 95.8693, aux_3.loss_ce: 0.2823, aux_3.acc_seg: 93.2803, loss: 1.0245
2023-03-28 11:56:53,967 - mmseg - INFO - Iter [2150/10000]	lr: 8.043e-03, eta: 3:06:53, time: 1.455, data_time: 0.293, memory: 17071, decode.loss_ce: 0.1030, decode.acc_seg: 94.6692, aux_0.loss_ce: 0.1096, aux_0.acc_seg: 94.4289, aux_1.loss_ce: 0.1239, aux_1.acc_seg: 93.8233, aux_2.loss_ce: 0.1294, aux_2.loss_dice: 0.2742, aux_2.acc_seg: 95.9201, aux_3.loss_ce: 0.2866, aux_3.acc_seg: 93.2955, loss: 1.0267
2023-03-28 11:58:03,737 - mmseg - INFO - Iter [2200/10000]	lr: 7.997e-03, eta: 3:05:35, time: 1.395, data_time: 0.229, memory: 17071, decode.loss_ce: 0.1029, decode.acc_seg: 94.7094, aux_0.loss_ce: 0.1104, aux_0.acc_seg: 94.4611, aux_1.loss_ce: 0.1243, aux_1.acc_seg: 93.8718, aux_2.loss_ce: 0.1308, aux_2.loss_dice: 0.2738, aux_2.acc_seg: 95.8311, aux_3.loss_ce: 0.2830, aux_3.acc_seg: 93.3195, loss: 1.0251
2023-03-28 11:59:13,045 - mmseg - INFO - Iter [2250/10000]	lr: 7.951e-03, eta: 3:04:17, time: 1.386, data_time: 0.224, memory: 17071, decode.loss_ce: 0.1007, decode.acc_seg: 94.7850, aux_0.loss_ce: 0.1077, aux_0.acc_seg: 94.5280, aux_1.loss_ce: 0.1215, aux_1.acc_seg: 93.9282, aux_2.loss_ce: 0.1300, aux_2.loss_dice: 0.2731, aux_2.acc_seg: 95.8760, aux_3.loss_ce: 0.2723, aux_3.acc_seg: 93.4187, loss: 1.0054
2023-03-28 12:00:25,452 - mmseg - INFO - Iter [2300/10000]	lr: 7.905e-03, eta: 3:03:09, time: 1.448, data_time: 0.284, memory: 17071, decode.loss_ce: 0.1020, decode.acc_seg: 94.7421, aux_0.loss_ce: 0.1089, aux_0.acc_seg: 94.4817, aux_1.loss_ce: 0.1217, aux_1.acc_seg: 93.8973, aux_2.loss_ce: 0.1308, aux_2.loss_dice: 0.2751, aux_2.acc_seg: 95.8712, aux_3.loss_ce: 0.2842, aux_3.acc_seg: 93.4118, loss: 1.0227
2023-03-28 12:01:35,059 - mmseg - INFO - Iter [2350/10000]	lr: 7.859e-03, eta: 3:01:52, time: 1.392, data_time: 0.226, memory: 17071, decode.loss_ce: 0.0981, decode.acc_seg: 94.8988, aux_0.loss_ce: 0.1047, aux_0.acc_seg: 94.6602, aux_1.loss_ce: 0.1174, aux_1.acc_seg: 94.0926, aux_2.loss_ce: 0.1308, aux_2.loss_dice: 0.2742, aux_2.acc_seg: 95.8130, aux_3.loss_ce: 0.2601, aux_3.acc_seg: 93.5570, loss: 0.9852
2023-03-28 12:02:44,691 - mmseg - INFO - Iter [2400/10000]	lr: 7.813e-03, eta: 3:00:35, time: 1.393, data_time: 0.228, memory: 17071, decode.loss_ce: 0.0989, decode.acc_seg: 94.8771, aux_0.loss_ce: 0.1060, aux_0.acc_seg: 94.6268, aux_1.loss_ce: 0.1194, aux_1.acc_seg: 94.0428, aux_2.loss_ce: 0.1301, aux_2.loss_dice: 0.2738, aux_2.acc_seg: 95.8531, aux_3.loss_ce: 0.2716, aux_3.acc_seg: 93.5166, loss: 0.9998
2023-03-28 12:03:57,003 - mmseg - INFO - Iter [2450/10000]	lr: 7.766e-03, eta: 2:59:27, time: 1.446, data_time: 0.284, memory: 17071, decode.loss_ce: 0.0989, decode.acc_seg: 94.7808, aux_0.loss_ce: 0.1060, aux_0.acc_seg: 94.5711, aux_1.loss_ce: 0.1180, aux_1.acc_seg: 93.9511, aux_2.loss_ce: 0.1297, aux_2.loss_dice: 0.2733, aux_2.acc_seg: 95.8545, aux_3.loss_ce: 0.2636, aux_3.acc_seg: 93.4347, loss: 0.9895
2023-03-28 12:05:06,336 - mmseg - INFO - Iter [2500/10000]	lr: 7.720e-03, eta: 2:58:10, time: 1.387, data_time: 0.228, memory: 17071, decode.loss_ce: 0.0959, decode.acc_seg: 94.8924, aux_0.loss_ce: 0.1022, aux_0.acc_seg: 94.6558, aux_1.loss_ce: 0.1157, aux_1.acc_seg: 94.0904, aux_2.loss_ce: 0.1286, aux_2.loss_dice: 0.2712, aux_2.acc_seg: 95.8876, aux_3.loss_ce: 0.2554, aux_3.acc_seg: 93.6126, loss: 0.9690
2023-03-28 12:06:15,765 - mmseg - INFO - Iter [2550/10000]	lr: 7.674e-03, eta: 2:56:53, time: 1.388, data_time: 0.229, memory: 17071, decode.loss_ce: 0.1004, decode.acc_seg: 94.7726, aux_0.loss_ce: 0.1064, aux_0.acc_seg: 94.5472, aux_1.loss_ce: 0.1197, aux_1.acc_seg: 93.9338, aux_2.loss_ce: 0.1298, aux_2.loss_dice: 0.2723, aux_2.acc_seg: 95.8538, aux_3.loss_ce: 0.2686, aux_3.acc_seg: 93.4749, loss: 0.9971
2023-03-28 12:07:28,469 - mmseg - INFO - Iter [2600/10000]	lr: 7.627e-03, eta: 2:55:46, time: 1.454, data_time: 0.287, memory: 17071, decode.loss_ce: 0.0976, decode.acc_seg: 94.8682, aux_0.loss_ce: 0.1050, aux_0.acc_seg: 94.6345, aux_1.loss_ce: 0.1174, aux_1.acc_seg: 94.0502, aux_2.loss_ce: 0.1319, aux_2.loss_dice: 0.2730, aux_2.acc_seg: 95.7454, aux_3.loss_ce: 0.2615, aux_3.acc_seg: 93.5640, loss: 0.9865
2023-03-28 12:08:38,202 - mmseg - INFO - Iter [2650/10000]	lr: 7.581e-03, eta: 2:54:31, time: 1.395, data_time: 0.223, memory: 17071, decode.loss_ce: 0.0966, decode.acc_seg: 94.9346, aux_0.loss_ce: 0.1026, aux_0.acc_seg: 94.6950, aux_1.loss_ce: 0.1157, aux_1.acc_seg: 94.1127, aux_2.loss_ce: 0.1302, aux_2.loss_dice: 0.2725, aux_2.acc_seg: 95.8338, aux_3.loss_ce: 0.2530, aux_3.acc_seg: 93.6429, loss: 0.9706
2023-03-28 12:09:47,790 - mmseg - INFO - Iter [2700/10000]	lr: 7.535e-03, eta: 2:53:15, time: 1.392, data_time: 0.226, memory: 17071, decode.loss_ce: 0.0945, decode.acc_seg: 95.0066, aux_0.loss_ce: 0.1005, aux_0.acc_seg: 94.7682, aux_1.loss_ce: 0.1154, aux_1.acc_seg: 94.1580, aux_2.loss_ce: 0.1301, aux_2.loss_dice: 0.2721, aux_2.acc_seg: 95.8381, aux_3.loss_ce: 0.2508, aux_3.acc_seg: 93.7367, loss: 0.9634
2023-03-28 12:11:00,305 - mmseg - INFO - Iter [2750/10000]	lr: 7.488e-03, eta: 2:52:07, time: 1.450, data_time: 0.293, memory: 17071, decode.loss_ce: 0.0970, decode.acc_seg: 94.9464, aux_0.loss_ce: 0.1026, aux_0.acc_seg: 94.7375, aux_1.loss_ce: 0.1160, aux_1.acc_seg: 94.1299, aux_2.loss_ce: 0.1299, aux_2.loss_dice: 0.2723, aux_2.acc_seg: 95.8327, aux_3.loss_ce: 0.2583, aux_3.acc_seg: 93.7089, loss: 0.9762
2023-03-28 12:12:09,564 - mmseg - INFO - Iter [2800/10000]	lr: 7.442e-03, eta: 2:50:51, time: 1.385, data_time: 0.229, memory: 17071, decode.loss_ce: 0.0925, decode.acc_seg: 95.0678, aux_0.loss_ce: 0.0998, aux_0.acc_seg: 94.8328, aux_1.loss_ce: 0.1116, aux_1.acc_seg: 94.2415, aux_2.loss_ce: 0.1280, aux_2.loss_dice: 0.2705, aux_2.acc_seg: 95.9022, aux_3.loss_ce: 0.2551, aux_3.acc_seg: 93.7858, loss: 0.9575
2023-03-28 12:13:19,108 - mmseg - INFO - Iter [2850/10000]	lr: 7.395e-03, eta: 2:49:36, time: 1.391, data_time: 0.229, memory: 17071, decode.loss_ce: 0.0960, decode.acc_seg: 94.9856, aux_0.loss_ce: 0.1015, aux_0.acc_seg: 94.7802, aux_1.loss_ce: 0.1155, aux_1.acc_seg: 94.1784, aux_2.loss_ce: 0.1308, aux_2.loss_dice: 0.2721, aux_2.acc_seg: 95.7785, aux_3.loss_ce: 0.2542, aux_3.acc_seg: 93.6897, loss: 0.9701
2023-03-28 12:14:32,001 - mmseg - INFO - Iter [2900/10000]	lr: 7.349e-03, eta: 2:48:29, time: 1.457, data_time: 0.297, memory: 17071, decode.loss_ce: 0.0936, decode.acc_seg: 95.0417, aux_0.loss_ce: 0.1004, aux_0.acc_seg: 94.8163, aux_1.loss_ce: 0.1123, aux_1.acc_seg: 94.2400, aux_2.loss_ce: 0.1283, aux_2.loss_dice: 0.2699, aux_2.acc_seg: 95.8764, aux_3.loss_ce: 0.2492, aux_3.acc_seg: 93.7266, loss: 0.9536
2023-03-28 12:15:42,123 - mmseg - INFO - Iter [2950/10000]	lr: 7.302e-03, eta: 2:47:15, time: 1.403, data_time: 0.235, memory: 17071, decode.loss_ce: 0.0945, decode.acc_seg: 95.0305, aux_0.loss_ce: 0.0991, aux_0.acc_seg: 94.8196, aux_1.loss_ce: 0.1141, aux_1.acc_seg: 94.1928, aux_2.loss_ce: 0.1307, aux_2.loss_dice: 0.2723, aux_2.acc_seg: 95.7912, aux_3.loss_ce: 0.2520, aux_3.acc_seg: 93.7674, loss: 0.9628
2023-03-28 12:16:51,589 - mmseg - INFO - Saving checkpoint at 3000 iterations
2023-03-28 12:16:51,859 - mmseg - INFO - Exp name: stdc1-entext_2x12_720x960_10k_camvid.py
2023-03-28 12:16:51,859 - mmseg - INFO - Iter [3000/10000]	lr: 7.255e-03, eta: 2:46:01, time: 1.397, data_time: 0.227, memory: 17071, decode.loss_ce: 0.0921, decode.acc_seg: 95.1232, aux_0.loss_ce: 0.0979, aux_0.acc_seg: 94.9124, aux_1.loss_ce: 0.1120, aux_1.acc_seg: 94.2916, aux_2.loss_ce: 0.1291, aux_2.loss_dice: 0.2719, aux_2.acc_seg: 95.8592, aux_3.loss_ce: 0.2473, aux_3.acc_seg: 93.8167, loss: 0.9502
2023-03-28 12:16:55,194 - mmseg - INFO - per class results:
2023-03-28 12:16:55,195 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  Bicyclist  | 80.18 | 88.83 |
|   Building  | 92.18 | 94.05 |
|     Car     | 90.09 |  95.7 |
| Column_Pole |  8.96 | 10.42 |
|    Fence    | 76.52 | 89.02 |
|  Pedestrian | 52.02 | 77.32 |
|     Road    | 96.76 | 97.62 |
|   Sidewalk  | 90.02 | 97.32 |
|  SignSymbol |  0.0  |  0.0  |
|     Sky     | 93.61 | 96.09 |
|     Tree    | 90.67 | 98.46 |
+-------------+-------+-------+
2023-03-28 12:16:55,195 - mmseg - INFO - Summary:
2023-03-28 12:16:55,195 - mmseg - INFO - 
+------+-------+------+
| aAcc |  mIoU | mAcc |
+------+-------+------+
| 95.4 | 70.09 | 76.8 |
+------+-------+------+
2023-03-28 12:16:55,195 - mmseg - INFO - Exp name: stdc1-entext_2x12_720x960_10k_camvid.py
2023-03-28 12:16:55,195 - mmseg - INFO - Iter(val) [51]	aAcc: 0.9540, mIoU: 0.7009, mAcc: 0.7680, IoU.Bicyclist: 0.8018, IoU.Building: 0.9218, IoU.Car: 0.9009, IoU.Column_Pole: 0.0896, IoU.Fence: 0.7652, IoU.Pedestrian: 0.5202, IoU.Road: 0.9676, IoU.Sidewalk: 0.9002, IoU.SignSymbol: 0.0000, IoU.Sky: 0.9361, IoU.Tree: 0.9067, Acc.Bicyclist: 0.8883, Acc.Building: 0.9405, Acc.Car: 0.9570, Acc.Column_Pole: 0.1042, Acc.Fence: 0.8902, Acc.Pedestrian: 0.7732, Acc.Road: 0.9762, Acc.Sidewalk: 0.9732, Acc.SignSymbol: 0.0000, Acc.Sky: 0.9609, Acc.Tree: 0.9846
2023-03-28 12:18:07,867 - mmseg - INFO - Iter [3050/10000]	lr: 7.209e-03, eta: 2:45:00, time: 1.518, data_time: 0.354, memory: 17071, decode.loss_ce: 0.0910, decode.acc_seg: 95.1283, aux_0.loss_ce: 0.0969, aux_0.acc_seg: 94.9222, aux_1.loss_ce: 0.1098, aux_1.acc_seg: 94.3313, aux_2.loss_ce: 0.1287, aux_2.loss_dice: 0.2702, aux_2.acc_seg: 95.8786, aux_3.loss_ce: 0.2380, aux_3.acc_seg: 93.8580, loss: 0.9345
2023-03-28 12:19:17,673 - mmseg - INFO - Iter [3100/10000]	lr: 7.162e-03, eta: 2:43:46, time: 1.396, data_time: 0.230, memory: 17071, decode.loss_ce: 0.0917, decode.acc_seg: 95.1603, aux_0.loss_ce: 0.0979, aux_0.acc_seg: 94.9276, aux_1.loss_ce: 0.1105, aux_1.acc_seg: 94.3414, aux_2.loss_ce: 0.1291, aux_2.loss_dice: 0.2705, aux_2.acc_seg: 95.8432, aux_3.loss_ce: 0.2455, aux_3.acc_seg: 93.8832, loss: 0.9452
2023-03-28 12:20:27,094 - mmseg - INFO - Iter [3150/10000]	lr: 7.115e-03, eta: 2:42:31, time: 1.388, data_time: 0.225, memory: 17071, decode.loss_ce: 0.0941, decode.acc_seg: 95.1602, aux_0.loss_ce: 0.1000, aux_0.acc_seg: 94.9223, aux_1.loss_ce: 0.1122, aux_1.acc_seg: 94.3592, aux_2.loss_ce: 0.1294, aux_2.loss_dice: 0.2710, aux_2.acc_seg: 95.8518, aux_3.loss_ce: 0.2475, aux_3.acc_seg: 93.8746, loss: 0.9542
2023-03-28 12:21:40,124 - mmseg - INFO - Iter [3200/10000]	lr: 7.069e-03, eta: 2:41:24, time: 1.461, data_time: 0.290, memory: 17071, decode.loss_ce: 0.0899, decode.acc_seg: 95.1877, aux_0.loss_ce: 0.0958, aux_0.acc_seg: 94.9666, aux_1.loss_ce: 0.1089, aux_1.acc_seg: 94.3676, aux_2.loss_ce: 0.1291, aux_2.loss_dice: 0.2703, aux_2.acc_seg: 95.8450, aux_3.loss_ce: 0.2363, aux_3.acc_seg: 93.9337, loss: 0.9303
2023-03-28 12:22:49,463 - mmseg - INFO - Iter [3250/10000]	lr: 7.022e-03, eta: 2:40:09, time: 1.387, data_time: 0.225, memory: 17071, decode.loss_ce: 0.0942, decode.acc_seg: 95.0970, aux_0.loss_ce: 0.0996, aux_0.acc_seg: 94.8749, aux_1.loss_ce: 0.1122, aux_1.acc_seg: 94.3042, aux_2.loss_ce: 0.1298, aux_2.loss_dice: 0.2716, aux_2.acc_seg: 95.8525, aux_3.loss_ce: 0.2514, aux_3.acc_seg: 93.8040, loss: 0.9588
2023-03-28 12:23:58,661 - mmseg - INFO - Iter [3300/10000]	lr: 6.975e-03, eta: 2:38:53, time: 1.384, data_time: 0.226, memory: 17071, decode.loss_ce: 0.0915, decode.acc_seg: 95.1270, aux_0.loss_ce: 0.0970, aux_0.acc_seg: 94.9125, aux_1.loss_ce: 0.1108, aux_1.acc_seg: 94.3182, aux_2.loss_ce: 0.1282, aux_2.loss_dice: 0.2695, aux_2.acc_seg: 95.8872, aux_3.loss_ce: 0.2395, aux_3.acc_seg: 93.8777, loss: 0.9365
2023-03-28 12:25:11,438 - mmseg - INFO - Iter [3350/10000]	lr: 6.928e-03, eta: 2:37:45, time: 1.456, data_time: 0.284, memory: 17071, decode.loss_ce: 0.0947, decode.acc_seg: 95.0550, aux_0.loss_ce: 0.1002, aux_0.acc_seg: 94.8621, aux_1.loss_ce: 0.1134, aux_1.acc_seg: 94.2648, aux_2.loss_ce: 0.1290, aux_2.loss_dice: 0.2697, aux_2.acc_seg: 95.8705, aux_3.loss_ce: 0.2469, aux_3.acc_seg: 93.7925, loss: 0.9539
2023-03-28 12:26:20,824 - mmseg - INFO - Iter [3400/10000]	lr: 6.881e-03, eta: 2:36:31, time: 1.388, data_time: 0.225, memory: 17071, decode.loss_ce: 0.0892, decode.acc_seg: 95.2201, aux_0.loss_ce: 0.0952, aux_0.acc_seg: 95.0063, aux_1.loss_ce: 0.1077, aux_1.acc_seg: 94.4126, aux_2.loss_ce: 0.1287, aux_2.loss_dice: 0.2700, aux_2.acc_seg: 95.8514, aux_3.loss_ce: 0.2327, aux_3.acc_seg: 93.9722, loss: 0.9236
2023-03-28 12:27:30,081 - mmseg - INFO - Iter [3450/10000]	lr: 6.834e-03, eta: 2:35:16, time: 1.385, data_time: 0.224, memory: 17071, decode.loss_ce: 0.0870, decode.acc_seg: 95.3583, aux_0.loss_ce: 0.0933, aux_0.acc_seg: 95.1368, aux_1.loss_ce: 0.1048, aux_1.acc_seg: 94.5677, aux_2.loss_ce: 0.1274, aux_2.loss_dice: 0.2688, aux_2.acc_seg: 95.8894, aux_3.loss_ce: 0.2274, aux_3.acc_seg: 94.1081, loss: 0.9087
2023-03-28 12:28:42,605 - mmseg - INFO - Iter [3500/10000]	lr: 6.787e-03, eta: 2:34:08, time: 1.451, data_time: 0.288, memory: 17071, decode.loss_ce: 0.0884, decode.acc_seg: 95.3037, aux_0.loss_ce: 0.0932, aux_0.acc_seg: 95.1058, aux_1.loss_ce: 0.1061, aux_1.acc_seg: 94.5335, aux_2.loss_ce: 0.1282, aux_2.loss_dice: 0.2693, aux_2.acc_seg: 95.8833, aux_3.loss_ce: 0.2312, aux_3.acc_seg: 94.0749, loss: 0.9166
2023-03-28 12:29:51,974 - mmseg - INFO - Iter [3550/10000]	lr: 6.740e-03, eta: 2:32:53, time: 1.387, data_time: 0.229, memory: 17071, decode.loss_ce: 0.0920, decode.acc_seg: 95.1150, aux_0.loss_ce: 0.0967, aux_0.acc_seg: 94.9153, aux_1.loss_ce: 0.1102, aux_1.acc_seg: 94.3228, aux_2.loss_ce: 0.1272, aux_2.loss_dice: 0.2689, aux_2.acc_seg: 95.9155, aux_3.loss_ce: 0.2431, aux_3.acc_seg: 93.8452, loss: 0.9381
2023-03-28 12:31:01,283 - mmseg - INFO - Iter [3600/10000]	lr: 6.693e-03, eta: 2:31:39, time: 1.386, data_time: 0.226, memory: 17071, decode.loss_ce: 0.0893, decode.acc_seg: 95.2197, aux_0.loss_ce: 0.0948, aux_0.acc_seg: 95.0205, aux_1.loss_ce: 0.1071, aux_1.acc_seg: 94.4345, aux_2.loss_ce: 0.1271, aux_2.loss_dice: 0.2688, aux_2.acc_seg: 95.9234, aux_3.loss_ce: 0.2327, aux_3.acc_seg: 93.9589, loss: 0.9199
2023-03-28 12:32:13,938 - mmseg - INFO - Iter [3650/10000]	lr: 6.646e-03, eta: 2:30:31, time: 1.453, data_time: 0.289, memory: 17071, decode.loss_ce: 0.0890, decode.acc_seg: 95.2797, aux_0.loss_ce: 0.0948, aux_0.acc_seg: 95.0940, aux_1.loss_ce: 0.1066, aux_1.acc_seg: 94.4967, aux_2.loss_ce: 0.1283, aux_2.loss_dice: 0.2696, aux_2.acc_seg: 95.8821, aux_3.loss_ce: 0.2307, aux_3.acc_seg: 94.0282, loss: 0.9190
2023-03-28 12:33:23,164 - mmseg - INFO - Iter [3700/10000]	lr: 6.599e-03, eta: 2:29:16, time: 1.385, data_time: 0.222, memory: 17071, decode.loss_ce: 0.0865, decode.acc_seg: 95.3998, aux_0.loss_ce: 0.0921, aux_0.acc_seg: 95.1936, aux_1.loss_ce: 0.1044, aux_1.acc_seg: 94.6025, aux_2.loss_ce: 0.1291, aux_2.loss_dice: 0.2681, aux_2.acc_seg: 95.7828, aux_3.loss_ce: 0.2267, aux_3.acc_seg: 94.1938, loss: 0.9069
2023-03-28 12:34:32,579 - mmseg - INFO - Iter [3750/10000]	lr: 6.552e-03, eta: 2:28:02, time: 1.388, data_time: 0.232, memory: 17071, decode.loss_ce: 0.0858, decode.acc_seg: 95.4085, aux_0.loss_ce: 0.0907, aux_0.acc_seg: 95.2025, aux_1.loss_ce: 0.1031, aux_1.acc_seg: 94.6214, aux_2.loss_ce: 0.1283, aux_2.loss_dice: 0.2680, aux_2.acc_seg: 95.8464, aux_3.loss_ce: 0.2251, aux_3.acc_seg: 94.1728, loss: 0.9010
2023-03-28 12:35:45,198 - mmseg - INFO - Iter [3800/10000]	lr: 6.505e-03, eta: 2:26:54, time: 1.452, data_time: 0.294, memory: 17071, decode.loss_ce: 0.0870, decode.acc_seg: 95.3642, aux_0.loss_ce: 0.0919, aux_0.acc_seg: 95.1658, aux_1.loss_ce: 0.1046, aux_1.acc_seg: 94.5767, aux_2.loss_ce: 0.1291, aux_2.loss_dice: 0.2686, aux_2.acc_seg: 95.8191, aux_3.loss_ce: 0.2201, aux_3.acc_seg: 94.1357, loss: 0.9013
2023-03-28 12:36:54,806 - mmseg - INFO - Iter [3850/10000]	lr: 6.458e-03, eta: 2:25:40, time: 1.392, data_time: 0.226, memory: 17071, decode.loss_ce: 0.0862, decode.acc_seg: 95.3241, aux_0.loss_ce: 0.0921, aux_0.acc_seg: 95.1150, aux_1.loss_ce: 0.1039, aux_1.acc_seg: 94.5180, aux_2.loss_ce: 0.1279, aux_2.loss_dice: 0.2677, aux_2.acc_seg: 95.8638, aux_3.loss_ce: 0.2218, aux_3.acc_seg: 94.0627, loss: 0.8996
2023-03-28 12:38:04,269 - mmseg - INFO - Iter [3900/10000]	lr: 6.410e-03, eta: 2:24:27, time: 1.389, data_time: 0.228, memory: 17071, decode.loss_ce: 0.0858, decode.acc_seg: 95.4016, aux_0.loss_ce: 0.0912, aux_0.acc_seg: 95.2173, aux_1.loss_ce: 0.1043, aux_1.acc_seg: 94.6011, aux_2.loss_ce: 0.1280, aux_2.loss_dice: 0.2674, aux_2.acc_seg: 95.8318, aux_3.loss_ce: 0.2261, aux_3.acc_seg: 94.1443, loss: 0.9028
2023-03-28 12:39:17,029 - mmseg - INFO - Iter [3950/10000]	lr: 6.363e-03, eta: 2:23:18, time: 1.455, data_time: 0.290, memory: 17071, decode.loss_ce: 0.0878, decode.acc_seg: 95.2816, aux_0.loss_ce: 0.0931, aux_0.acc_seg: 95.0858, aux_1.loss_ce: 0.1052, aux_1.acc_seg: 94.5048, aux_2.loss_ce: 0.1281, aux_2.loss_dice: 0.2676, aux_2.acc_seg: 95.8333, aux_3.loss_ce: 0.2296, aux_3.acc_seg: 94.0606, loss: 0.9115
2023-03-28 12:40:26,542 - mmseg - INFO - Saving checkpoint at 4000 iterations
2023-03-28 12:40:26,838 - mmseg - INFO - Exp name: stdc1-entext_2x12_720x960_10k_camvid.py
2023-03-28 12:40:26,838 - mmseg - INFO - Iter [4000/10000]	lr: 6.316e-03, eta: 2:22:06, time: 1.398, data_time: 0.225, memory: 17071, decode.loss_ce: 0.0857, decode.acc_seg: 95.3922, aux_0.loss_ce: 0.0914, aux_0.acc_seg: 95.2020, aux_1.loss_ce: 0.1037, aux_1.acc_seg: 94.5794, aux_2.loss_ce: 0.1284, aux_2.loss_dice: 0.2675, aux_2.acc_seg: 95.8190, aux_3.loss_ce: 0.2201, aux_3.acc_seg: 94.1366, loss: 0.8967
2023-03-28 12:40:29,436 - mmseg - INFO - per class results:
2023-03-28 12:40:29,437 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  Bicyclist  |  81.4 | 89.14 |
|   Building  | 92.89 | 95.04 |
|     Car     | 91.32 | 95.01 |
| Column_Pole | 12.34 | 14.03 |
|    Fence    | 77.61 | 89.07 |
|  Pedestrian |  55.6 | 78.08 |
|     Road    |  96.9 | 97.68 |
|   Sidewalk  | 90.22 | 97.51 |
|  SignSymbol |  0.0  |  0.0  |
|     Sky     | 93.13 | 95.29 |
|     Tree    | 91.17 | 98.55 |
+-------------+-------+-------+
2023-03-28 12:40:29,437 - mmseg - INFO - Summary:
2023-03-28 12:40:29,437 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc |  mIoU |  mAcc |
+-------+-------+-------+
| 95.65 | 71.14 | 77.22 |
+-------+-------+-------+
2023-03-28 12:40:29,438 - mmseg - INFO - Exp name: stdc1-entext_2x12_720x960_10k_camvid.py
2023-03-28 12:40:29,438 - mmseg - INFO - Iter(val) [51]	aAcc: 0.9565, mIoU: 0.7114, mAcc: 0.7722, IoU.Bicyclist: 0.8140, IoU.Building: 0.9289, IoU.Car: 0.9132, IoU.Column_Pole: 0.1234, IoU.Fence: 0.7761, IoU.Pedestrian: 0.5560, IoU.Road: 0.9690, IoU.Sidewalk: 0.9022, IoU.SignSymbol: 0.0000, IoU.Sky: 0.9313, IoU.Tree: 0.9117, Acc.Bicyclist: 0.8914, Acc.Building: 0.9504, Acc.Car: 0.9501, Acc.Column_Pole: 0.1403, Acc.Fence: 0.8907, Acc.Pedestrian: 0.7808, Acc.Road: 0.9768, Acc.Sidewalk: 0.9751, Acc.SignSymbol: 0.0000, Acc.Sky: 0.9529, Acc.Tree: 0.9855
2023-03-28 12:41:38,613 - mmseg - INFO - Iter [4050/10000]	lr: 6.268e-03, eta: 2:20:55, time: 1.434, data_time: 0.274, memory: 17071, decode.loss_ce: 0.0857, decode.acc_seg: 95.3772, aux_0.loss_ce: 0.0907, aux_0.acc_seg: 95.1810, aux_1.loss_ce: 0.1026, aux_1.acc_seg: 94.5857, aux_2.loss_ce: 0.1265, aux_2.loss_dice: 0.2668, aux_2.acc_seg: 95.9181, aux_3.loss_ce: 0.2209, aux_3.acc_seg: 94.1352, loss: 0.8931
2023-03-28 12:42:50,934 - mmseg - INFO - Iter [4100/10000]	lr: 6.221e-03, eta: 2:19:46, time: 1.446, data_time: 0.285, memory: 17071, decode.loss_ce: 0.0837, decode.acc_seg: 95.4673, aux_0.loss_ce: 0.0890, aux_0.acc_seg: 95.2728, aux_1.loss_ce: 0.1013, aux_1.acc_seg: 94.6746, aux_2.loss_ce: 0.1279, aux_2.loss_dice: 0.2672, aux_2.acc_seg: 95.8414, aux_3.loss_ce: 0.2165, aux_3.acc_seg: 94.2330, loss: 0.8857
2023-03-28 12:44:00,299 - mmseg - INFO - Iter [4150/10000]	lr: 6.174e-03, eta: 2:18:33, time: 1.387, data_time: 0.229, memory: 17071, decode.loss_ce: 0.0847, decode.acc_seg: 95.4144, aux_0.loss_ce: 0.0895, aux_0.acc_seg: 95.2229, aux_1.loss_ce: 0.1017, aux_1.acc_seg: 94.6333, aux_2.loss_ce: 0.1284, aux_2.loss_dice: 0.2675, aux_2.acc_seg: 95.8175, aux_3.loss_ce: 0.2128, aux_3.acc_seg: 94.2058, loss: 0.8846
2023-03-28 12:45:10,014 - mmseg - INFO - Iter [4200/10000]	lr: 6.126e-03, eta: 2:17:20, time: 1.394, data_time: 0.230, memory: 17071, decode.loss_ce: 0.0842, decode.acc_seg: 95.4869, aux_0.loss_ce: 0.0892, aux_0.acc_seg: 95.3020, aux_1.loss_ce: 0.1010, aux_1.acc_seg: 94.7171, aux_2.loss_ce: 0.1267, aux_2.loss_dice: 0.2667, aux_2.acc_seg: 95.9037, aux_3.loss_ce: 0.2186, aux_3.acc_seg: 94.2544, loss: 0.8864
2023-03-28 12:46:22,600 - mmseg - INFO - Iter [4250/10000]	lr: 6.079e-03, eta: 2:16:11, time: 1.452, data_time: 0.288, memory: 17071, decode.loss_ce: 0.0823, decode.acc_seg: 95.4694, aux_0.loss_ce: 0.0868, aux_0.acc_seg: 95.2917, aux_1.loss_ce: 0.0994, aux_1.acc_seg: 94.6877, aux_2.loss_ce: 0.1277, aux_2.loss_dice: 0.2675, aux_2.acc_seg: 95.8471, aux_3.loss_ce: 0.2063, aux_3.acc_seg: 94.2493, loss: 0.8701
2023-03-28 12:47:32,069 - mmseg - INFO - Iter [4300/10000]	lr: 6.031e-03, eta: 2:14:58, time: 1.389, data_time: 0.227, memory: 17071, decode.loss_ce: 0.0822, decode.acc_seg: 95.5680, aux_0.loss_ce: 0.0878, aux_0.acc_seg: 95.3649, aux_1.loss_ce: 0.0993, aux_1.acc_seg: 94.7698, aux_2.loss_ce: 0.1269, aux_2.loss_dice: 0.2662, aux_2.acc_seg: 95.9080, aux_3.loss_ce: 0.2124, aux_3.acc_seg: 94.3376, loss: 0.8748
2023-03-28 12:48:41,830 - mmseg - INFO - Iter [4350/10000]	lr: 5.983e-03, eta: 2:13:45, time: 1.395, data_time: 0.226, memory: 17071, decode.loss_ce: 0.0834, decode.acc_seg: 95.4599, aux_0.loss_ce: 0.0882, aux_0.acc_seg: 95.2857, aux_1.loss_ce: 0.1009, aux_1.acc_seg: 94.6969, aux_2.loss_ce: 0.1278, aux_2.loss_dice: 0.2668, aux_2.acc_seg: 95.8202, aux_3.loss_ce: 0.2146, aux_3.acc_seg: 94.2418, loss: 0.8818
2023-03-28 12:49:54,452 - mmseg - INFO - Iter [4400/10000]	lr: 5.936e-03, eta: 2:12:36, time: 1.452, data_time: 0.284, memory: 17071, decode.loss_ce: 0.0820, decode.acc_seg: 95.5720, aux_0.loss_ce: 0.0877, aux_0.acc_seg: 95.3840, aux_1.loss_ce: 0.0997, aux_1.acc_seg: 94.7825, aux_2.loss_ce: 0.1290, aux_2.loss_dice: 0.2681, aux_2.acc_seg: 95.7834, aux_3.loss_ce: 0.2159, aux_3.acc_seg: 94.3429, loss: 0.8824
2023-03-28 12:51:04,045 - mmseg - INFO - Iter [4450/10000]	lr: 5.888e-03, eta: 2:11:23, time: 1.392, data_time: 0.230, memory: 17071, decode.loss_ce: 0.0839, decode.acc_seg: 95.5275, aux_0.loss_ce: 0.0886, aux_0.acc_seg: 95.3444, aux_1.loss_ce: 0.1011, aux_1.acc_seg: 94.7464, aux_2.loss_ce: 0.1271, aux_2.loss_dice: 0.2670, aux_2.acc_seg: 95.8766, aux_3.loss_ce: 0.2203, aux_3.acc_seg: 94.3134, loss: 0.8882
2023-03-28 12:52:13,223 - mmseg - INFO - Iter [4500/10000]	lr: 5.840e-03, eta: 2:10:10, time: 1.384, data_time: 0.226, memory: 17071, decode.loss_ce: 0.0830, decode.acc_seg: 95.5125, aux_0.loss_ce: 0.0885, aux_0.acc_seg: 95.3111, aux_1.loss_ce: 0.1004, aux_1.acc_seg: 94.7217, aux_2.loss_ce: 0.1288, aux_2.loss_dice: 0.2666, aux_2.acc_seg: 95.8064, aux_3.loss_ce: 0.2134, aux_3.acc_seg: 94.2611, loss: 0.8807
2023-03-28 12:53:25,569 - mmseg - INFO - Iter [4550/10000]	lr: 5.792e-03, eta: 2:09:01, time: 1.447, data_time: 0.291, memory: 17071, decode.loss_ce: 0.0846, decode.acc_seg: 95.4393, aux_0.loss_ce: 0.0889, aux_0.acc_seg: 95.2657, aux_1.loss_ce: 0.1016, aux_1.acc_seg: 94.6580, aux_2.loss_ce: 0.1281, aux_2.loss_dice: 0.2678, aux_2.acc_seg: 95.8430, aux_3.loss_ce: 0.2204, aux_3.acc_seg: 94.1979, loss: 0.8914
2023-03-28 12:54:34,581 - mmseg - INFO - Iter [4600/10000]	lr: 5.745e-03, eta: 2:07:47, time: 1.380, data_time: 0.226, memory: 17071, decode.loss_ce: 0.0851, decode.acc_seg: 95.4682, aux_0.loss_ce: 0.0892, aux_0.acc_seg: 95.2971, aux_1.loss_ce: 0.1025, aux_1.acc_seg: 94.6976, aux_2.loss_ce: 0.1277, aux_2.loss_dice: 0.2673, aux_2.acc_seg: 95.8555, aux_3.loss_ce: 0.2188, aux_3.acc_seg: 94.2416, loss: 0.8906
2023-03-28 12:55:43,872 - mmseg - INFO - Iter [4650/10000]	lr: 5.697e-03, eta: 2:06:34, time: 1.386, data_time: 0.224, memory: 17071, decode.loss_ce: 0.0847, decode.acc_seg: 95.4510, aux_0.loss_ce: 0.0897, aux_0.acc_seg: 95.2541, aux_1.loss_ce: 0.1019, aux_1.acc_seg: 94.6448, aux_2.loss_ce: 0.1273, aux_2.loss_dice: 0.2668, aux_2.acc_seg: 95.8503, aux_3.loss_ce: 0.2165, aux_3.acc_seg: 94.1796, loss: 0.8869
2023-03-28 12:56:56,462 - mmseg - INFO - Iter [4700/10000]	lr: 5.649e-03, eta: 2:05:25, time: 1.452, data_time: 0.291, memory: 17071, decode.loss_ce: 0.0821, decode.acc_seg: 95.5596, aux_0.loss_ce: 0.0872, aux_0.acc_seg: 95.3830, aux_1.loss_ce: 0.0998, aux_1.acc_seg: 94.7667, aux_2.loss_ce: 0.1282, aux_2.loss_dice: 0.2670, aux_2.acc_seg: 95.8064, aux_3.loss_ce: 0.2106, aux_3.acc_seg: 94.2977, loss: 0.8749
2023-03-28 12:58:05,987 - mmseg - INFO - Iter [4750/10000]	lr: 5.601e-03, eta: 2:04:12, time: 1.390, data_time: 0.231, memory: 17071, decode.loss_ce: 0.0814, decode.acc_seg: 95.6297, aux_0.loss_ce: 0.0858, aux_0.acc_seg: 95.4536, aux_1.loss_ce: 0.0982, aux_1.acc_seg: 94.8629, aux_2.loss_ce: 0.1269, aux_2.loss_dice: 0.2669, aux_2.acc_seg: 95.8823, aux_3.loss_ce: 0.2113, aux_3.acc_seg: 94.4069, loss: 0.8706
2023-03-28 12:59:15,251 - mmseg - INFO - Iter [4800/10000]	lr: 5.553e-03, eta: 2:03:00, time: 1.385, data_time: 0.225, memory: 17071, decode.loss_ce: 0.0808, decode.acc_seg: 95.5541, aux_0.loss_ce: 0.0849, aux_0.acc_seg: 95.3810, aux_1.loss_ce: 0.0973, aux_1.acc_seg: 94.7781, aux_2.loss_ce: 0.1250, aux_2.loss_dice: 0.2644, aux_2.acc_seg: 95.9460, aux_3.loss_ce: 0.2095, aux_3.acc_seg: 94.3059, loss: 0.8618
2023-03-28 13:00:27,605 - mmseg - INFO - Iter [4850/10000]	lr: 5.505e-03, eta: 2:01:50, time: 1.447, data_time: 0.289, memory: 17071, decode.loss_ce: 0.0823, decode.acc_seg: 95.5151, aux_0.loss_ce: 0.0869, aux_0.acc_seg: 95.3430, aux_1.loss_ce: 0.0989, aux_1.acc_seg: 94.7420, aux_2.loss_ce: 0.1268, aux_2.loss_dice: 0.2668, aux_2.acc_seg: 95.8843, aux_3.loss_ce: 0.2120, aux_3.acc_seg: 94.3118, loss: 0.8737
2023-03-28 13:01:37,047 - mmseg - INFO - Iter [4900/10000]	lr: 5.457e-03, eta: 2:00:37, time: 1.389, data_time: 0.232, memory: 17071, decode.loss_ce: 0.0827, decode.acc_seg: 95.5106, aux_0.loss_ce: 0.0880, aux_0.acc_seg: 95.3356, aux_1.loss_ce: 0.1002, aux_1.acc_seg: 94.7250, aux_2.loss_ce: 0.1288, aux_2.loss_dice: 0.2670, aux_2.acc_seg: 95.8062, aux_3.loss_ce: 0.2095, aux_3.acc_seg: 94.3107, loss: 0.8761
2023-03-28 13:02:46,162 - mmseg - INFO - Iter [4950/10000]	lr: 5.408e-03, eta: 1:59:25, time: 1.382, data_time: 0.226, memory: 17071, decode.loss_ce: 0.0810, decode.acc_seg: 95.6432, aux_0.loss_ce: 0.0854, aux_0.acc_seg: 95.4636, aux_1.loss_ce: 0.0969, aux_1.acc_seg: 94.8648, aux_2.loss_ce: 0.1283, aux_2.loss_dice: 0.2664, aux_2.acc_seg: 95.8104, aux_3.loss_ce: 0.2074, aux_3.acc_seg: 94.4183, loss: 0.8655
2023-03-28 13:03:58,874 - mmseg - INFO - Saving checkpoint at 5000 iterations
2023-03-28 13:03:59,152 - mmseg - INFO - Exp name: stdc1-entext_2x12_720x960_10k_camvid.py
2023-03-28 13:03:59,153 - mmseg - INFO - Iter [5000/10000]	lr: 5.360e-03, eta: 1:58:16, time: 1.462, data_time: 0.291, memory: 17071, decode.loss_ce: 0.0810, decode.acc_seg: 95.6120, aux_0.loss_ce: 0.0855, aux_0.acc_seg: 95.4392, aux_1.loss_ce: 0.0983, aux_1.acc_seg: 94.8232, aux_2.loss_ce: 0.1268, aux_2.loss_dice: 0.2663, aux_2.acc_seg: 95.8758, aux_3.loss_ce: 0.2075, aux_3.acc_seg: 94.4057, loss: 0.8654
2023-03-28 13:04:01,873 - mmseg - INFO - per class results:
2023-03-28 13:04:01,874 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  Bicyclist  | 82.42 |  91.4 |
|   Building  | 92.93 | 94.93 |
|     Car     | 91.52 | 95.94 |
| Column_Pole |  9.17 | 10.15 |
|    Fence    | 79.25 | 92.11 |
|  Pedestrian | 59.01 | 81.35 |
|     Road    | 96.84 | 97.58 |
|   Sidewalk  |  90.1 | 97.46 |
|  SignSymbol |  0.0  |  0.0  |
|     Sky     | 93.35 | 95.47 |
|     Tree    | 91.46 | 98.36 |
+-------------+-------+-------+
2023-03-28 13:04:01,874 - mmseg - INFO - Summary:
2023-03-28 13:04:01,874 - mmseg - INFO - 
+-------+-------+------+
|  aAcc |  mIoU | mAcc |
+-------+-------+------+
| 95.74 | 71.46 | 77.7 |
+-------+-------+------+
2023-03-28 13:04:01,875 - mmseg - INFO - Exp name: stdc1-entext_2x12_720x960_10k_camvid.py
2023-03-28 13:04:01,875 - mmseg - INFO - Iter(val) [51]	aAcc: 0.9574, mIoU: 0.7146, mAcc: 0.7770, IoU.Bicyclist: 0.8242, IoU.Building: 0.9293, IoU.Car: 0.9152, IoU.Column_Pole: 0.0917, IoU.Fence: 0.7925, IoU.Pedestrian: 0.5901, IoU.Road: 0.9684, IoU.Sidewalk: 0.9010, IoU.SignSymbol: 0.0000, IoU.Sky: 0.9335, IoU.Tree: 0.9146, Acc.Bicyclist: 0.9140, Acc.Building: 0.9493, Acc.Car: 0.9594, Acc.Column_Pole: 0.1015, Acc.Fence: 0.9211, Acc.Pedestrian: 0.8135, Acc.Road: 0.9758, Acc.Sidewalk: 0.9746, Acc.SignSymbol: 0.0000, Acc.Sky: 0.9547, Acc.Tree: 0.9836
2023-03-28 13:05:11,328 - mmseg - INFO - Iter [5050/10000]	lr: 5.312e-03, eta: 1:57:06, time: 1.441, data_time: 0.277, memory: 17071, decode.loss_ce: 0.0785, decode.acc_seg: 95.6269, aux_0.loss_ce: 0.0837, aux_0.acc_seg: 95.4416, aux_1.loss_ce: 0.0951, aux_1.acc_seg: 94.8483, aux_2.loss_ce: 0.1264, aux_2.loss_dice: 0.2653, aux_2.acc_seg: 95.8692, aux_3.loss_ce: 0.1961, aux_3.acc_seg: 94.4128, loss: 0.8451
2023-03-28 13:06:20,862 - mmseg - INFO - Iter [5100/10000]	lr: 5.264e-03, eta: 1:55:54, time: 1.391, data_time: 0.234, memory: 17071, decode.loss_ce: 0.0786, decode.acc_seg: 95.6312, aux_0.loss_ce: 0.0831, aux_0.acc_seg: 95.4374, aux_1.loss_ce: 0.0944, aux_1.acc_seg: 94.8541, aux_2.loss_ce: 0.1252, aux_2.loss_dice: 0.2634, aux_2.acc_seg: 95.9174, aux_3.loss_ce: 0.1956, aux_3.acc_seg: 94.4264, loss: 0.8404
2023-03-28 13:07:33,550 - mmseg - INFO - Iter [5150/10000]	lr: 5.215e-03, eta: 1:54:44, time: 1.454, data_time: 0.295, memory: 17071, decode.loss_ce: 0.0814, decode.acc_seg: 95.6537, aux_0.loss_ce: 0.0866, aux_0.acc_seg: 95.4864, aux_1.loss_ce: 0.0995, aux_1.acc_seg: 94.8797, aux_2.loss_ce: 0.1279, aux_2.loss_dice: 0.2665, aux_2.acc_seg: 95.8048, aux_3.loss_ce: 0.2121, aux_3.acc_seg: 94.4578, loss: 0.8739
2023-03-28 13:08:42,783 - mmseg - INFO - Iter [5200/10000]	lr: 5.167e-03, eta: 1:53:32, time: 1.385, data_time: 0.228, memory: 17071, decode.loss_ce: 0.0790, decode.acc_seg: 95.6728, aux_0.loss_ce: 0.0839, aux_0.acc_seg: 95.4964, aux_1.loss_ce: 0.0957, aux_1.acc_seg: 94.8684, aux_2.loss_ce: 0.1266, aux_2.loss_dice: 0.2654, aux_2.acc_seg: 95.8736, aux_3.loss_ce: 0.2069, aux_3.acc_seg: 94.4420, loss: 0.8575
2023-03-28 13:09:52,305 - mmseg - INFO - Iter [5250/10000]	lr: 5.119e-03, eta: 1:52:19, time: 1.390, data_time: 0.226, memory: 17071, decode.loss_ce: 0.0776, decode.acc_seg: 95.7398, aux_0.loss_ce: 0.0815, aux_0.acc_seg: 95.5504, aux_1.loss_ce: 0.0941, aux_1.acc_seg: 94.9586, aux_2.loss_ce: 0.1268, aux_2.loss_dice: 0.2650, aux_2.acc_seg: 95.8513, aux_3.loss_ce: 0.1974, aux_3.acc_seg: 94.5058, loss: 0.8425
2023-03-28 13:11:04,759 - mmseg - INFO - Iter [5300/10000]	lr: 5.070e-03, eta: 1:51:10, time: 1.449, data_time: 0.287, memory: 17071, decode.loss_ce: 0.0794, decode.acc_seg: 95.6785, aux_0.loss_ce: 0.0841, aux_0.acc_seg: 95.4989, aux_1.loss_ce: 0.0958, aux_1.acc_seg: 94.9251, aux_2.loss_ce: 0.1275, aux_2.loss_dice: 0.2654, aux_2.acc_seg: 95.8303, aux_3.loss_ce: 0.2072, aux_3.acc_seg: 94.4786, loss: 0.8594
2023-03-28 13:12:14,147 - mmseg - INFO - Iter [5350/10000]	lr: 5.022e-03, eta: 1:49:57, time: 1.388, data_time: 0.224, memory: 17071, decode.loss_ce: 0.0805, decode.acc_seg: 95.5849, aux_0.loss_ce: 0.0850, aux_0.acc_seg: 95.4045, aux_1.loss_ce: 0.0975, aux_1.acc_seg: 94.7922, aux_2.loss_ce: 0.1270, aux_2.loss_dice: 0.2655, aux_2.acc_seg: 95.8467, aux_3.loss_ce: 0.2019, aux_3.acc_seg: 94.3803, loss: 0.8573
2023-03-28 13:13:23,270 - mmseg - INFO - Iter [5400/10000]	lr: 4.973e-03, eta: 1:48:45, time: 1.382, data_time: 0.224, memory: 17071, decode.loss_ce: 0.0793, decode.acc_seg: 95.6861, aux_0.loss_ce: 0.0838, aux_0.acc_seg: 95.5060, aux_1.loss_ce: 0.0962, aux_1.acc_seg: 94.8829, aux_2.loss_ce: 0.1276, aux_2.loss_dice: 0.2656, aux_2.acc_seg: 95.8047, aux_3.loss_ce: 0.1997, aux_3.acc_seg: 94.4479, loss: 0.8522
2023-03-28 13:14:35,856 - mmseg - INFO - Iter [5450/10000]	lr: 4.924e-03, eta: 1:47:35, time: 1.452, data_time: 0.287, memory: 17071, decode.loss_ce: 0.0783, decode.acc_seg: 95.6905, aux_0.loss_ce: 0.0830, aux_0.acc_seg: 95.5020, aux_1.loss_ce: 0.0947, aux_1.acc_seg: 94.8980, aux_2.loss_ce: 0.1266, aux_2.loss_dice: 0.2649, aux_2.acc_seg: 95.8553, aux_3.loss_ce: 0.2019, aux_3.acc_seg: 94.4790, loss: 0.8493
2023-03-28 13:15:44,965 - mmseg - INFO - Iter [5500/10000]	lr: 4.876e-03, eta: 1:46:23, time: 1.382, data_time: 0.224, memory: 17071, decode.loss_ce: 0.0795, decode.acc_seg: 95.6439, aux_0.loss_ce: 0.0852, aux_0.acc_seg: 95.4444, aux_1.loss_ce: 0.0968, aux_1.acc_seg: 94.8484, aux_2.loss_ce: 0.1273, aux_2.loss_dice: 0.2656, aux_2.acc_seg: 95.8325, aux_3.loss_ce: 0.2028, aux_3.acc_seg: 94.4362, loss: 0.8572
2023-03-28 13:16:54,432 - mmseg - INFO - Iter [5550/10000]	lr: 4.827e-03, eta: 1:45:11, time: 1.389, data_time: 0.226, memory: 17071, decode.loss_ce: 0.0783, decode.acc_seg: 95.6897, aux_0.loss_ce: 0.0832, aux_0.acc_seg: 95.5243, aux_1.loss_ce: 0.0948, aux_1.acc_seg: 94.9205, aux_2.loss_ce: 0.1271, aux_2.loss_dice: 0.2650, aux_2.acc_seg: 95.8233, aux_3.loss_ce: 0.1981, aux_3.acc_seg: 94.4893, loss: 0.8465
2023-03-28 13:18:06,984 - mmseg - INFO - Iter [5600/10000]	lr: 4.778e-03, eta: 1:44:01, time: 1.451, data_time: 0.297, memory: 17071, decode.loss_ce: 0.0764, decode.acc_seg: 95.7643, aux_0.loss_ce: 0.0806, aux_0.acc_seg: 95.6013, aux_1.loss_ce: 0.0928, aux_1.acc_seg: 94.9981, aux_2.loss_ce: 0.1258, aux_2.loss_dice: 0.2633, aux_2.acc_seg: 95.8741, aux_3.loss_ce: 0.1946, aux_3.acc_seg: 94.5794, loss: 0.8335
2023-03-28 13:19:16,105 - mmseg - INFO - Iter [5650/10000]	lr: 4.729e-03, eta: 1:42:49, time: 1.382, data_time: 0.223, memory: 17071, decode.loss_ce: 0.0809, decode.acc_seg: 95.5887, aux_0.loss_ce: 0.0855, aux_0.acc_seg: 95.4127, aux_1.loss_ce: 0.0973, aux_1.acc_seg: 94.8083, aux_2.loss_ce: 0.1275, aux_2.loss_dice: 0.2668, aux_2.acc_seg: 95.8580, aux_3.loss_ce: 0.1995, aux_3.acc_seg: 94.3767, loss: 0.8576
2023-03-28 13:20:25,262 - mmseg - INFO - Iter [5700/10000]	lr: 4.680e-03, eta: 1:41:37, time: 1.383, data_time: 0.224, memory: 17071, decode.loss_ce: 0.0777, decode.acc_seg: 95.7303, aux_0.loss_ce: 0.0823, aux_0.acc_seg: 95.5509, aux_1.loss_ce: 0.0945, aux_1.acc_seg: 94.9411, aux_2.loss_ce: 0.1273, aux_2.loss_dice: 0.2654, aux_2.acc_seg: 95.8346, aux_3.loss_ce: 0.1961, aux_3.acc_seg: 94.4988, loss: 0.8433
2023-03-28 13:21:37,374 - mmseg - INFO - Iter [5750/10000]	lr: 4.631e-03, eta: 1:40:27, time: 1.442, data_time: 0.289, memory: 17071, decode.loss_ce: 0.0765, decode.acc_seg: 95.8393, aux_0.loss_ce: 0.0810, aux_0.acc_seg: 95.6576, aux_1.loss_ce: 0.0930, aux_1.acc_seg: 95.0702, aux_2.loss_ce: 0.1263, aux_2.loss_dice: 0.2650, aux_2.acc_seg: 95.8784, aux_3.loss_ce: 0.1962, aux_3.acc_seg: 94.6729, loss: 0.8380
2023-03-28 13:22:46,318 - mmseg - INFO - Iter [5800/10000]	lr: 4.582e-03, eta: 1:39:14, time: 1.379, data_time: 0.226, memory: 17071, decode.loss_ce: 0.0767, decode.acc_seg: 95.7528, aux_0.loss_ce: 0.0807, aux_0.acc_seg: 95.5943, aux_1.loss_ce: 0.0930, aux_1.acc_seg: 94.9813, aux_2.loss_ce: 0.1265, aux_2.loss_dice: 0.2645, aux_2.acc_seg: 95.8488, aux_3.loss_ce: 0.1910, aux_3.acc_seg: 94.5767, loss: 0.8324
2023-03-28 13:23:55,528 - mmseg - INFO - Iter [5850/10000]	lr: 4.533e-03, eta: 1:38:02, time: 1.384, data_time: 0.227, memory: 17071, decode.loss_ce: 0.0769, decode.acc_seg: 95.7584, aux_0.loss_ce: 0.0816, aux_0.acc_seg: 95.5832, aux_1.loss_ce: 0.0929, aux_1.acc_seg: 94.9748, aux_2.loss_ce: 0.1261, aux_2.loss_dice: 0.2638, aux_2.acc_seg: 95.8644, aux_3.loss_ce: 0.1956, aux_3.acc_seg: 94.5474, loss: 0.8369
2023-03-28 13:25:07,857 - mmseg - INFO - Iter [5900/10000]	lr: 4.484e-03, eta: 1:36:52, time: 1.447, data_time: 0.293, memory: 17071, decode.loss_ce: 0.0760, decode.acc_seg: 95.7641, aux_0.loss_ce: 0.0810, aux_0.acc_seg: 95.5919, aux_1.loss_ce: 0.0925, aux_1.acc_seg: 94.9955, aux_2.loss_ce: 0.1264, aux_2.loss_dice: 0.2649, aux_2.acc_seg: 95.8327, aux_3.loss_ce: 0.1936, aux_3.acc_seg: 94.5649, loss: 0.8344
2023-03-28 13:26:17,058 - mmseg - INFO - Iter [5950/10000]	lr: 4.435e-03, eta: 1:35:40, time: 1.384, data_time: 0.229, memory: 17071, decode.loss_ce: 0.0774, decode.acc_seg: 95.7648, aux_0.loss_ce: 0.0810, aux_0.acc_seg: 95.5987, aux_1.loss_ce: 0.0939, aux_1.acc_seg: 94.9852, aux_2.loss_ce: 0.1253, aux_2.loss_dice: 0.2641, aux_2.acc_seg: 95.9178, aux_3.loss_ce: 0.1983, aux_3.acc_seg: 94.5716, loss: 0.8398
2023-03-28 13:27:26,201 - mmseg - INFO - Saving checkpoint at 6000 iterations
2023-03-28 13:27:26,515 - mmseg - INFO - Exp name: stdc1-entext_2x12_720x960_10k_camvid.py
2023-03-28 13:27:26,515 - mmseg - INFO - Iter [6000/10000]	lr: 4.385e-03, eta: 1:34:29, time: 1.391, data_time: 0.228, memory: 17071, decode.loss_ce: 0.0769, decode.acc_seg: 95.7182, aux_0.loss_ce: 0.0810, aux_0.acc_seg: 95.5505, aux_1.loss_ce: 0.0929, aux_1.acc_seg: 94.9468, aux_2.loss_ce: 0.1269, aux_2.loss_dice: 0.2638, aux_2.acc_seg: 95.8306, aux_3.loss_ce: 0.1918, aux_3.acc_seg: 94.5323, loss: 0.8333
2023-03-28 13:27:29,320 - mmseg - INFO - per class results:
2023-03-28 13:27:29,321 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  Bicyclist  | 82.08 | 93.28 |
|   Building  | 92.62 | 94.44 |
|     Car     | 90.87 | 94.47 |
| Column_Pole | 13.04 | 14.94 |
|    Fence    | 78.94 | 89.88 |
|  Pedestrian | 61.31 | 80.18 |
|     Road    |  97.1 | 97.88 |
|   Sidewalk  |  90.8 | 97.56 |
|  SignSymbol |  0.0  |  0.0  |
|     Sky     | 94.06 | 97.07 |
|     Tree    | 91.21 | 98.14 |
+-------------+-------+-------+
2023-03-28 13:27:29,321 - mmseg - INFO - Summary:
2023-03-28 13:27:29,321 - mmseg - INFO - 
+------+------+-------+
| aAcc | mIoU |  mAcc |
+------+------+-------+
| 95.8 | 72.0 | 77.98 |
+------+------+-------+
2023-03-28 13:27:29,321 - mmseg - INFO - Exp name: stdc1-entext_2x12_720x960_10k_camvid.py
2023-03-28 13:27:29,321 - mmseg - INFO - Iter(val) [51]	aAcc: 0.9580, mIoU: 0.7200, mAcc: 0.7798, IoU.Bicyclist: 0.8208, IoU.Building: 0.9262, IoU.Car: 0.9087, IoU.Column_Pole: 0.1304, IoU.Fence: 0.7894, IoU.Pedestrian: 0.6131, IoU.Road: 0.9710, IoU.Sidewalk: 0.9080, IoU.SignSymbol: 0.0000, IoU.Sky: 0.9406, IoU.Tree: 0.9121, Acc.Bicyclist: 0.9328, Acc.Building: 0.9444, Acc.Car: 0.9447, Acc.Column_Pole: 0.1494, Acc.Fence: 0.8988, Acc.Pedestrian: 0.8018, Acc.Road: 0.9788, Acc.Sidewalk: 0.9756, Acc.SignSymbol: 0.0000, Acc.Sky: 0.9707, Acc.Tree: 0.9814
2023-03-28 13:28:41,806 - mmseg - INFO - Iter [6050/10000]	lr: 4.336e-03, eta: 1:33:21, time: 1.504, data_time: 0.344, memory: 17071, decode.loss_ce: 0.0780, decode.acc_seg: 95.7176, aux_0.loss_ce: 0.0828, aux_0.acc_seg: 95.5428, aux_1.loss_ce: 0.0949, aux_1.acc_seg: 94.9093, aux_2.loss_ce: 0.1266, aux_2.loss_dice: 0.2639, aux_2.acc_seg: 95.8344, aux_3.loss_ce: 0.1908, aux_3.acc_seg: 94.5020, loss: 0.8370
2023-03-28 13:29:51,433 - mmseg - INFO - Iter [6100/10000]	lr: 4.287e-03, eta: 1:32:09, time: 1.393, data_time: 0.231, memory: 17071, decode.loss_ce: 0.0761, decode.acc_seg: 95.8815, aux_0.loss_ce: 0.0804, aux_0.acc_seg: 95.7337, aux_1.loss_ce: 0.0932, aux_1.acc_seg: 95.1193, aux_2.loss_ce: 0.1254, aux_2.loss_dice: 0.2641, aux_2.acc_seg: 95.8870, aux_3.loss_ce: 0.1991, aux_3.acc_seg: 94.7059, loss: 0.8383
2023-03-28 13:31:00,600 - mmseg - INFO - Iter [6150/10000]	lr: 4.237e-03, eta: 1:30:57, time: 1.383, data_time: 0.221, memory: 17071, decode.loss_ce: 0.0772, decode.acc_seg: 95.7935, aux_0.loss_ce: 0.0805, aux_0.acc_seg: 95.6502, aux_1.loss_ce: 0.0921, aux_1.acc_seg: 95.0643, aux_2.loss_ce: 0.1261, aux_2.loss_dice: 0.2650, aux_2.acc_seg: 95.8876, aux_3.loss_ce: 0.1908, aux_3.acc_seg: 94.6020, loss: 0.8317
2023-03-28 13:32:13,201 - mmseg - INFO - Iter [6200/10000]	lr: 4.188e-03, eta: 1:29:47, time: 1.452, data_time: 0.292, memory: 17071, decode.loss_ce: 0.0764, decode.acc_seg: 95.7979, aux_0.loss_ce: 0.0819, aux_0.acc_seg: 95.6248, aux_1.loss_ce: 0.0926, aux_1.acc_seg: 95.0270, aux_2.loss_ce: 0.1265, aux_2.loss_dice: 0.2643, aux_2.acc_seg: 95.8417, aux_3.loss_ce: 0.1953, aux_3.acc_seg: 94.6074, loss: 0.8370
2023-03-28 13:33:22,885 - mmseg - INFO - Iter [6250/10000]	lr: 4.138e-03, eta: 1:28:35, time: 1.394, data_time: 0.231, memory: 17071, decode.loss_ce: 0.0766, decode.acc_seg: 95.7399, aux_0.loss_ce: 0.0808, aux_0.acc_seg: 95.5680, aux_1.loss_ce: 0.0933, aux_1.acc_seg: 94.9422, aux_2.loss_ce: 0.1255, aux_2.loss_dice: 0.2628, aux_2.acc_seg: 95.8770, aux_3.loss_ce: 0.1901, aux_3.acc_seg: 94.5515, loss: 0.8291
2023-03-28 13:34:32,057 - mmseg - INFO - Iter [6300/10000]	lr: 4.088e-03, eta: 1:27:24, time: 1.383, data_time: 0.225, memory: 17071, decode.loss_ce: 0.0754, decode.acc_seg: 95.8680, aux_0.loss_ce: 0.0797, aux_0.acc_seg: 95.7121, aux_1.loss_ce: 0.0922, aux_1.acc_seg: 95.0961, aux_2.loss_ce: 0.1261, aux_2.loss_dice: 0.2642, aux_2.acc_seg: 95.8666, aux_3.loss_ce: 0.1949, aux_3.acc_seg: 94.6750, loss: 0.8325
2023-03-28 13:35:44,473 - mmseg - INFO - Iter [6350/10000]	lr: 4.039e-03, eta: 1:26:14, time: 1.449, data_time: 0.287, memory: 17071, decode.loss_ce: 0.0772, decode.acc_seg: 95.7381, aux_0.loss_ce: 0.0816, aux_0.acc_seg: 95.5835, aux_1.loss_ce: 0.0939, aux_1.acc_seg: 94.9469, aux_2.loss_ce: 0.1270, aux_2.loss_dice: 0.2645, aux_2.acc_seg: 95.7971, aux_3.loss_ce: 0.1956, aux_3.acc_seg: 94.5379, loss: 0.8399
2023-03-28 13:36:53,823 - mmseg - INFO - Iter [6400/10000]	lr: 3.989e-03, eta: 1:25:02, time: 1.387, data_time: 0.232, memory: 17071, decode.loss_ce: 0.0776, decode.acc_seg: 95.7525, aux_0.loss_ce: 0.0811, aux_0.acc_seg: 95.6058, aux_1.loss_ce: 0.0946, aux_1.acc_seg: 94.9910, aux_2.loss_ce: 0.1273, aux_2.loss_dice: 0.2649, aux_2.acc_seg: 95.8262, aux_3.loss_ce: 0.1962, aux_3.acc_seg: 94.5489, loss: 0.8417
2023-03-28 13:38:03,048 - mmseg - INFO - Iter [6450/10000]	lr: 3.939e-03, eta: 1:23:50, time: 1.384, data_time: 0.229, memory: 17071, decode.loss_ce: 0.0783, decode.acc_seg: 95.6900, aux_0.loss_ce: 0.0828, aux_0.acc_seg: 95.5454, aux_1.loss_ce: 0.0947, aux_1.acc_seg: 94.9347, aux_2.loss_ce: 0.1259, aux_2.loss_dice: 0.2649, aux_2.acc_seg: 95.9085, aux_3.loss_ce: 0.1946, aux_3.acc_seg: 94.4847, loss: 0.8411
2023-03-28 13:39:15,104 - mmseg - INFO - Iter [6500/10000]	lr: 3.889e-03, eta: 1:22:40, time: 1.441, data_time: 0.281, memory: 17071, decode.loss_ce: 0.0768, decode.acc_seg: 95.7959, aux_0.loss_ce: 0.0811, aux_0.acc_seg: 95.6332, aux_1.loss_ce: 0.0933, aux_1.acc_seg: 94.9971, aux_2.loss_ce: 0.1277, aux_2.loss_dice: 0.2648, aux_2.acc_seg: 95.7974, aux_3.loss_ce: 0.1922, aux_3.acc_seg: 94.5724, loss: 0.8359
2023-03-28 13:40:24,440 - mmseg - INFO - Iter [6550/10000]	lr: 3.839e-03, eta: 1:21:28, time: 1.387, data_time: 0.228, memory: 17071, decode.loss_ce: 0.0747, decode.acc_seg: 95.8295, aux_0.loss_ce: 0.0791, aux_0.acc_seg: 95.6741, aux_1.loss_ce: 0.0907, aux_1.acc_seg: 95.0554, aux_2.loss_ce: 0.1267, aux_2.loss_dice: 0.2639, aux_2.acc_seg: 95.8396, aux_3.loss_ce: 0.1897, aux_3.acc_seg: 94.6328, loss: 0.8247
2023-03-28 13:41:34,064 - mmseg - INFO - Iter [6600/10000]	lr: 3.789e-03, eta: 1:20:17, time: 1.393, data_time: 0.237, memory: 17071, decode.loss_ce: 0.0773, decode.acc_seg: 95.7255, aux_0.loss_ce: 0.0816, aux_0.acc_seg: 95.5817, aux_1.loss_ce: 0.0938, aux_1.acc_seg: 94.9529, aux_2.loss_ce: 0.1264, aux_2.loss_dice: 0.2649, aux_2.acc_seg: 95.8812, aux_3.loss_ce: 0.1945, aux_3.acc_seg: 94.4937, loss: 0.8385
2023-03-28 13:42:46,478 - mmseg - INFO - Iter [6650/10000]	lr: 3.739e-03, eta: 1:19:07, time: 1.448, data_time: 0.289, memory: 17071, decode.loss_ce: 0.0780, decode.acc_seg: 95.7161, aux_0.loss_ce: 0.0824, aux_0.acc_seg: 95.5609, aux_1.loss_ce: 0.0948, aux_1.acc_seg: 94.9517, aux_2.loss_ce: 0.1275, aux_2.loss_dice: 0.2653, aux_2.acc_seg: 95.7997, aux_3.loss_ce: 0.1998, aux_3.acc_seg: 94.5266, loss: 0.8478
2023-03-28 13:43:55,763 - mmseg - INFO - Iter [6700/10000]	lr: 3.689e-03, eta: 1:17:55, time: 1.386, data_time: 0.229, memory: 17071, decode.loss_ce: 0.0750, decode.acc_seg: 95.8978, aux_0.loss_ce: 0.0801, aux_0.acc_seg: 95.7319, aux_1.loss_ce: 0.0923, aux_1.acc_seg: 95.1264, aux_2.loss_ce: 0.1270, aux_2.loss_dice: 0.2648, aux_2.acc_seg: 95.8254, aux_3.loss_ce: 0.1907, aux_3.acc_seg: 94.7093, loss: 0.8300
2023-03-28 13:45:05,302 - mmseg - INFO - Iter [6750/10000]	lr: 3.638e-03, eta: 1:16:44, time: 1.391, data_time: 0.226, memory: 17071, decode.loss_ce: 0.0749, decode.acc_seg: 95.9014, aux_0.loss_ce: 0.0794, aux_0.acc_seg: 95.7499, aux_1.loss_ce: 0.0908, aux_1.acc_seg: 95.1347, aux_2.loss_ce: 0.1260, aux_2.loss_dice: 0.2641, aux_2.acc_seg: 95.8465, aux_3.loss_ce: 0.1905, aux_3.acc_seg: 94.7211, loss: 0.8258
2023-03-28 13:46:17,783 - mmseg - INFO - Iter [6800/10000]	lr: 3.588e-03, eta: 1:15:34, time: 1.450, data_time: 0.293, memory: 17071, decode.loss_ce: 0.0747, decode.acc_seg: 95.8769, aux_0.loss_ce: 0.0787, aux_0.acc_seg: 95.7089, aux_1.loss_ce: 0.0909, aux_1.acc_seg: 95.0944, aux_2.loss_ce: 0.1269, aux_2.loss_dice: 0.2641, aux_2.acc_seg: 95.8213, aux_3.loss_ce: 0.1881, aux_3.acc_seg: 94.6851, loss: 0.8234
2023-03-28 13:47:27,364 - mmseg - INFO - Iter [6850/10000]	lr: 3.537e-03, eta: 1:14:22, time: 1.392, data_time: 0.231, memory: 17071, decode.loss_ce: 0.0749, decode.acc_seg: 95.8473, aux_0.loss_ce: 0.0798, aux_0.acc_seg: 95.6836, aux_1.loss_ce: 0.0908, aux_1.acc_seg: 95.0607, aux_2.loss_ce: 0.1267, aux_2.loss_dice: 0.2641, aux_2.acc_seg: 95.8273, aux_3.loss_ce: 0.1878, aux_3.acc_seg: 94.6112, loss: 0.8241
2023-03-28 13:48:36,634 - mmseg - INFO - Iter [6900/10000]	lr: 3.487e-03, eta: 1:13:11, time: 1.385, data_time: 0.226, memory: 17071, decode.loss_ce: 0.0740, decode.acc_seg: 95.8661, aux_0.loss_ce: 0.0783, aux_0.acc_seg: 95.7194, aux_1.loss_ce: 0.0902, aux_1.acc_seg: 95.1000, aux_2.loss_ce: 0.1255, aux_2.loss_dice: 0.2626, aux_2.acc_seg: 95.8525, aux_3.loss_ce: 0.1881, aux_3.acc_seg: 94.6762, loss: 0.8187
2023-03-28 13:49:49,367 - mmseg - INFO - Iter [6950/10000]	lr: 3.436e-03, eta: 1:12:01, time: 1.455, data_time: 0.292, memory: 17071, decode.loss_ce: 0.0737, decode.acc_seg: 95.8849, aux_0.loss_ce: 0.0780, aux_0.acc_seg: 95.7246, aux_1.loss_ce: 0.0898, aux_1.acc_seg: 95.1099, aux_2.loss_ce: 0.1256, aux_2.loss_dice: 0.2630, aux_2.acc_seg: 95.8890, aux_3.loss_ce: 0.1850, aux_3.acc_seg: 94.6861, loss: 0.8151
2023-03-28 13:50:58,361 - mmseg - INFO - Saving checkpoint at 7000 iterations
2023-03-28 13:50:58,670 - mmseg - INFO - Exp name: stdc1-entext_2x12_720x960_10k_camvid.py
2023-03-28 13:50:58,670 - mmseg - INFO - Iter [7000/10000]	lr: 3.386e-03, eta: 1:10:49, time: 1.388, data_time: 0.222, memory: 17071, decode.loss_ce: 0.0736, decode.acc_seg: 95.8977, aux_0.loss_ce: 0.0778, aux_0.acc_seg: 95.7484, aux_1.loss_ce: 0.0892, aux_1.acc_seg: 95.1269, aux_2.loss_ce: 0.1263, aux_2.loss_dice: 0.2625, aux_2.acc_seg: 95.8210, aux_3.loss_ce: 0.1861, aux_3.acc_seg: 94.6901, loss: 0.8155
2023-03-28 13:51:01,586 - mmseg - INFO - per class results:
2023-03-28 13:51:01,587 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  Bicyclist  | 83.34 | 92.03 |
|   Building  | 92.46 | 94.32 |
|     Car     | 91.78 | 95.48 |
| Column_Pole | 10.62 | 11.96 |
|    Fence    | 79.06 | 90.14 |
|  Pedestrian | 61.74 | 80.31 |
|     Road    | 97.28 |  98.1 |
|   Sidewalk  | 91.22 |  97.2 |
|  SignSymbol |  0.0  |  0.0  |
|     Sky     | 93.77 | 96.48 |
|     Tree    | 90.62 | 98.53 |
+-------------+-------+-------+
2023-03-28 13:51:01,587 - mmseg - INFO - Summary:
2023-03-28 13:51:01,587 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc |  mIoU |  mAcc |
+-------+-------+-------+
| 95.78 | 71.99 | 77.68 |
+-------+-------+-------+
2023-03-28 13:51:01,587 - mmseg - INFO - Exp name: stdc1-entext_2x12_720x960_10k_camvid.py
2023-03-28 13:51:01,587 - mmseg - INFO - Iter(val) [51]	aAcc: 0.9578, mIoU: 0.7199, mAcc: 0.7768, IoU.Bicyclist: 0.8334, IoU.Building: 0.9246, IoU.Car: 0.9178, IoU.Column_Pole: 0.1062, IoU.Fence: 0.7906, IoU.Pedestrian: 0.6174, IoU.Road: 0.9728, IoU.Sidewalk: 0.9122, IoU.SignSymbol: 0.0000, IoU.Sky: 0.9377, IoU.Tree: 0.9062, Acc.Bicyclist: 0.9203, Acc.Building: 0.9432, Acc.Car: 0.9548, Acc.Column_Pole: 0.1196, Acc.Fence: 0.9014, Acc.Pedestrian: 0.8031, Acc.Road: 0.9810, Acc.Sidewalk: 0.9720, Acc.SignSymbol: 0.0000, Acc.Sky: 0.9648, Acc.Tree: 0.9853
2023-03-28 13:52:10,842 - mmseg - INFO - Iter [7050/10000]	lr: 3.335e-03, eta: 1:09:39, time: 1.441, data_time: 0.290, memory: 17071, decode.loss_ce: 0.0732, decode.acc_seg: 95.9045, aux_0.loss_ce: 0.0779, aux_0.acc_seg: 95.7604, aux_1.loss_ce: 0.0892, aux_1.acc_seg: 95.1436, aux_2.loss_ce: 0.1246, aux_2.loss_dice: 0.2626, aux_2.acc_seg: 95.9185, aux_3.loss_ce: 0.1872, aux_3.acc_seg: 94.6954, loss: 0.8147
2023-03-28 13:53:24,539 - mmseg - INFO - Iter [7100/10000]	lr: 3.284e-03, eta: 1:08:29, time: 1.474, data_time: 0.321, memory: 17071, decode.loss_ce: 0.0744, decode.acc_seg: 95.8345, aux_0.loss_ce: 0.0782, aux_0.acc_seg: 95.6804, aux_1.loss_ce: 0.0896, aux_1.acc_seg: 95.0704, aux_2.loss_ce: 0.1245, aux_2.loss_dice: 0.2620, aux_2.acc_seg: 95.9218, aux_3.loss_ce: 0.1870, aux_3.acc_seg: 94.6369, loss: 0.8157
2023-03-28 13:54:34,657 - mmseg - INFO - Iter [7150/10000]	lr: 3.233e-03, eta: 1:07:18, time: 1.402, data_time: 0.246, memory: 17071, decode.loss_ce: 0.0728, decode.acc_seg: 95.8660, aux_0.loss_ce: 0.0777, aux_0.acc_seg: 95.7058, aux_1.loss_ce: 0.0890, aux_1.acc_seg: 95.0831, aux_2.loss_ce: 0.1243, aux_2.loss_dice: 0.2629, aux_2.acc_seg: 95.9308, aux_3.loss_ce: 0.1851, aux_3.acc_seg: 94.6682, loss: 0.8118
2023-03-28 13:55:44,043 - mmseg - INFO - Iter [7200/10000]	lr: 3.182e-03, eta: 1:06:07, time: 1.388, data_time: 0.228, memory: 17071, decode.loss_ce: 0.0725, decode.acc_seg: 95.9897, aux_0.loss_ce: 0.0767, aux_0.acc_seg: 95.8385, aux_1.loss_ce: 0.0882, aux_1.acc_seg: 95.2323, aux_2.loss_ce: 0.1251, aux_2.loss_dice: 0.2624, aux_2.acc_seg: 95.8949, aux_3.loss_ce: 0.1844, aux_3.acc_seg: 94.7856, loss: 0.8094
2023-03-28 13:56:56,679 - mmseg - INFO - Iter [7250/10000]	lr: 3.131e-03, eta: 1:04:56, time: 1.453, data_time: 0.296, memory: 17071, decode.loss_ce: 0.0757, decode.acc_seg: 95.8057, aux_0.loss_ce: 0.0795, aux_0.acc_seg: 95.6483, aux_1.loss_ce: 0.0923, aux_1.acc_seg: 95.0151, aux_2.loss_ce: 0.1272, aux_2.loss_dice: 0.2632, aux_2.acc_seg: 95.8115, aux_3.loss_ce: 0.1886, aux_3.acc_seg: 94.5750, loss: 0.8265
2023-03-28 13:58:06,257 - mmseg - INFO - Iter [7300/10000]	lr: 3.079e-03, eta: 1:03:45, time: 1.392, data_time: 0.232, memory: 17071, decode.loss_ce: 0.0732, decode.acc_seg: 95.8560, aux_0.loss_ce: 0.0775, aux_0.acc_seg: 95.7020, aux_1.loss_ce: 0.0891, aux_1.acc_seg: 95.0852, aux_2.loss_ce: 0.1253, aux_2.loss_dice: 0.2626, aux_2.acc_seg: 95.8747, aux_3.loss_ce: 0.1847, aux_3.acc_seg: 94.6669, loss: 0.8123
2023-03-28 13:59:15,218 - mmseg - INFO - Iter [7350/10000]	lr: 3.028e-03, eta: 1:02:34, time: 1.379, data_time: 0.229, memory: 17071, decode.loss_ce: 0.0736, decode.acc_seg: 95.8787, aux_0.loss_ce: 0.0781, aux_0.acc_seg: 95.7163, aux_1.loss_ce: 0.0911, aux_1.acc_seg: 95.0954, aux_2.loss_ce: 0.1266, aux_2.loss_dice: 0.2630, aux_2.acc_seg: 95.7893, aux_3.loss_ce: 0.1874, aux_3.acc_seg: 94.6589, loss: 0.8198
2023-03-28 14:00:27,209 - mmseg - INFO - Iter [7400/10000]	lr: 2.977e-03, eta: 1:01:23, time: 1.440, data_time: 0.289, memory: 17071, decode.loss_ce: 0.0731, decode.acc_seg: 95.9521, aux_0.loss_ce: 0.0780, aux_0.acc_seg: 95.8000, aux_1.loss_ce: 0.0888, aux_1.acc_seg: 95.1839, aux_2.loss_ce: 0.1265, aux_2.loss_dice: 0.2634, aux_2.acc_seg: 95.8173, aux_3.loss_ce: 0.1827, aux_3.acc_seg: 94.7825, loss: 0.8125
2023-03-28 14:01:36,727 - mmseg - INFO - Iter [7450/10000]	lr: 2.925e-03, eta: 1:00:12, time: 1.390, data_time: 0.224, memory: 17071, decode.loss_ce: 0.0725, decode.acc_seg: 95.9476, aux_0.loss_ce: 0.0761, aux_0.acc_seg: 95.7946, aux_1.loss_ce: 0.0883, aux_1.acc_seg: 95.1766, aux_2.loss_ce: 0.1254, aux_2.loss_dice: 0.2627, aux_2.acc_seg: 95.8623, aux_3.loss_ce: 0.1852, aux_3.acc_seg: 94.7470, loss: 0.8102
2023-03-28 14:02:46,259 - mmseg - INFO - Iter [7500/10000]	lr: 2.873e-03, eta: 0:59:01, time: 1.391, data_time: 0.233, memory: 17071, decode.loss_ce: 0.0735, decode.acc_seg: 95.9222, aux_0.loss_ce: 0.0772, aux_0.acc_seg: 95.7674, aux_1.loss_ce: 0.0890, aux_1.acc_seg: 95.1419, aux_2.loss_ce: 0.1252, aux_2.loss_dice: 0.2631, aux_2.acc_seg: 95.8834, aux_3.loss_ce: 0.1840, aux_3.acc_seg: 94.6955, loss: 0.8121
2023-03-28 14:03:58,457 - mmseg - INFO - Iter [7550/10000]	lr: 2.822e-03, eta: 0:57:50, time: 1.444, data_time: 0.292, memory: 17071, decode.loss_ce: 0.0735, decode.acc_seg: 95.9028, aux_0.loss_ce: 0.0773, aux_0.acc_seg: 95.7414, aux_1.loss_ce: 0.0893, aux_1.acc_seg: 95.1430, aux_2.loss_ce: 0.1252, aux_2.loss_dice: 0.2633, aux_2.acc_seg: 95.8883, aux_3.loss_ce: 0.1863, aux_3.acc_seg: 94.6979, loss: 0.8149
2023-03-28 14:05:08,063 - mmseg - INFO - Iter [7600/10000]	lr: 2.770e-03, eta: 0:56:39, time: 1.392, data_time: 0.229, memory: 17071, decode.loss_ce: 0.0748, decode.acc_seg: 95.8518, aux_0.loss_ce: 0.0796, aux_0.acc_seg: 95.7134, aux_1.loss_ce: 0.0915, aux_1.acc_seg: 95.0725, aux_2.loss_ce: 0.1269, aux_2.loss_dice: 0.2639, aux_2.acc_seg: 95.8042, aux_3.loss_ce: 0.1901, aux_3.acc_seg: 94.6144, loss: 0.8269
2023-03-28 14:06:17,137 - mmseg - INFO - Iter [7650/10000]	lr: 2.718e-03, eta: 0:55:28, time: 1.381, data_time: 0.227, memory: 17071, decode.loss_ce: 0.0754, decode.acc_seg: 95.8731, aux_0.loss_ce: 0.0785, aux_0.acc_seg: 95.7468, aux_1.loss_ce: 0.0923, aux_1.acc_seg: 95.0838, aux_2.loss_ce: 0.1277, aux_2.loss_dice: 0.2646, aux_2.acc_seg: 95.7706, aux_3.loss_ce: 0.1909, aux_3.acc_seg: 94.6768, loss: 0.8293
2023-03-28 14:07:29,494 - mmseg - INFO - Iter [7700/10000]	lr: 2.666e-03, eta: 0:54:17, time: 1.447, data_time: 0.286, memory: 17071, decode.loss_ce: 0.0722, decode.acc_seg: 95.9324, aux_0.loss_ce: 0.0763, aux_0.acc_seg: 95.7818, aux_1.loss_ce: 0.0887, aux_1.acc_seg: 95.1623, aux_2.loss_ce: 0.1260, aux_2.loss_dice: 0.2621, aux_2.acc_seg: 95.8308, aux_3.loss_ce: 0.1778, aux_3.acc_seg: 94.7297, loss: 0.8030
2023-03-28 14:08:38,641 - mmseg - INFO - Iter [7750/10000]	lr: 2.614e-03, eta: 0:53:06, time: 1.383, data_time: 0.230, memory: 17071, decode.loss_ce: 0.0739, decode.acc_seg: 95.8798, aux_0.loss_ce: 0.0777, aux_0.acc_seg: 95.7337, aux_1.loss_ce: 0.0903, aux_1.acc_seg: 95.1055, aux_2.loss_ce: 0.1257, aux_2.loss_dice: 0.2628, aux_2.acc_seg: 95.8569, aux_3.loss_ce: 0.1862, aux_3.acc_seg: 94.6653, loss: 0.8165
2023-03-28 14:09:48,122 - mmseg - INFO - Iter [7800/10000]	lr: 2.561e-03, eta: 0:51:55, time: 1.389, data_time: 0.225, memory: 17071, decode.loss_ce: 0.0742, decode.acc_seg: 95.9015, aux_0.loss_ce: 0.0784, aux_0.acc_seg: 95.7601, aux_1.loss_ce: 0.0904, aux_1.acc_seg: 95.1170, aux_2.loss_ce: 0.1252, aux_2.loss_dice: 0.2628, aux_2.acc_seg: 95.9011, aux_3.loss_ce: 0.1864, aux_3.acc_seg: 94.7095, loss: 0.8173
2023-03-28 14:11:00,403 - mmseg - INFO - Iter [7850/10000]	lr: 2.509e-03, eta: 0:50:44, time: 1.445, data_time: 0.290, memory: 17071, decode.loss_ce: 0.0730, decode.acc_seg: 95.9683, aux_0.loss_ce: 0.0777, aux_0.acc_seg: 95.8179, aux_1.loss_ce: 0.0889, aux_1.acc_seg: 95.1844, aux_2.loss_ce: 0.1260, aux_2.loss_dice: 0.2634, aux_2.acc_seg: 95.8439, aux_3.loss_ce: 0.1841, aux_3.acc_seg: 94.7470, loss: 0.8130
