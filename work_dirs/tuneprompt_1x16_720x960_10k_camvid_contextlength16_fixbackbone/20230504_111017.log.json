{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: None\nGCC: gcc (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0\nPyTorch: 1.12.1+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1+cu113\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.30.0+e7ed570", "seed": 547044154, "exp_name": "tuneprompt_1x16_720x960_10k_camvid_contextlength16_fixbackbone.py", "mmseg_version": "0.30.0+e7ed570", "config": "norm_cfg = dict(type='BN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=None,\n    backbone=dict(\n        type='STDCContextNet',\n        backbone_cfg=dict(\n            type='STDCNet',\n            stdc_type='STDCNet1',\n            in_channels=3,\n            channels=(32, 64, 256, 512, 1024),\n            bottleneck_type='cat',\n            num_convs=4,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            act_cfg=dict(type='ReLU'),\n            with_final_conv=False),\n        last_in_channels=(1035, 512),\n        out_channels=128,\n        ffm_cfg=dict(in_channels=384, out_channels=256, scale_factor=4),\n        textencoder_cfg=dict(\n            type='CLIPTextContextEncoder',\n            context_length=16,\n            encoder_type='RN50',\n            pretrained='./pretrained/RN50.pt'),\n        context_mode='CSC',\n        CLASSES=('Bicyclist', 'Building', 'Car', 'Column_Pole', 'Fence',\n                 'Pedestrian', 'Road', 'Sidewalk', 'SignSymbol', 'Sky',\n                 'Tree')),\n    decode_head=dict(\n        type='FCNHead',\n        in_channels=256,\n        channels=256,\n        num_convs=1,\n        num_classes=19,\n        in_index=3,\n        concat_input=False,\n        dropout_ratio=0.1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        align_corners=True,\n        sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=690000),\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=[\n        dict(\n            type='FCNHead',\n            in_channels=128,\n            channels=64,\n            num_convs=1,\n            num_classes=11,\n            in_index=2,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=False,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=690000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        dict(\n            type='FCNHead',\n            in_channels=128,\n            channels=64,\n            num_convs=1,\n            num_classes=11,\n            in_index=1,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=False,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=690000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        dict(\n            type='STDCHead',\n            in_channels=256,\n            channels=64,\n            num_convs=1,\n            num_classes=2,\n            boundary_threshold=0.1,\n            in_index=0,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=True,\n            loss_decode=[\n                dict(\n                    type='CrossEntropyLoss',\n                    loss_name='loss_ce',\n                    use_sigmoid=True,\n                    loss_weight=1.0),\n                dict(type='DiceLoss', loss_name='loss_dice', loss_weight=1.0)\n            ]),\n        dict(\n            type='VanillaHead',\n            temperature=0.07,\n            in_channels=11,\n            channels=1,\n            num_classes=11,\n            in_index=4,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=690000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0))\n    ],\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'),\n    init_cfg=dict(\n        type='Pretrained',\n        checkpoint=\n        './work_dirs/entextnet_stdc1_1x16_720x960_10k_camvid/best.pth'))\ndataset_type = 'CamVidDataset'\ndata_root = 'data/CamVid/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (720, 960)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(\n        type='Resize',\n        img_scale=(960, 720),\n        ratio_range=(0.5, 2.5),\n        scale_step_size=0.25),\n    dict(type='RandomCrop', crop_size=(720, 960), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(720, 960), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(960, 720),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=16,\n    workers_per_gpu=4,\n    train=dict(\n        type='CamVidDataset',\n        data_root='data/CamVid/',\n        img_dir='train',\n        ann_dir='train_labelIds',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize',\n                img_scale=(960, 720),\n                ratio_range=(0.5, 2.5),\n                scale_step_size=0.25),\n            dict(type='RandomCrop', crop_size=(720, 960), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(720, 960), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CamVidDataset',\n        data_root='data/CamVid/',\n        img_dir='val',\n        ann_dir='val_labelIds',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(960, 720),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CamVidDataset',\n        data_root='data/CamVid/',\n        img_dir='val',\n        ann_dir='val_labelIds',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(960, 720),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='SGD',\n    lr=0.1,\n    momentum=0.9,\n    weight_decay=0.0005,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            {\n                'backbone.backbone': dict(lr_mult=0.0),\n                'backbone.text_encoder': dict(lr_mult=0.0, decay_mult=0.0),\n                'backbone.contexts': dict(decay_mult=0.0),\n                '.bn.': dict(decay_mult=0.0)\n            })))\noptimizer_config = dict()\nlr_config = dict(\n    policy='poly',\n    power=0.9,\n    min_lr=1e-06,\n    by_epoch=False,\n    warmup='linear',\n    warmup_iters=200,\n    warmup_ratio=1e-05)\nrunner = dict(type='IterBasedRunner', max_iters=10000)\ncheckpoint_config = dict(by_epoch=False, interval=1000)\nevaluation = dict(interval=1000, metric='mIoU', pre_eval=True)\ncheckpoint = './work_dirs/entextnet_stdc1_1x16_720x960_10k_camvid/best.pth'\nwork_dir = './work_dirs/tuneprompt_1x16_720x960_10k_camvid_contextlength16_fixbackbone'\ngpu_ids = [0]\nauto_resume = False\ndevice = 'cuda'\nseed = 547044154\n", "CLASSES": ["Bicyclist", "Building", "Car", "Column_Pole", "Fence", "Pedestrian", "Road", "Sidewalk", "SignSymbol", "Sky", "Tree"], "PALETTE": [[0, 128, 192], [128, 0, 0], [64, 0, 128], [192, 192, 128], [64, 64, 128], [64, 64, 0], [128, 64, 128], [0, 0, 192], [192, 128, 128], [128, 128, 128], [128, 128, 0]]}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.02439, "memory": 14777, "data_time": 0.28136, "decode.loss_ce": 0.06104, "decode.acc_seg": 96.78555, "aux_0.loss_ce": 0.06298, "aux_0.acc_seg": 96.73316, "aux_1.loss_ce": 0.08007, "aux_1.acc_seg": 95.9, "aux_2.loss_ce": 0.11979, "aux_2.loss_dice": 0.25129, "aux_2.acc_seg": 95.972, "aux_3.loss_ce": 0.24575, "aux_3.acc_seg": 93.44771, "loss": 0.82093, "time": 1.14197}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.04906, "memory": 14777, "data_time": 0.22995, "decode.loss_ce": 0.06164, "decode.acc_seg": 96.66368, "aux_0.loss_ce": 0.06309, "aux_0.acc_seg": 96.64099, "aux_1.loss_ce": 0.08003, "aux_1.acc_seg": 95.7861, "aux_2.loss_ce": 0.11605, "aux_2.loss_dice": 0.24792, "aux_2.acc_seg": 96.08543, "aux_3.loss_ce": 0.11946, "aux_3.acc_seg": 94.62415, "loss": 0.6882, "time": 0.93501}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.0735, "memory": 14777, "data_time": 0.21067, "decode.loss_ce": 0.06425, "decode.acc_seg": 96.64737, "aux_0.loss_ce": 0.06571, "aux_0.acc_seg": 96.61607, "aux_1.loss_ce": 0.08278, "aux_1.acc_seg": 95.77957, "aux_2.loss_ce": 0.11769, "aux_2.loss_dice": 0.25141, "aux_2.acc_seg": 96.065, "aux_3.loss_ce": 0.11802, "aux_3.acc_seg": 94.73118, "loss": 0.69986, "time": 0.92329}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.09772, "memory": 14777, "data_time": 0.29992, "decode.loss_ce": 0.0689, "decode.acc_seg": 96.43304, "aux_0.loss_ce": 0.06926, "aux_0.acc_seg": 96.46473, "aux_1.loss_ce": 0.08662, "aux_1.acc_seg": 95.63551, "aux_2.loss_ce": 0.11819, "aux_2.loss_dice": 0.2523, "aux_2.acc_seg": 96.06266, "aux_3.loss_ce": 0.11449, "aux_3.acc_seg": 94.84012, "loss": 0.70977, "time": 1.01483}
{"mode": "train", "epoch": 12, "iter": 250, "lr": 0.09776, "memory": 14777, "data_time": 0.22266, "decode.loss_ce": 0.06908, "decode.acc_seg": 96.50807, "aux_0.loss_ce": 0.0697, "aux_0.acc_seg": 96.51828, "aux_1.loss_ce": 0.08709, "aux_1.acc_seg": 95.67364, "aux_2.loss_ce": 0.11847, "aux_2.loss_dice": 0.2522, "aux_2.acc_seg": 96.05679, "aux_3.loss_ce": 0.11397, "aux_3.acc_seg": 94.85858, "loss": 0.71049, "time": 0.94053}
{"mode": "train", "epoch": 14, "iter": 300, "lr": 0.0973, "memory": 14777, "data_time": 0.21055, "decode.loss_ce": 0.0662, "decode.acc_seg": 96.46862, "aux_0.loss_ce": 0.06743, "aux_0.acc_seg": 96.45563, "aux_1.loss_ce": 0.08414, "aux_1.acc_seg": 95.61173, "aux_2.loss_ce": 0.11657, "aux_2.loss_dice": 0.24964, "aux_2.acc_seg": 96.06866, "aux_3.loss_ce": 0.10951, "aux_3.acc_seg": 94.82294, "loss": 0.69348, "time": 0.92244}
{"mode": "train", "epoch": 16, "iter": 350, "lr": 0.09685, "memory": 14777, "data_time": 0.23028, "decode.loss_ce": 0.07072, "decode.acc_seg": 96.45262, "aux_0.loss_ce": 0.07177, "aux_0.acc_seg": 96.45364, "aux_1.loss_ce": 0.08855, "aux_1.acc_seg": 95.64778, "aux_2.loss_ce": 0.11868, "aux_2.loss_dice": 0.25154, "aux_2.acc_seg": 96.0333, "aux_3.loss_ce": 0.11385, "aux_3.acc_seg": 94.87729, "loss": 0.71513, "time": 0.93928}
{"mode": "train", "epoch": 19, "iter": 400, "lr": 0.0964, "memory": 14777, "data_time": 0.30791, "decode.loss_ce": 0.07053, "decode.acc_seg": 96.45463, "aux_0.loss_ce": 0.07072, "aux_0.acc_seg": 96.47229, "aux_1.loss_ce": 0.0883, "aux_1.acc_seg": 95.63811, "aux_2.loss_ce": 0.11867, "aux_2.loss_dice": 0.25193, "aux_2.acc_seg": 96.01419, "aux_3.loss_ce": 0.11401, "aux_3.acc_seg": 94.84361, "loss": 0.71416, "time": 1.01484}
{"mode": "train", "epoch": 21, "iter": 450, "lr": 0.09595, "memory": 14777, "data_time": 0.2337, "decode.loss_ce": 0.06803, "decode.acc_seg": 96.49067, "aux_0.loss_ce": 0.06722, "aux_0.acc_seg": 96.54579, "aux_1.loss_ce": 0.08435, "aux_1.acc_seg": 95.71548, "aux_2.loss_ce": 0.1162, "aux_2.loss_dice": 0.24873, "aux_2.acc_seg": 96.08773, "aux_3.loss_ce": 0.10775, "aux_3.acc_seg": 94.97911, "loss": 0.69229, "time": 0.94058}
{"mode": "train", "epoch": 23, "iter": 500, "lr": 0.0955, "memory": 14777, "data_time": 0.22882, "decode.loss_ce": 0.06778, "decode.acc_seg": 96.50379, "aux_0.loss_ce": 0.06819, "aux_0.acc_seg": 96.51766, "aux_1.loss_ce": 0.08585, "aux_1.acc_seg": 95.66491, "aux_2.loss_ce": 0.11887, "aux_2.loss_dice": 0.2517, "aux_2.acc_seg": 96.04519, "aux_3.loss_ce": 0.11102, "aux_3.acc_seg": 94.87292, "loss": 0.70341, "time": 0.94186}
{"mode": "train", "epoch": 25, "iter": 550, "lr": 0.09505, "memory": 14777, "data_time": 0.21262, "decode.loss_ce": 0.0676, "decode.acc_seg": 96.51688, "aux_0.loss_ce": 0.06848, "aux_0.acc_seg": 96.51853, "aux_1.loss_ce": 0.08484, "aux_1.acc_seg": 95.73778, "aux_2.loss_ce": 0.11674, "aux_2.loss_dice": 0.25173, "aux_2.acc_seg": 96.15036, "aux_3.loss_ce": 0.11097, "aux_3.acc_seg": 94.87909, "loss": 0.70037, "time": 0.92506}
{"mode": "train", "epoch": 28, "iter": 600, "lr": 0.09459, "memory": 14777, "data_time": 0.28966, "decode.loss_ce": 0.06741, "decode.acc_seg": 96.56089, "aux_0.loss_ce": 0.06884, "aux_0.acc_seg": 96.54692, "aux_1.loss_ce": 0.08558, "aux_1.acc_seg": 95.72763, "aux_2.loss_ce": 0.12006, "aux_2.loss_dice": 0.25325, "aux_2.acc_seg": 95.99528, "aux_3.loss_ce": 0.11315, "aux_3.acc_seg": 94.87196, "loss": 0.70827, "time": 0.99942}
{"mode": "train", "epoch": 30, "iter": 650, "lr": 0.09414, "memory": 14777, "data_time": 0.2299, "decode.loss_ce": 0.06713, "decode.acc_seg": 96.47398, "aux_0.loss_ce": 0.06786, "aux_0.acc_seg": 96.48893, "aux_1.loss_ce": 0.0836, "aux_1.acc_seg": 95.69972, "aux_2.loss_ce": 0.11601, "aux_2.loss_dice": 0.24877, "aux_2.acc_seg": 96.10792, "aux_3.loss_ce": 0.1088, "aux_3.acc_seg": 94.87932, "loss": 0.69219, "time": 0.93914}
{"mode": "train", "epoch": 32, "iter": 700, "lr": 0.09369, "memory": 14777, "data_time": 0.22155, "decode.loss_ce": 0.06474, "decode.acc_seg": 96.56205, "aux_0.loss_ce": 0.06616, "aux_0.acc_seg": 96.53494, "aux_1.loss_ce": 0.08219, "aux_1.acc_seg": 95.73505, "aux_2.loss_ce": 0.11704, "aux_2.loss_dice": 0.24845, "aux_2.acc_seg": 96.05481, "aux_3.loss_ce": 0.10839, "aux_3.acc_seg": 94.87629, "loss": 0.68697, "time": 0.93053}
{"mode": "train", "epoch": 35, "iter": 750, "lr": 0.09323, "memory": 14777, "data_time": 0.29844, "decode.loss_ce": 0.06383, "decode.acc_seg": 96.67108, "aux_0.loss_ce": 0.06491, "aux_0.acc_seg": 96.6629, "aux_1.loss_ce": 0.08143, "aux_1.acc_seg": 95.8404, "aux_2.loss_ce": 0.11903, "aux_2.loss_dice": 0.25138, "aux_2.acc_seg": 96.00593, "aux_3.loss_ce": 0.10699, "aux_3.acc_seg": 95.01783, "loss": 0.68758, "time": 1.01426}
{"mode": "train", "epoch": 37, "iter": 800, "lr": 0.09278, "memory": 14777, "data_time": 0.2147, "decode.loss_ce": 0.06514, "decode.acc_seg": 96.61165, "aux_0.loss_ce": 0.06632, "aux_0.acc_seg": 96.60626, "aux_1.loss_ce": 0.08239, "aux_1.acc_seg": 95.81324, "aux_2.loss_ce": 0.11782, "aux_2.loss_dice": 0.25158, "aux_2.acc_seg": 96.05341, "aux_3.loss_ce": 0.10875, "aux_3.acc_seg": 94.93805, "loss": 0.69199, "time": 0.92735}
{"mode": "train", "epoch": 39, "iter": 850, "lr": 0.09233, "memory": 14777, "data_time": 0.22385, "decode.loss_ce": 0.06837, "decode.acc_seg": 96.46819, "aux_0.loss_ce": 0.06934, "aux_0.acc_seg": 96.4684, "aux_1.loss_ce": 0.0863, "aux_1.acc_seg": 95.66343, "aux_2.loss_ce": 0.11903, "aux_2.loss_dice": 0.25313, "aux_2.acc_seg": 96.03166, "aux_3.loss_ce": 0.1136, "aux_3.acc_seg": 94.77141, "loss": 0.70978, "time": 0.9359}
{"mode": "train", "epoch": 41, "iter": 900, "lr": 0.09187, "memory": 14777, "data_time": 0.2366, "decode.loss_ce": 0.0658, "decode.acc_seg": 96.56566, "aux_0.loss_ce": 0.06723, "aux_0.acc_seg": 96.55071, "aux_1.loss_ce": 0.08324, "aux_1.acc_seg": 95.7571, "aux_2.loss_ce": 0.11861, "aux_2.loss_dice": 0.25122, "aux_2.acc_seg": 96.00896, "aux_3.loss_ce": 0.10947, "aux_3.acc_seg": 94.9146, "loss": 0.69558, "time": 0.94532}
{"mode": "train", "epoch": 44, "iter": 950, "lr": 0.09142, "memory": 14777, "data_time": 0.29375, "decode.loss_ce": 0.06441, "decode.acc_seg": 96.59023, "aux_0.loss_ce": 0.06516, "aux_0.acc_seg": 96.59812, "aux_1.loss_ce": 0.08149, "aux_1.acc_seg": 95.78611, "aux_2.loss_ce": 0.11636, "aux_2.loss_dice": 0.25023, "aux_2.acc_seg": 96.09576, "aux_3.loss_ce": 0.10708, "aux_3.acc_seg": 94.93452, "loss": 0.68473, "time": 1.0069}
{"mode": "train", "epoch": 46, "iter": 1000, "lr": 0.09096, "memory": 14777, "data_time": 0.2093, "decode.loss_ce": 0.06814, "decode.acc_seg": 96.55715, "aux_0.loss_ce": 0.06898, "aux_0.acc_seg": 96.55935, "aux_1.loss_ce": 0.08628, "aux_1.acc_seg": 95.72629, "aux_2.loss_ce": 0.11867, "aux_2.loss_dice": 0.25375, "aux_2.acc_seg": 96.09553, "aux_3.loss_ce": 0.11416, "aux_3.acc_seg": 94.84735, "loss": 0.70998, "time": 0.99135}
{"mode": "val", "epoch": 46, "iter": 101, "lr": 0.09096, "aAcc": 0.9655, "mIoU": 0.7554, "mAcc": 0.8119, "IoU.Bicyclist": 0.8569, "IoU.Building": 0.9364, "IoU.Car": 0.923, "IoU.Column_Pole": 0.3013, "IoU.Fence": 0.8278, "IoU.Pedestrian": 0.679, "IoU.Road": 0.978, "IoU.Sidewalk": 0.9241, "IoU.SignSymbol": 0.0077, "IoU.Sky": 0.944, "IoU.Tree": 0.9314, "Acc.Bicyclist": 0.9487, "Acc.Building": 0.9517, "Acc.Car": 0.9402, "Acc.Column_Pole": 0.3799, "Acc.Fence": 0.9411, "Acc.Pedestrian": 0.8449, "Acc.Road": 0.9857, "Acc.Sidewalk": 0.9805, "Acc.SignSymbol": 0.0077, "Acc.Sky": 0.9713, "Acc.Tree": 0.9797}
{"mode": "train", "epoch": 48, "iter": 1050, "lr": 0.09051, "memory": 14777, "data_time": 0.63937, "decode.loss_ce": 0.06784, "decode.acc_seg": 96.4716, "aux_0.loss_ce": 0.06941, "aux_0.acc_seg": 96.45367, "aux_1.loss_ce": 0.08587, "aux_1.acc_seg": 95.64066, "aux_2.loss_ce": 0.11691, "aux_2.loss_dice": 0.2501, "aux_2.acc_seg": 96.09749, "aux_3.loss_ce": 0.10935, "aux_3.acc_seg": 94.88407, "loss": 0.69948, "time": 1.35318}
{"mode": "train", "epoch": 50, "iter": 1100, "lr": 0.09005, "memory": 14777, "data_time": 0.22551, "decode.loss_ce": 0.06453, "decode.acc_seg": 96.59757, "aux_0.loss_ce": 0.06492, "aux_0.acc_seg": 96.62334, "aux_1.loss_ce": 0.08146, "aux_1.acc_seg": 95.80638, "aux_2.loss_ce": 0.11521, "aux_2.loss_dice": 0.24913, "aux_2.acc_seg": 96.14271, "aux_3.loss_ce": 0.10525, "aux_3.acc_seg": 95.01346, "loss": 0.6805, "time": 0.94193}
{"mode": "train", "epoch": 53, "iter": 1150, "lr": 0.0896, "memory": 14777, "data_time": 0.32877, "decode.loss_ce": 0.06522, "decode.acc_seg": 96.64145, "aux_0.loss_ce": 0.06626, "aux_0.acc_seg": 96.6307, "aux_1.loss_ce": 0.08279, "aux_1.acc_seg": 95.8007, "aux_2.loss_ce": 0.11796, "aux_2.loss_dice": 0.25029, "aux_2.acc_seg": 96.0222, "aux_3.loss_ce": 0.10818, "aux_3.acc_seg": 94.99744, "loss": 0.6907, "time": 1.04632}
{"mode": "train", "epoch": 55, "iter": 1200, "lr": 0.08914, "memory": 14777, "data_time": 0.25172, "decode.loss_ce": 0.06718, "decode.acc_seg": 96.52153, "aux_0.loss_ce": 0.06806, "aux_0.acc_seg": 96.5171, "aux_1.loss_ce": 0.08617, "aux_1.acc_seg": 95.63759, "aux_2.loss_ce": 0.11931, "aux_2.loss_dice": 0.25092, "aux_2.acc_seg": 95.99726, "aux_3.loss_ce": 0.11148, "aux_3.acc_seg": 94.85766, "loss": 0.70312, "time": 0.96918}
{"mode": "train", "epoch": 57, "iter": 1250, "lr": 0.08869, "memory": 14777, "data_time": 0.21677, "decode.loss_ce": 0.06466, "decode.acc_seg": 96.60884, "aux_0.loss_ce": 0.06526, "aux_0.acc_seg": 96.6233, "aux_1.loss_ce": 0.08165, "aux_1.acc_seg": 95.7961, "aux_2.loss_ce": 0.11814, "aux_2.loss_dice": 0.25071, "aux_2.acc_seg": 96.03791, "aux_3.loss_ce": 0.10792, "aux_3.acc_seg": 94.92422, "loss": 0.68833, "time": 0.92586}
{"mode": "train", "epoch": 60, "iter": 1300, "lr": 0.08823, "memory": 14777, "data_time": 0.3064, "decode.loss_ce": 0.06486, "decode.acc_seg": 96.59837, "aux_0.loss_ce": 0.06608, "aux_0.acc_seg": 96.58337, "aux_1.loss_ce": 0.08257, "aux_1.acc_seg": 95.75811, "aux_2.loss_ce": 0.11903, "aux_2.loss_dice": 0.25048, "aux_2.acc_seg": 95.96404, "aux_3.loss_ce": 0.10944, "aux_3.acc_seg": 94.87409, "loss": 0.69246, "time": 1.01109}
{"mode": "train", "epoch": 62, "iter": 1350, "lr": 0.08777, "memory": 14777, "data_time": 0.23166, "decode.loss_ce": 0.06336, "decode.acc_seg": 96.71578, "aux_0.loss_ce": 0.06441, "aux_0.acc_seg": 96.69927, "aux_1.loss_ce": 0.08063, "aux_1.acc_seg": 95.90236, "aux_2.loss_ce": 0.11816, "aux_2.loss_dice": 0.25132, "aux_2.acc_seg": 96.05379, "aux_3.loss_ce": 0.1074, "aux_3.acc_seg": 95.03179, "loss": 0.68528, "time": 0.93939}
{"mode": "train", "epoch": 64, "iter": 1400, "lr": 0.08732, "memory": 14777, "data_time": 0.20597, "decode.loss_ce": 0.0668, "decode.acc_seg": 96.52157, "aux_0.loss_ce": 0.0673, "aux_0.acc_seg": 96.53753, "aux_1.loss_ce": 0.08386, "aux_1.acc_seg": 95.71815, "aux_2.loss_ce": 0.11845, "aux_2.loss_dice": 0.25171, "aux_2.acc_seg": 96.04839, "aux_3.loss_ce": 0.10887, "aux_3.acc_seg": 94.91693, "loss": 0.69699, "time": 0.91661}
{"mode": "train", "epoch": 66, "iter": 1450, "lr": 0.08686, "memory": 14777, "data_time": 0.21732, "decode.loss_ce": 0.06333, "decode.acc_seg": 96.69573, "aux_0.loss_ce": 0.06485, "aux_0.acc_seg": 96.67208, "aux_1.loss_ce": 0.08075, "aux_1.acc_seg": 95.89157, "aux_2.loss_ce": 0.11655, "aux_2.loss_dice": 0.25, "aux_2.acc_seg": 96.09339, "aux_3.loss_ce": 0.10701, "aux_3.acc_seg": 95.0179, "loss": 0.68249, "time": 0.92527}
{"mode": "train", "epoch": 69, "iter": 1500, "lr": 0.0864, "memory": 14777, "data_time": 0.28396, "decode.loss_ce": 0.06665, "decode.acc_seg": 96.56397, "aux_0.loss_ce": 0.0677, "aux_0.acc_seg": 96.55988, "aux_1.loss_ce": 0.08423, "aux_1.acc_seg": 95.75297, "aux_2.loss_ce": 0.11887, "aux_2.loss_dice": 0.25243, "aux_2.acc_seg": 96.03757, "aux_3.loss_ce": 0.11113, "aux_3.acc_seg": 94.88743, "loss": 0.70101, "time": 1.00344}
{"mode": "train", "epoch": 71, "iter": 1550, "lr": 0.08594, "memory": 14777, "data_time": 0.21956, "decode.loss_ce": 0.06359, "decode.acc_seg": 96.66332, "aux_0.loss_ce": 0.06469, "aux_0.acc_seg": 96.65329, "aux_1.loss_ce": 0.0817, "aux_1.acc_seg": 95.83264, "aux_2.loss_ce": 0.11664, "aux_2.loss_dice": 0.25007, "aux_2.acc_seg": 96.09353, "aux_3.loss_ce": 0.10793, "aux_3.acc_seg": 94.96936, "loss": 0.68462, "time": 0.939}
{"mode": "train", "epoch": 73, "iter": 1600, "lr": 0.08549, "memory": 14777, "data_time": 0.21535, "decode.loss_ce": 0.06544, "decode.acc_seg": 96.54486, "aux_0.loss_ce": 0.06649, "aux_0.acc_seg": 96.54864, "aux_1.loss_ce": 0.08346, "aux_1.acc_seg": 95.71986, "aux_2.loss_ce": 0.11926, "aux_2.loss_dice": 0.25084, "aux_2.acc_seg": 95.95695, "aux_3.loss_ce": 0.10942, "aux_3.acc_seg": 94.85341, "loss": 0.69491, "time": 0.92857}
{"mode": "train", "epoch": 75, "iter": 1650, "lr": 0.08503, "memory": 14777, "data_time": 0.21219, "decode.loss_ce": 0.06596, "decode.acc_seg": 96.59021, "aux_0.loss_ce": 0.06738, "aux_0.acc_seg": 96.57563, "aux_1.loss_ce": 0.08429, "aux_1.acc_seg": 95.73828, "aux_2.loss_ce": 0.12099, "aux_2.loss_dice": 0.25326, "aux_2.acc_seg": 95.95571, "aux_3.loss_ce": 0.11114, "aux_3.acc_seg": 94.8587, "loss": 0.70302, "time": 0.92496}
{"mode": "train", "epoch": 78, "iter": 1700, "lr": 0.08457, "memory": 14777, "data_time": 0.31699, "decode.loss_ce": 0.06458, "decode.acc_seg": 96.65847, "aux_0.loss_ce": 0.06566, "aux_0.acc_seg": 96.64713, "aux_1.loss_ce": 0.08228, "aux_1.acc_seg": 95.82753, "aux_2.loss_ce": 0.11902, "aux_2.loss_dice": 0.25154, "aux_2.acc_seg": 96.03029, "aux_3.loss_ce": 0.11053, "aux_3.acc_seg": 94.88354, "loss": 0.69361, "time": 1.02324}
{"mode": "train", "epoch": 80, "iter": 1750, "lr": 0.08411, "memory": 14777, "data_time": 0.22548, "decode.loss_ce": 0.06261, "decode.acc_seg": 96.69722, "aux_0.loss_ce": 0.06338, "aux_0.acc_seg": 96.70607, "aux_1.loss_ce": 0.07974, "aux_1.acc_seg": 95.89807, "aux_2.loss_ce": 0.11641, "aux_2.loss_dice": 0.24834, "aux_2.acc_seg": 96.05713, "aux_3.loss_ce": 0.10609, "aux_3.acc_seg": 94.99996, "loss": 0.67658, "time": 0.94424}
{"mode": "train", "epoch": 82, "iter": 1800, "lr": 0.08365, "memory": 14777, "data_time": 0.22393, "decode.loss_ce": 0.065, "decode.acc_seg": 96.66255, "aux_0.loss_ce": 0.06608, "aux_0.acc_seg": 96.65056, "aux_1.loss_ce": 0.08234, "aux_1.acc_seg": 95.8462, "aux_2.loss_ce": 0.11756, "aux_2.loss_dice": 0.25059, "aux_2.acc_seg": 96.06801, "aux_3.loss_ce": 0.1084, "aux_3.acc_seg": 94.99097, "loss": 0.68997, "time": 0.94478}
{"mode": "train", "epoch": 85, "iter": 1850, "lr": 0.08319, "memory": 14777, "data_time": 0.28896, "decode.loss_ce": 0.06484, "decode.acc_seg": 96.58983, "aux_0.loss_ce": 0.0657, "aux_0.acc_seg": 96.59215, "aux_1.loss_ce": 0.08308, "aux_1.acc_seg": 95.7482, "aux_2.loss_ce": 0.11791, "aux_2.loss_dice": 0.24906, "aux_2.acc_seg": 95.99354, "aux_3.loss_ce": 0.109, "aux_3.acc_seg": 94.90616, "loss": 0.6896, "time": 1.0107}
{"mode": "train", "epoch": 87, "iter": 1900, "lr": 0.08273, "memory": 14777, "data_time": 0.22773, "decode.loss_ce": 0.06212, "decode.acc_seg": 96.75458, "aux_0.loss_ce": 0.06351, "aux_0.acc_seg": 96.74575, "aux_1.loss_ce": 0.08036, "aux_1.acc_seg": 95.92555, "aux_2.loss_ce": 0.11752, "aux_2.loss_dice": 0.25094, "aux_2.acc_seg": 96.0614, "aux_3.loss_ce": 0.1062, "aux_3.acc_seg": 95.05525, "loss": 0.68065, "time": 0.94324}
{"mode": "train", "epoch": 89, "iter": 1950, "lr": 0.08227, "memory": 14777, "data_time": 0.25214, "decode.loss_ce": 0.06613, "decode.acc_seg": 96.5732, "aux_0.loss_ce": 0.06657, "aux_0.acc_seg": 96.57774, "aux_1.loss_ce": 0.08356, "aux_1.acc_seg": 95.72801, "aux_2.loss_ce": 0.1169, "aux_2.loss_dice": 0.25065, "aux_2.acc_seg": 96.11154, "aux_3.loss_ce": 0.10785, "aux_3.acc_seg": 94.94783, "loss": 0.69166, "time": 0.97197}
{"mode": "train", "epoch": 91, "iter": 2000, "lr": 0.08181, "memory": 14777, "data_time": 0.22865, "decode.loss_ce": 0.06467, "decode.acc_seg": 96.65366, "aux_0.loss_ce": 0.06596, "aux_0.acc_seg": 96.64063, "aux_1.loss_ce": 0.08294, "aux_1.acc_seg": 95.82415, "aux_2.loss_ce": 0.11854, "aux_2.loss_dice": 0.25139, "aux_2.acc_seg": 96.02233, "aux_3.loss_ce": 0.10763, "aux_3.acc_seg": 95.01276, "loss": 0.69115, "time": 1.03447}
{"mode": "val", "epoch": 91, "iter": 101, "lr": 0.08181, "aAcc": 0.959, "mIoU": 0.7469, "mAcc": 0.8087, "IoU.Bicyclist": 0.8595, "IoU.Building": 0.9234, "IoU.Car": 0.93, "IoU.Column_Pole": 0.2819, "IoU.Fence": 0.7961, "IoU.Pedestrian": 0.6656, "IoU.Road": 0.978, "IoU.Sidewalk": 0.9231, "IoU.SignSymbol": 0.028, "IoU.Sky": 0.9266, "IoU.Tree": 0.904, "Acc.Bicyclist": 0.9327, "Acc.Building": 0.9381, "Acc.Car": 0.9461, "Acc.Column_Pole": 0.4079, "Acc.Fence": 0.8784, "Acc.Pedestrian": 0.8672, "Acc.Road": 0.9868, "Acc.Sidewalk": 0.9739, "Acc.SignSymbol": 0.028, "Acc.Sky": 0.946, "Acc.Tree": 0.9908}
{"mode": "train", "epoch": 94, "iter": 2050, "lr": 0.08135, "memory": 14777, "data_time": 0.82329, "decode.loss_ce": 0.06666, "decode.acc_seg": 96.49764, "aux_0.loss_ce": 0.06762, "aux_0.acc_seg": 96.49301, "aux_1.loss_ce": 0.08321, "aux_1.acc_seg": 95.72155, "aux_2.loss_ce": 0.11632, "aux_2.loss_dice": 0.24925, "aux_2.acc_seg": 96.11961, "aux_3.loss_ce": 0.10686, "aux_3.acc_seg": 94.90681, "loss": 0.68992, "time": 1.5474}
{"mode": "train", "epoch": 96, "iter": 2100, "lr": 0.08089, "memory": 14777, "data_time": 0.21863, "decode.loss_ce": 0.06328, "decode.acc_seg": 96.69705, "aux_0.loss_ce": 0.06451, "aux_0.acc_seg": 96.6802, "aux_1.loss_ce": 0.08071, "aux_1.acc_seg": 95.88884, "aux_2.loss_ce": 0.11631, "aux_2.loss_dice": 0.24861, "aux_2.acc_seg": 96.05489, "aux_3.loss_ce": 0.10622, "aux_3.acc_seg": 95.0309, "loss": 0.67964, "time": 0.93057}
{"mode": "train", "epoch": 98, "iter": 2150, "lr": 0.08043, "memory": 14777, "data_time": 0.22654, "decode.loss_ce": 0.06431, "decode.acc_seg": 96.62565, "aux_0.loss_ce": 0.06507, "aux_0.acc_seg": 96.62813, "aux_1.loss_ce": 0.08094, "aux_1.acc_seg": 95.84304, "aux_2.loss_ce": 0.11649, "aux_2.loss_dice": 0.249, "aux_2.acc_seg": 96.08691, "aux_3.loss_ce": 0.10625, "aux_3.acc_seg": 94.98858, "loss": 0.68206, "time": 0.93694}
{"mode": "train", "epoch": 100, "iter": 2200, "lr": 0.07997, "memory": 14777, "data_time": 0.234, "decode.loss_ce": 0.06275, "decode.acc_seg": 96.76775, "aux_0.loss_ce": 0.06423, "aux_0.acc_seg": 96.74255, "aux_1.loss_ce": 0.0809, "aux_1.acc_seg": 95.91591, "aux_2.loss_ce": 0.11859, "aux_2.loss_dice": 0.25147, "aux_2.acc_seg": 96.01071, "aux_3.loss_ce": 0.10783, "aux_3.acc_seg": 95.01535, "loss": 0.68577, "time": 0.94267}
{"mode": "train", "epoch": 103, "iter": 2250, "lr": 0.07951, "memory": 14777, "data_time": 0.28705, "decode.loss_ce": 0.06244, "decode.acc_seg": 96.76143, "aux_0.loss_ce": 0.0636, "aux_0.acc_seg": 96.75452, "aux_1.loss_ce": 0.08057, "aux_1.acc_seg": 95.94189, "aux_2.loss_ce": 0.11739, "aux_2.loss_dice": 0.25152, "aux_2.acc_seg": 96.07685, "aux_3.loss_ce": 0.10623, "aux_3.acc_seg": 95.11997, "loss": 0.68176, "time": 0.9977}
{"mode": "train", "epoch": 105, "iter": 2300, "lr": 0.07905, "memory": 14777, "data_time": 0.22055, "decode.loss_ce": 0.06283, "decode.acc_seg": 96.67284, "aux_0.loss_ce": 0.06418, "aux_0.acc_seg": 96.65335, "aux_1.loss_ce": 0.08146, "aux_1.acc_seg": 95.79995, "aux_2.loss_ce": 0.11787, "aux_2.loss_dice": 0.25051, "aux_2.acc_seg": 96.05451, "aux_3.loss_ce": 0.10725, "aux_3.acc_seg": 94.95289, "loss": 0.6841, "time": 0.94058}
{"mode": "train", "epoch": 107, "iter": 2350, "lr": 0.07859, "memory": 14777, "data_time": 0.2179, "decode.loss_ce": 0.06452, "decode.acc_seg": 96.65874, "aux_0.loss_ce": 0.06549, "aux_0.acc_seg": 96.6507, "aux_1.loss_ce": 0.08206, "aux_1.acc_seg": 95.83884, "aux_2.loss_ce": 0.11956, "aux_2.loss_dice": 0.25153, "aux_2.acc_seg": 95.96331, "aux_3.loss_ce": 0.10783, "aux_3.acc_seg": 95.00044, "loss": 0.69099, "time": 0.92838}
{"mode": "train", "epoch": 110, "iter": 2400, "lr": 0.07812, "memory": 14777, "data_time": 0.30108, "decode.loss_ce": 0.06716, "decode.acc_seg": 96.52907, "aux_0.loss_ce": 0.06771, "aux_0.acc_seg": 96.52497, "aux_1.loss_ce": 0.08512, "aux_1.acc_seg": 95.66766, "aux_2.loss_ce": 0.11851, "aux_2.loss_dice": 0.25104, "aux_2.acc_seg": 95.98759, "aux_3.loss_ce": 0.11023, "aux_3.acc_seg": 94.85467, "loss": 0.69977, "time": 1.0113}
{"mode": "train", "epoch": 112, "iter": 2450, "lr": 0.07766, "memory": 14777, "data_time": 0.22077, "decode.loss_ce": 0.06369, "decode.acc_seg": 96.70609, "aux_0.loss_ce": 0.06494, "aux_0.acc_seg": 96.69252, "aux_1.loss_ce": 0.08147, "aux_1.acc_seg": 95.89068, "aux_2.loss_ce": 0.11793, "aux_2.loss_dice": 0.24993, "aux_2.acc_seg": 96.04185, "aux_3.loss_ce": 0.10758, "aux_3.acc_seg": 95.00487, "loss": 0.68553, "time": 0.9349}
{"mode": "train", "epoch": 114, "iter": 2500, "lr": 0.0772, "memory": 14777, "data_time": 0.22171, "decode.loss_ce": 0.06526, "decode.acc_seg": 96.67497, "aux_0.loss_ce": 0.06605, "aux_0.acc_seg": 96.67825, "aux_1.loss_ce": 0.0832, "aux_1.acc_seg": 95.85887, "aux_2.loss_ce": 0.11942, "aux_2.loss_dice": 0.25207, "aux_2.acc_seg": 96.00892, "aux_3.loss_ce": 0.10925, "aux_3.acc_seg": 94.99777, "loss": 0.69524, "time": 0.93407}
{"mode": "train", "epoch": 116, "iter": 2550, "lr": 0.07674, "memory": 14777, "data_time": 0.22047, "decode.loss_ce": 0.06343, "decode.acc_seg": 96.68235, "aux_0.loss_ce": 0.06456, "aux_0.acc_seg": 96.65792, "aux_1.loss_ce": 0.08185, "aux_1.acc_seg": 95.81441, "aux_2.loss_ce": 0.12, "aux_2.loss_dice": 0.25122, "aux_2.acc_seg": 95.9288, "aux_3.loss_ce": 0.10858, "aux_3.acc_seg": 94.93093, "loss": 0.68965, "time": 0.9396}
{"mode": "train", "epoch": 119, "iter": 2600, "lr": 0.07627, "memory": 14777, "data_time": 0.3019, "decode.loss_ce": 0.0657, "decode.acc_seg": 96.59833, "aux_0.loss_ce": 0.0671, "aux_0.acc_seg": 96.58356, "aux_1.loss_ce": 0.08336, "aux_1.acc_seg": 95.79052, "aux_2.loss_ce": 0.11876, "aux_2.loss_dice": 0.24963, "aux_2.acc_seg": 95.97412, "aux_3.loss_ce": 0.10994, "aux_3.acc_seg": 94.90628, "loss": 0.69448, "time": 1.01657}
{"mode": "train", "epoch": 121, "iter": 2650, "lr": 0.07581, "memory": 14777, "data_time": 0.21934, "decode.loss_ce": 0.06057, "decode.acc_seg": 96.78384, "aux_0.loss_ce": 0.06189, "aux_0.acc_seg": 96.77219, "aux_1.loss_ce": 0.07809, "aux_1.acc_seg": 95.94706, "aux_2.loss_ce": 0.11604, "aux_2.loss_dice": 0.24854, "aux_2.acc_seg": 96.08384, "aux_3.loss_ce": 0.1049, "aux_3.acc_seg": 95.02833, "loss": 0.67004, "time": 0.9268}
{"mode": "train", "epoch": 123, "iter": 2700, "lr": 0.07534, "memory": 14777, "data_time": 0.22005, "decode.loss_ce": 0.06058, "decode.acc_seg": 96.82549, "aux_0.loss_ce": 0.06179, "aux_0.acc_seg": 96.81169, "aux_1.loss_ce": 0.07871, "aux_1.acc_seg": 95.99079, "aux_2.loss_ce": 0.11659, "aux_2.loss_dice": 0.24853, "aux_2.acc_seg": 96.03784, "aux_3.loss_ce": 0.10629, "aux_3.acc_seg": 95.05617, "loss": 0.67249, "time": 0.93234}
{"mode": "train", "epoch": 125, "iter": 2750, "lr": 0.07488, "memory": 14777, "data_time": 0.2127, "decode.loss_ce": 0.06232, "decode.acc_seg": 96.65633, "aux_0.loss_ce": 0.0633, "aux_0.acc_seg": 96.65281, "aux_1.loss_ce": 0.0799, "aux_1.acc_seg": 95.82973, "aux_2.loss_ce": 0.11763, "aux_2.loss_dice": 0.24974, "aux_2.acc_seg": 96.04302, "aux_3.loss_ce": 0.1062, "aux_3.acc_seg": 94.93297, "loss": 0.6791, "time": 0.923}
{"mode": "train", "epoch": 128, "iter": 2800, "lr": 0.07441, "memory": 14777, "data_time": 0.29554, "decode.loss_ce": 0.06153, "decode.acc_seg": 96.72118, "aux_0.loss_ce": 0.06316, "aux_0.acc_seg": 96.68539, "aux_1.loss_ce": 0.08004, "aux_1.acc_seg": 95.84145, "aux_2.loss_ce": 0.11712, "aux_2.loss_dice": 0.24868, "aux_2.acc_seg": 95.99626, "aux_3.loss_ce": 0.10737, "aux_3.acc_seg": 94.91167, "loss": 0.6779, "time": 1.01244}
{"mode": "train", "epoch": 130, "iter": 2850, "lr": 0.07395, "memory": 14777, "data_time": 0.20345, "decode.loss_ce": 0.06338, "decode.acc_seg": 96.71771, "aux_0.loss_ce": 0.06442, "aux_0.acc_seg": 96.71448, "aux_1.loss_ce": 0.08152, "aux_1.acc_seg": 95.87353, "aux_2.loss_ce": 0.1185, "aux_2.loss_dice": 0.2504, "aux_2.acc_seg": 95.98856, "aux_3.loss_ce": 0.10853, "aux_3.acc_seg": 94.97692, "loss": 0.68675, "time": 0.91346}
{"mode": "train", "epoch": 132, "iter": 2900, "lr": 0.07348, "memory": 14777, "data_time": 0.22242, "decode.loss_ce": 0.06295, "decode.acc_seg": 96.74887, "aux_0.loss_ce": 0.06418, "aux_0.acc_seg": 96.73317, "aux_1.loss_ce": 0.08108, "aux_1.acc_seg": 95.9126, "aux_2.loss_ce": 0.1174, "aux_2.loss_dice": 0.25052, "aux_2.acc_seg": 96.06688, "aux_3.loss_ce": 0.10633, "aux_3.acc_seg": 95.10389, "loss": 0.68245, "time": 0.9375}
{"mode": "train", "epoch": 135, "iter": 2950, "lr": 0.07302, "memory": 14777, "data_time": 0.30347, "decode.loss_ce": 0.06289, "decode.acc_seg": 96.69615, "aux_0.loss_ce": 0.06395, "aux_0.acc_seg": 96.6997, "aux_1.loss_ce": 0.08093, "aux_1.acc_seg": 95.84933, "aux_2.loss_ce": 0.1153, "aux_2.loss_dice": 0.24919, "aux_2.acc_seg": 96.14533, "aux_3.loss_ce": 0.10744, "aux_3.acc_seg": 94.95761, "loss": 0.67969, "time": 1.02239}
{"mode": "train", "epoch": 137, "iter": 3000, "lr": 0.07255, "memory": 14777, "data_time": 0.20969, "decode.loss_ce": 0.06425, "decode.acc_seg": 96.64934, "aux_0.loss_ce": 0.06546, "aux_0.acc_seg": 96.6323, "aux_1.loss_ce": 0.08324, "aux_1.acc_seg": 95.77279, "aux_2.loss_ce": 0.11936, "aux_2.loss_dice": 0.25049, "aux_2.acc_seg": 95.94985, "aux_3.loss_ce": 0.10942, "aux_3.acc_seg": 94.90188, "loss": 0.6922, "time": 0.96015}
{"mode": "val", "epoch": 137, "iter": 101, "lr": 0.07255, "aAcc": 0.9673, "mIoU": 0.7528, "mAcc": 0.8032, "IoU.Bicyclist": 0.8645, "IoU.Building": 0.9436, "IoU.Car": 0.9364, "IoU.Column_Pole": 0.2217, "IoU.Fence": 0.8256, "IoU.Pedestrian": 0.6984, "IoU.Road": 0.9787, "IoU.Sidewalk": 0.9269, "IoU.SignSymbol": 0.0062, "IoU.Sky": 0.9443, "IoU.Tree": 0.9342, "Acc.Bicyclist": 0.965, "Acc.Building": 0.9678, "Acc.Car": 0.9705, "Acc.Column_Pole": 0.2504, "Acc.Fence": 0.9239, "Acc.Pedestrian": 0.856, "Acc.Road": 0.9868, "Acc.Sidewalk": 0.9555, "Acc.SignSymbol": 0.0062, "Acc.Sky": 0.9757, "Acc.Tree": 0.9771}
{"mode": "train", "epoch": 139, "iter": 3050, "lr": 0.07208, "memory": 14777, "data_time": 0.52774, "decode.loss_ce": 0.06526, "decode.acc_seg": 96.6307, "aux_0.loss_ce": 0.06637, "aux_0.acc_seg": 96.62245, "aux_1.loss_ce": 0.08378, "aux_1.acc_seg": 95.76177, "aux_2.loss_ce": 0.12031, "aux_2.loss_dice": 0.252, "aux_2.acc_seg": 95.94271, "aux_3.loss_ce": 0.11045, "aux_3.acc_seg": 94.88938, "loss": 0.69818, "time": 1.23721}
{"mode": "train", "epoch": 141, "iter": 3100, "lr": 0.07162, "memory": 14777, "data_time": 0.20376, "decode.loss_ce": 0.06253, "decode.acc_seg": 96.6567, "aux_0.loss_ce": 0.06395, "aux_0.acc_seg": 96.63356, "aux_1.loss_ce": 0.08056, "aux_1.acc_seg": 95.80796, "aux_2.loss_ce": 0.11604, "aux_2.loss_dice": 0.24848, "aux_2.acc_seg": 96.1151, "aux_3.loss_ce": 0.10659, "aux_3.acc_seg": 94.90332, "loss": 0.67814, "time": 0.9102}
{"mode": "train", "epoch": 144, "iter": 3150, "lr": 0.07115, "memory": 14777, "data_time": 0.30571, "decode.loss_ce": 0.06509, "decode.acc_seg": 96.61989, "aux_0.loss_ce": 0.06554, "aux_0.acc_seg": 96.63222, "aux_1.loss_ce": 0.08323, "aux_1.acc_seg": 95.76607, "aux_2.loss_ce": 0.11786, "aux_2.loss_dice": 0.25042, "aux_2.acc_seg": 96.02418, "aux_3.loss_ce": 0.10757, "aux_3.acc_seg": 94.97409, "loss": 0.6897, "time": 1.01895}
{"mode": "train", "epoch": 146, "iter": 3200, "lr": 0.07068, "memory": 14777, "data_time": 0.20837, "decode.loss_ce": 0.06501, "decode.acc_seg": 96.66757, "aux_0.loss_ce": 0.0655, "aux_0.acc_seg": 96.68565, "aux_1.loss_ce": 0.08275, "aux_1.acc_seg": 95.85618, "aux_2.loss_ce": 0.11747, "aux_2.loss_dice": 0.25103, "aux_2.acc_seg": 96.06844, "aux_3.loss_ce": 0.10824, "aux_3.acc_seg": 95.04508, "loss": 0.68998, "time": 0.91694}
{"mode": "train", "epoch": 148, "iter": 3250, "lr": 0.07022, "memory": 14777, "data_time": 0.25626, "decode.loss_ce": 0.06189, "decode.acc_seg": 96.74891, "aux_0.loss_ce": 0.06308, "aux_0.acc_seg": 96.73563, "aux_1.loss_ce": 0.0801, "aux_1.acc_seg": 95.90181, "aux_2.loss_ce": 0.1185, "aux_2.loss_dice": 0.25065, "aux_2.acc_seg": 95.99207, "aux_3.loss_ce": 0.10767, "aux_3.acc_seg": 94.9844, "loss": 0.68188, "time": 0.97633}
