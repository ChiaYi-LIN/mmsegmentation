{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: None\nGCC: gcc (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0\nPyTorch: 1.12.1+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1+cu113\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.30.0+e7ed570", "seed": 278757241, "exp_name": "tuneprompt_1x16_720x960_10k_camvid_contextlength16_fixbackbone.py", "mmseg_version": "0.30.0+e7ed570", "config": "norm_cfg = dict(type='BN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=None,\n    backbone=dict(\n        type='STDCContextNet',\n        backbone_cfg=dict(\n            type='STDCNet',\n            stdc_type='STDCNet1',\n            in_channels=3,\n            channels=(32, 64, 256, 512, 1024),\n            bottleneck_type='cat',\n            num_convs=4,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            act_cfg=dict(type='ReLU'),\n            with_final_conv=False),\n        last_in_channels=(1035, 512),\n        out_channels=128,\n        ffm_cfg=dict(in_channels=384, out_channels=256, scale_factor=4),\n        textencoder_cfg=dict(\n            type='CLIPTextContextEncoder',\n            context_length=16,\n            encoder_type='RN50',\n            pretrained='./pretrained/RN50.pt'),\n        context_mode='CSC',\n        CLASSES=('Bicyclist', 'Building', 'Car', 'Column_Pole', 'Fence',\n                 'Pedestrian', 'Road', 'Sidewalk', 'SignSymbol', 'Sky',\n                 'Tree')),\n    decode_head=dict(\n        type='FCNHead',\n        in_channels=256,\n        channels=256,\n        num_convs=1,\n        num_classes=19,\n        in_index=3,\n        concat_input=False,\n        dropout_ratio=0.1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        align_corners=True,\n        sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=690000),\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=[\n        dict(\n            type='FCNHead',\n            in_channels=128,\n            channels=64,\n            num_convs=1,\n            num_classes=11,\n            in_index=2,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=False,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=690000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        dict(\n            type='FCNHead',\n            in_channels=128,\n            channels=64,\n            num_convs=1,\n            num_classes=11,\n            in_index=1,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=False,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=690000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        dict(\n            type='STDCHead',\n            in_channels=256,\n            channels=64,\n            num_convs=1,\n            num_classes=2,\n            boundary_threshold=0.1,\n            in_index=0,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=True,\n            loss_decode=[\n                dict(\n                    type='CrossEntropyLoss',\n                    loss_name='loss_ce',\n                    use_sigmoid=True,\n                    loss_weight=1.0),\n                dict(type='DiceLoss', loss_name='loss_dice', loss_weight=1.0)\n            ]),\n        dict(\n            type='VanillaHead',\n            temperature=0.07,\n            in_channels=11,\n            channels=1,\n            num_classes=11,\n            in_index=4,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=690000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0))\n    ],\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'),\n    init_cfg=dict(\n        type='Pretrained',\n        checkpoint=\n        './work_dirs/entextnet_stdc1_1x16_720x960_10k_camvid/best.pth'))\ndataset_type = 'CamVidDataset'\ndata_root = 'data/CamVid/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (720, 960)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(\n        type='Resize',\n        img_scale=(960, 720),\n        ratio_range=(0.5, 2.5),\n        scale_step_size=0.25),\n    dict(type='RandomCrop', crop_size=(720, 960), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(720, 960), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(960, 720),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=16,\n    workers_per_gpu=4,\n    train=dict(\n        type='CamVidDataset',\n        data_root='data/CamVid/',\n        img_dir='train',\n        ann_dir='train_labelIds',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize',\n                img_scale=(960, 720),\n                ratio_range=(0.5, 2.5),\n                scale_step_size=0.25),\n            dict(type='RandomCrop', crop_size=(720, 960), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(720, 960), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CamVidDataset',\n        data_root='data/CamVid/',\n        img_dir='val',\n        ann_dir='val_labelIds',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(960, 720),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CamVidDataset',\n        data_root='data/CamVid/',\n        img_dir='val',\n        ann_dir='val_labelIds',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(960, 720),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='SGD',\n    lr=0.1,\n    momentum=0.9,\n    weight_decay=0.0005,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            {\n                'backbone.backbone': dict(lr_mult=0.0),\n                'backbone.text_encoder': dict(lr_mult=0.0, decay_mult=0.0),\n                'backbone.contexts': dict(decay_mult=0.0),\n                '.bn.': dict(decay_mult=0.0)\n            })))\noptimizer_config = dict()\nlr_config = dict(\n    policy='poly',\n    power=0.9,\n    min_lr=1e-06,\n    by_epoch=False,\n    warmup='linear',\n    warmup_iters=200,\n    warmup_ratio=1e-05)\nrunner = dict(type='IterBasedRunner', max_iters=10000)\ncheckpoint_config = dict(by_epoch=False, interval=1000)\nevaluation = dict(interval=1000, metric='mIoU', pre_eval=True)\ncheckpoint = './work_dirs/entextnet_stdc1_1x16_720x960_10k_camvid/best.pth'\nwork_dir = './work_dirs/tuneprompt_1x16_720x960_10k_camvid_contextlength16_fixbackbone'\ngpu_ids = [0]\nauto_resume = False\ndevice = 'cuda'\nseed = 278757241\n", "CLASSES": ["Bicyclist", "Building", "Car", "Column_Pole", "Fence", "Pedestrian", "Road", "Sidewalk", "SignSymbol", "Sky", "Tree"], "PALETTE": [[0, 128, 192], [128, 0, 0], [64, 0, 128], [192, 192, 128], [64, 64, 128], [64, 64, 0], [128, 64, 128], [0, 0, 192], [192, 128, 128], [128, 128, 128], [128, 128, 0]]}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.02439, "memory": 14777, "data_time": 0.37475, "decode.loss_ce": 0.05858, "decode.acc_seg": 96.90457, "aux_0.loss_ce": 0.06041, "aux_0.acc_seg": 96.86313, "aux_1.loss_ce": 0.07767, "aux_1.acc_seg": 96.0048, "aux_2.loss_ce": 0.11767, "aux_2.loss_dice": 0.25028, "aux_2.acc_seg": 96.05441, "aux_3.loss_ce": 0.31703, "aux_3.acc_seg": 88.88592, "loss": 0.88165, "time": 1.42587}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.04906, "memory": 14777, "data_time": 0.23382, "decode.loss_ce": 0.06105, "decode.acc_seg": 96.78619, "aux_0.loss_ce": 0.06263, "aux_0.acc_seg": 96.75018, "aux_1.loss_ce": 0.07973, "aux_1.acc_seg": 95.91754, "aux_2.loss_ce": 0.11745, "aux_2.loss_dice": 0.25, "aux_2.acc_seg": 96.04366, "aux_3.loss_ce": 0.18352, "aux_3.acc_seg": 93.32005, "loss": 0.75438, "time": 0.947}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.0735, "memory": 14777, "data_time": 0.21637, "decode.loss_ce": 0.06619, "decode.acc_seg": 96.55467, "aux_0.loss_ce": 0.06715, "aux_0.acc_seg": 96.55272, "aux_1.loss_ce": 0.08376, "aux_1.acc_seg": 95.74021, "aux_2.loss_ce": 0.11837, "aux_2.loss_dice": 0.25103, "aux_2.acc_seg": 96.00201, "aux_3.loss_ce": 0.17996, "aux_3.acc_seg": 93.25622, "loss": 0.76647, "time": 0.94157}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.09772, "memory": 14777, "data_time": 0.30944, "decode.loss_ce": 0.0666, "decode.acc_seg": 96.53945, "aux_0.loss_ce": 0.06764, "aux_0.acc_seg": 96.53384, "aux_1.loss_ce": 0.0845, "aux_1.acc_seg": 95.68996, "aux_2.loss_ce": 0.11799, "aux_2.loss_dice": 0.25068, "aux_2.acc_seg": 96.00331, "aux_3.loss_ce": 0.16939, "aux_3.acc_seg": 93.48225, "loss": 0.7568, "time": 1.03236}
{"mode": "train", "epoch": 12, "iter": 250, "lr": 0.09776, "memory": 14777, "data_time": 0.22608, "decode.loss_ce": 0.06981, "decode.acc_seg": 96.36442, "aux_0.loss_ce": 0.07043, "aux_0.acc_seg": 96.37128, "aux_1.loss_ce": 0.08693, "aux_1.acc_seg": 95.56399, "aux_2.loss_ce": 0.11759, "aux_2.loss_dice": 0.25064, "aux_2.acc_seg": 96.04754, "aux_3.loss_ce": 0.16714, "aux_3.acc_seg": 93.578, "loss": 0.76254, "time": 0.94848}
{"mode": "train", "epoch": 14, "iter": 300, "lr": 0.0973, "memory": 14777, "data_time": 0.21586, "decode.loss_ce": 0.06798, "decode.acc_seg": 96.48911, "aux_0.loss_ce": 0.06916, "aux_0.acc_seg": 96.47983, "aux_1.loss_ce": 0.08653, "aux_1.acc_seg": 95.63314, "aux_2.loss_ce": 0.1198, "aux_2.loss_dice": 0.25251, "aux_2.acc_seg": 95.97708, "aux_3.loss_ce": 0.16737, "aux_3.acc_seg": 93.59739, "loss": 0.76335, "time": 0.93586}
{"mode": "train", "epoch": 16, "iter": 350, "lr": 0.09685, "memory": 14777, "data_time": 0.23714, "decode.loss_ce": 0.06889, "decode.acc_seg": 96.55316, "aux_0.loss_ce": 0.06987, "aux_0.acc_seg": 96.54109, "aux_1.loss_ce": 0.08686, "aux_1.acc_seg": 95.73714, "aux_2.loss_ce": 0.12061, "aux_2.loss_dice": 0.25369, "aux_2.acc_seg": 95.97074, "aux_3.loss_ce": 0.16409, "aux_3.acc_seg": 93.77384, "loss": 0.76401, "time": 0.96048}
{"mode": "train", "epoch": 19, "iter": 400, "lr": 0.0964, "memory": 14777, "data_time": 0.30787, "decode.loss_ce": 0.06605, "decode.acc_seg": 96.57251, "aux_0.loss_ce": 0.06684, "aux_0.acc_seg": 96.58823, "aux_1.loss_ce": 0.08365, "aux_1.acc_seg": 95.78117, "aux_2.loss_ce": 0.11753, "aux_2.loss_dice": 0.2517, "aux_2.acc_seg": 96.06302, "aux_3.loss_ce": 0.15465, "aux_3.acc_seg": 93.94996, "loss": 0.74041, "time": 1.02977}
{"mode": "train", "epoch": 21, "iter": 450, "lr": 0.09595, "memory": 14777, "data_time": 0.20645, "decode.loss_ce": 0.06655, "decode.acc_seg": 96.56454, "aux_0.loss_ce": 0.06759, "aux_0.acc_seg": 96.56142, "aux_1.loss_ce": 0.0832, "aux_1.acc_seg": 95.77903, "aux_2.loss_ce": 0.11858, "aux_2.loss_dice": 0.25058, "aux_2.acc_seg": 96.0112, "aux_3.loss_ce": 0.15036, "aux_3.acc_seg": 94.02094, "loss": 0.73686, "time": 0.92896}
{"mode": "train", "epoch": 23, "iter": 500, "lr": 0.0955, "memory": 14777, "data_time": 0.20798, "decode.loss_ce": 0.07088, "decode.acc_seg": 96.42295, "aux_0.loss_ce": 0.07194, "aux_0.acc_seg": 96.39523, "aux_1.loss_ce": 0.08814, "aux_1.acc_seg": 95.6072, "aux_2.loss_ce": 0.11899, "aux_2.loss_dice": 0.25136, "aux_2.acc_seg": 96.00876, "aux_3.loss_ce": 0.15293, "aux_3.acc_seg": 93.99061, "loss": 0.75424, "time": 0.92738}
{"mode": "train", "epoch": 25, "iter": 550, "lr": 0.09505, "memory": 14777, "data_time": 0.22151, "decode.loss_ce": 0.06712, "decode.acc_seg": 96.51787, "aux_0.loss_ce": 0.06846, "aux_0.acc_seg": 96.49821, "aux_1.loss_ce": 0.08481, "aux_1.acc_seg": 95.6785, "aux_2.loss_ce": 0.1196, "aux_2.loss_dice": 0.25119, "aux_2.acc_seg": 95.9636, "aux_3.loss_ce": 0.15089, "aux_3.acc_seg": 93.97201, "loss": 0.74207, "time": 0.94276}
{"mode": "train", "epoch": 28, "iter": 600, "lr": 0.09459, "memory": 14777, "data_time": 0.31521, "decode.loss_ce": 0.06888, "decode.acc_seg": 96.47448, "aux_0.loss_ce": 0.06983, "aux_0.acc_seg": 96.48455, "aux_1.loss_ce": 0.08695, "aux_1.acc_seg": 95.64268, "aux_2.loss_ce": 0.11854, "aux_2.loss_dice": 0.25116, "aux_2.acc_seg": 96.04439, "aux_3.loss_ce": 0.15158, "aux_3.acc_seg": 93.99648, "loss": 0.74694, "time": 1.04847}
{"mode": "train", "epoch": 30, "iter": 650, "lr": 0.09414, "memory": 14777, "data_time": 0.22772, "decode.loss_ce": 0.06737, "decode.acc_seg": 96.49141, "aux_0.loss_ce": 0.06854, "aux_0.acc_seg": 96.48386, "aux_1.loss_ce": 0.085, "aux_1.acc_seg": 95.67802, "aux_2.loss_ce": 0.11751, "aux_2.loss_dice": 0.25086, "aux_2.acc_seg": 96.09621, "aux_3.loss_ce": 0.1465, "aux_3.acc_seg": 94.13264, "loss": 0.73579, "time": 0.95868}
{"mode": "train", "epoch": 32, "iter": 700, "lr": 0.09369, "memory": 14777, "data_time": 0.22524, "decode.loss_ce": 0.06617, "decode.acc_seg": 96.48669, "aux_0.loss_ce": 0.06703, "aux_0.acc_seg": 96.49134, "aux_1.loss_ce": 0.08351, "aux_1.acc_seg": 95.65835, "aux_2.loss_ce": 0.11677, "aux_2.loss_dice": 0.24954, "aux_2.acc_seg": 96.0538, "aux_3.loss_ce": 0.14426, "aux_3.acc_seg": 94.12734, "loss": 0.72728, "time": 0.9539}
{"mode": "train", "epoch": 35, "iter": 750, "lr": 0.09323, "memory": 14777, "data_time": 0.29782, "decode.loss_ce": 0.06673, "decode.acc_seg": 96.52949, "aux_0.loss_ce": 0.06782, "aux_0.acc_seg": 96.52365, "aux_1.loss_ce": 0.08658, "aux_1.acc_seg": 95.64019, "aux_2.loss_ce": 0.11688, "aux_2.loss_dice": 0.24974, "aux_2.acc_seg": 96.09293, "aux_3.loss_ce": 0.14386, "aux_3.acc_seg": 94.12604, "loss": 0.7316, "time": 1.02593}
{"mode": "train", "epoch": 37, "iter": 800, "lr": 0.09278, "memory": 14777, "data_time": 0.2273, "decode.loss_ce": 0.07187, "decode.acc_seg": 96.31218, "aux_0.loss_ce": 0.07225, "aux_0.acc_seg": 96.34619, "aux_1.loss_ce": 0.08953, "aux_1.acc_seg": 95.51801, "aux_2.loss_ce": 0.11887, "aux_2.loss_dice": 0.25147, "aux_2.acc_seg": 96.02378, "aux_3.loss_ce": 0.14629, "aux_3.acc_seg": 94.15019, "loss": 0.75028, "time": 0.95215}
{"mode": "train", "epoch": 39, "iter": 850, "lr": 0.09233, "memory": 14777, "data_time": 0.23227, "decode.loss_ce": 0.06666, "decode.acc_seg": 96.54375, "aux_0.loss_ce": 0.06799, "aux_0.acc_seg": 96.52186, "aux_1.loss_ce": 0.08424, "aux_1.acc_seg": 95.72283, "aux_2.loss_ce": 0.11846, "aux_2.loss_dice": 0.25143, "aux_2.acc_seg": 96.02969, "aux_3.loss_ce": 0.1431, "aux_3.acc_seg": 94.23596, "loss": 0.73188, "time": 0.95988}
{"mode": "train", "epoch": 41, "iter": 900, "lr": 0.09187, "memory": 14777, "data_time": 0.24515, "decode.loss_ce": 0.06367, "decode.acc_seg": 96.68283, "aux_0.loss_ce": 0.06517, "aux_0.acc_seg": 96.6578, "aux_1.loss_ce": 0.08194, "aux_1.acc_seg": 95.82219, "aux_2.loss_ce": 0.11738, "aux_2.loss_dice": 0.24998, "aux_2.acc_seg": 96.06973, "aux_3.loss_ce": 0.14085, "aux_3.acc_seg": 94.4008, "loss": 0.719, "time": 0.96889}
{"mode": "train", "epoch": 44, "iter": 950, "lr": 0.09142, "memory": 14777, "data_time": 0.30698, "decode.loss_ce": 0.06925, "decode.acc_seg": 96.49861, "aux_0.loss_ce": 0.06982, "aux_0.acc_seg": 96.51906, "aux_1.loss_ce": 0.08702, "aux_1.acc_seg": 95.70518, "aux_2.loss_ce": 0.11859, "aux_2.loss_dice": 0.25152, "aux_2.acc_seg": 96.0616, "aux_3.loss_ce": 0.14483, "aux_3.acc_seg": 94.30531, "loss": 0.74103, "time": 1.0326}
{"mode": "train", "epoch": 46, "iter": 1000, "lr": 0.09096, "memory": 14777, "data_time": 0.23074, "decode.loss_ce": 0.06544, "decode.acc_seg": 96.57358, "aux_0.loss_ce": 0.06682, "aux_0.acc_seg": 96.55894, "aux_1.loss_ce": 0.08352, "aux_1.acc_seg": 95.73371, "aux_2.loss_ce": 0.11659, "aux_2.loss_dice": 0.24975, "aux_2.acc_seg": 96.09169, "aux_3.loss_ce": 0.14102, "aux_3.acc_seg": 94.32666, "loss": 0.72314, "time": 0.99611}
{"mode": "val", "epoch": 46, "iter": 101, "lr": 0.09096, "aAcc": 0.9656, "mIoU": 0.7535, "mAcc": 0.8041, "IoU.Bicyclist": 0.8568, "IoU.Building": 0.9384, "IoU.Car": 0.9266, "IoU.Column_Pole": 0.2759, "IoU.Fence": 0.8295, "IoU.Pedestrian": 0.6821, "IoU.Road": 0.9788, "IoU.Sidewalk": 0.9294, "IoU.SignSymbol": 0.0031, "IoU.Sky": 0.944, "IoU.Tree": 0.9236, "Acc.Bicyclist": 0.9287, "Acc.Building": 0.9555, "Acc.Car": 0.9584, "Acc.Column_Pole": 0.3351, "Acc.Fence": 0.896, "Acc.Pedestrian": 0.8506, "Acc.Road": 0.989, "Acc.Sidewalk": 0.972, "Acc.SignSymbol": 0.0031, "Acc.Sky": 0.9736, "Acc.Tree": 0.9833}
{"mode": "train", "epoch": 48, "iter": 1050, "lr": 0.09051, "memory": 14777, "data_time": 0.88037, "decode.loss_ce": 0.0669, "decode.acc_seg": 96.53484, "aux_0.loss_ce": 0.06809, "aux_0.acc_seg": 96.52902, "aux_1.loss_ce": 0.08533, "aux_1.acc_seg": 95.68383, "aux_2.loss_ce": 0.12029, "aux_2.loss_dice": 0.25449, "aux_2.acc_seg": 96.02778, "aux_3.loss_ce": 0.14004, "aux_3.acc_seg": 94.35772, "loss": 0.73515, "time": 1.60444}
{"mode": "train", "epoch": 50, "iter": 1100, "lr": 0.09005, "memory": 14777, "data_time": 0.21294, "decode.loss_ce": 0.06235, "decode.acc_seg": 96.69355, "aux_0.loss_ce": 0.0639, "aux_0.acc_seg": 96.65498, "aux_1.loss_ce": 0.07988, "aux_1.acc_seg": 95.85135, "aux_2.loss_ce": 0.11698, "aux_2.loss_dice": 0.24849, "aux_2.acc_seg": 96.03143, "aux_3.loss_ce": 0.14011, "aux_3.acc_seg": 94.40183, "loss": 0.7117, "time": 0.92387}
{"mode": "train", "epoch": 53, "iter": 1150, "lr": 0.0896, "memory": 14777, "data_time": 0.29817, "decode.loss_ce": 0.06372, "decode.acc_seg": 96.62649, "aux_0.loss_ce": 0.06485, "aux_0.acc_seg": 96.61665, "aux_1.loss_ce": 0.08112, "aux_1.acc_seg": 95.79235, "aux_2.loss_ce": 0.11671, "aux_2.loss_dice": 0.2491, "aux_2.acc_seg": 96.07201, "aux_3.loss_ce": 0.13667, "aux_3.acc_seg": 94.45598, "loss": 0.71217, "time": 1.027}
{"mode": "train", "epoch": 55, "iter": 1200, "lr": 0.08914, "memory": 14777, "data_time": 0.21821, "decode.loss_ce": 0.06319, "decode.acc_seg": 96.68755, "aux_0.loss_ce": 0.06387, "aux_0.acc_seg": 96.69541, "aux_1.loss_ce": 0.08056, "aux_1.acc_seg": 95.88124, "aux_2.loss_ce": 0.11702, "aux_2.loss_dice": 0.24985, "aux_2.acc_seg": 96.05861, "aux_3.loss_ce": 0.13225, "aux_3.acc_seg": 94.58861, "loss": 0.70675, "time": 0.93724}
{"mode": "train", "epoch": 57, "iter": 1250, "lr": 0.08869, "memory": 14777, "data_time": 0.20598, "decode.loss_ce": 0.06903, "decode.acc_seg": 96.54881, "aux_0.loss_ce": 0.06922, "aux_0.acc_seg": 96.56819, "aux_1.loss_ce": 0.08635, "aux_1.acc_seg": 95.72263, "aux_2.loss_ce": 0.11963, "aux_2.loss_dice": 0.25263, "aux_2.acc_seg": 95.99366, "aux_3.loss_ce": 0.15045, "aux_3.acc_seg": 94.14559, "loss": 0.74731, "time": 0.93462}
{"mode": "train", "epoch": 60, "iter": 1300, "lr": 0.08823, "memory": 14777, "data_time": 0.30128, "decode.loss_ce": 0.06504, "decode.acc_seg": 96.57472, "aux_0.loss_ce": 0.06559, "aux_0.acc_seg": 96.59192, "aux_1.loss_ce": 0.08169, "aux_1.acc_seg": 95.78767, "aux_2.loss_ce": 0.11546, "aux_2.loss_dice": 0.24942, "aux_2.acc_seg": 96.14865, "aux_3.loss_ce": 0.1421, "aux_3.acc_seg": 94.06316, "loss": 0.71931, "time": 1.0224}
{"mode": "train", "epoch": 62, "iter": 1350, "lr": 0.08777, "memory": 14777, "data_time": 0.22334, "decode.loss_ce": 0.06375, "decode.acc_seg": 96.61733, "aux_0.loss_ce": 0.06474, "aux_0.acc_seg": 96.6037, "aux_1.loss_ce": 0.081, "aux_1.acc_seg": 95.79925, "aux_2.loss_ce": 0.11602, "aux_2.loss_dice": 0.2483, "aux_2.acc_seg": 96.08302, "aux_3.loss_ce": 0.13883, "aux_3.acc_seg": 94.13659, "loss": 0.71264, "time": 0.93944}
{"mode": "train", "epoch": 64, "iter": 1400, "lr": 0.08732, "memory": 14777, "data_time": 0.23005, "decode.loss_ce": 0.06602, "decode.acc_seg": 96.55599, "aux_0.loss_ce": 0.06703, "aux_0.acc_seg": 96.56311, "aux_1.loss_ce": 0.08335, "aux_1.acc_seg": 95.75362, "aux_2.loss_ce": 0.12009, "aux_2.loss_dice": 0.25071, "aux_2.acc_seg": 95.94627, "aux_3.loss_ce": 0.13857, "aux_3.acc_seg": 94.17789, "loss": 0.72577, "time": 0.95007}
{"mode": "train", "epoch": 66, "iter": 1450, "lr": 0.08686, "memory": 14777, "data_time": 0.21755, "decode.loss_ce": 0.06383, "decode.acc_seg": 96.68525, "aux_0.loss_ce": 0.06456, "aux_0.acc_seg": 96.67969, "aux_1.loss_ce": 0.08114, "aux_1.acc_seg": 95.8597, "aux_2.loss_ce": 0.11591, "aux_2.loss_dice": 0.24952, "aux_2.acc_seg": 96.11363, "aux_3.loss_ce": 0.12882, "aux_3.acc_seg": 94.51965, "loss": 0.70378, "time": 0.93819}
{"mode": "train", "epoch": 69, "iter": 1500, "lr": 0.0864, "memory": 14777, "data_time": 0.28207, "decode.loss_ce": 0.06443, "decode.acc_seg": 96.61282, "aux_0.loss_ce": 0.06552, "aux_0.acc_seg": 96.60597, "aux_1.loss_ce": 0.08236, "aux_1.acc_seg": 95.78463, "aux_2.loss_ce": 0.1168, "aux_2.loss_dice": 0.25009, "aux_2.acc_seg": 96.09434, "aux_3.loss_ce": 0.13031, "aux_3.acc_seg": 94.55564, "loss": 0.7095, "time": 0.99918}
{"mode": "train", "epoch": 71, "iter": 1550, "lr": 0.08594, "memory": 14777, "data_time": 0.21803, "decode.loss_ce": 0.065, "decode.acc_seg": 96.61556, "aux_0.loss_ce": 0.06561, "aux_0.acc_seg": 96.63229, "aux_1.loss_ce": 0.08235, "aux_1.acc_seg": 95.81091, "aux_2.loss_ce": 0.1164, "aux_2.loss_dice": 0.25032, "aux_2.acc_seg": 96.1005, "aux_3.loss_ce": 0.13001, "aux_3.acc_seg": 94.70529, "loss": 0.70969, "time": 0.94033}
{"mode": "train", "epoch": 73, "iter": 1600, "lr": 0.08549, "memory": 14777, "data_time": 0.22576, "decode.loss_ce": 0.06496, "decode.acc_seg": 96.57032, "aux_0.loss_ce": 0.06617, "aux_0.acc_seg": 96.54913, "aux_1.loss_ce": 0.08279, "aux_1.acc_seg": 95.71677, "aux_2.loss_ce": 0.11793, "aux_2.loss_dice": 0.25065, "aux_2.acc_seg": 96.03106, "aux_3.loss_ce": 0.13339, "aux_3.acc_seg": 94.4034, "loss": 0.71589, "time": 0.9514}
{"mode": "train", "epoch": 75, "iter": 1650, "lr": 0.08503, "memory": 14777, "data_time": 0.2271, "decode.loss_ce": 0.0658, "decode.acc_seg": 96.58945, "aux_0.loss_ce": 0.06653, "aux_0.acc_seg": 96.60176, "aux_1.loss_ce": 0.08313, "aux_1.acc_seg": 95.80153, "aux_2.loss_ce": 0.11883, "aux_2.loss_dice": 0.25137, "aux_2.acc_seg": 96.04112, "aux_3.loss_ce": 0.13512, "aux_3.acc_seg": 94.5234, "loss": 0.72079, "time": 0.95127}
{"mode": "train", "epoch": 78, "iter": 1700, "lr": 0.08457, "memory": 14777, "data_time": 0.29175, "decode.loss_ce": 0.06467, "decode.acc_seg": 96.58976, "aux_0.loss_ce": 0.06561, "aux_0.acc_seg": 96.586, "aux_1.loss_ce": 0.08273, "aux_1.acc_seg": 95.74754, "aux_2.loss_ce": 0.11812, "aux_2.loss_dice": 0.24973, "aux_2.acc_seg": 96.00885, "aux_3.loss_ce": 0.13363, "aux_3.acc_seg": 94.485, "loss": 0.71449, "time": 1.01211}
{"mode": "train", "epoch": 80, "iter": 1750, "lr": 0.08411, "memory": 14777, "data_time": 0.21494, "decode.loss_ce": 0.06384, "decode.acc_seg": 96.66521, "aux_0.loss_ce": 0.06518, "aux_0.acc_seg": 96.65713, "aux_1.loss_ce": 0.08212, "aux_1.acc_seg": 95.81976, "aux_2.loss_ce": 0.11781, "aux_2.loss_dice": 0.25099, "aux_2.acc_seg": 96.02588, "aux_3.loss_ce": 0.13662, "aux_3.acc_seg": 94.39036, "loss": 0.71656, "time": 0.92976}
{"mode": "train", "epoch": 82, "iter": 1800, "lr": 0.08365, "memory": 14777, "data_time": 0.21307, "decode.loss_ce": 0.06307, "decode.acc_seg": 96.67658, "aux_0.loss_ce": 0.06425, "aux_0.acc_seg": 96.65823, "aux_1.loss_ce": 0.08016, "aux_1.acc_seg": 95.8624, "aux_2.loss_ce": 0.11824, "aux_2.loss_dice": 0.25012, "aux_2.acc_seg": 96.01767, "aux_3.loss_ce": 0.12585, "aux_3.acc_seg": 94.60383, "loss": 0.70168, "time": 0.93405}
{"mode": "train", "epoch": 85, "iter": 1850, "lr": 0.08319, "memory": 14777, "data_time": 0.2906, "decode.loss_ce": 0.06493, "decode.acc_seg": 96.68146, "aux_0.loss_ce": 0.06624, "aux_0.acc_seg": 96.664, "aux_1.loss_ce": 0.08276, "aux_1.acc_seg": 95.86699, "aux_2.loss_ce": 0.11907, "aux_2.loss_dice": 0.25161, "aux_2.acc_seg": 95.99418, "aux_3.loss_ce": 0.12991, "aux_3.acc_seg": 94.65224, "loss": 0.71453, "time": 1.00693}
{"mode": "train", "epoch": 87, "iter": 1900, "lr": 0.08273, "memory": 14777, "data_time": 0.22233, "decode.loss_ce": 0.06788, "decode.acc_seg": 96.55076, "aux_0.loss_ce": 0.06893, "aux_0.acc_seg": 96.54441, "aux_1.loss_ce": 0.08616, "aux_1.acc_seg": 95.70922, "aux_2.loss_ce": 0.11809, "aux_2.loss_dice": 0.25192, "aux_2.acc_seg": 96.07059, "aux_3.loss_ce": 0.13326, "aux_3.acc_seg": 94.52615, "loss": 0.72625, "time": 0.94816}
{"mode": "train", "epoch": 89, "iter": 1950, "lr": 0.08227, "memory": 14777, "data_time": 0.22201, "decode.loss_ce": 0.06772, "decode.acc_seg": 96.47083, "aux_0.loss_ce": 0.06873, "aux_0.acc_seg": 96.46463, "aux_1.loss_ce": 0.0858, "aux_1.acc_seg": 95.62763, "aux_2.loss_ce": 0.12033, "aux_2.loss_dice": 0.25233, "aux_2.acc_seg": 95.97358, "aux_3.loss_ce": 0.1352, "aux_3.acc_seg": 94.41785, "loss": 0.73011, "time": 0.93685}
{"mode": "train", "epoch": 91, "iter": 2000, "lr": 0.08181, "memory": 14777, "data_time": 0.20013, "decode.loss_ce": 0.06446, "decode.acc_seg": 96.64466, "aux_0.loss_ce": 0.06556, "aux_0.acc_seg": 96.62851, "aux_1.loss_ce": 0.08283, "aux_1.acc_seg": 95.79757, "aux_2.loss_ce": 0.11827, "aux_2.loss_dice": 0.25151, "aux_2.acc_seg": 96.04272, "aux_3.loss_ce": 0.1378, "aux_3.acc_seg": 94.48816, "loss": 0.72043, "time": 0.95623}
{"mode": "val", "epoch": 91, "iter": 101, "lr": 0.08181, "aAcc": 0.9651, "mIoU": 0.7472, "mAcc": 0.7924, "IoU.Bicyclist": 0.848, "IoU.Building": 0.9414, "IoU.Car": 0.9182, "IoU.Column_Pole": 0.248, "IoU.Fence": 0.8281, "IoU.Pedestrian": 0.6686, "IoU.Road": 0.9758, "IoU.Sidewalk": 0.9191, "IoU.SignSymbol": 0.0012, "IoU.Sky": 0.9421, "IoU.Tree": 0.9287, "Acc.Bicyclist": 0.8847, "Acc.Building": 0.9618, "Acc.Car": 0.9309, "Acc.Column_Pole": 0.287, "Acc.Fence": 0.9494, "Acc.Pedestrian": 0.7963, "Acc.Road": 0.9866, "Acc.Sidewalk": 0.9727, "Acc.SignSymbol": 0.0012, "Acc.Sky": 0.9618, "Acc.Tree": 0.9835}
{"mode": "train", "epoch": 94, "iter": 2050, "lr": 0.08135, "memory": 14777, "data_time": 0.59535, "decode.loss_ce": 0.0645, "decode.acc_seg": 96.58301, "aux_0.loss_ce": 0.06534, "aux_0.acc_seg": 96.58734, "aux_1.loss_ce": 0.08223, "aux_1.acc_seg": 95.74019, "aux_2.loss_ce": 0.11696, "aux_2.loss_dice": 0.24932, "aux_2.acc_seg": 96.0537, "aux_3.loss_ce": 0.13104, "aux_3.acc_seg": 94.50404, "loss": 0.7094, "time": 1.31052}
{"mode": "train", "epoch": 96, "iter": 2100, "lr": 0.08089, "memory": 14777, "data_time": 0.20741, "decode.loss_ce": 0.06653, "decode.acc_seg": 96.54744, "aux_0.loss_ce": 0.0676, "aux_0.acc_seg": 96.5372, "aux_1.loss_ce": 0.08389, "aux_1.acc_seg": 95.74559, "aux_2.loss_ce": 0.11782, "aux_2.loss_dice": 0.25036, "aux_2.acc_seg": 96.03948, "aux_3.loss_ce": 0.12922, "aux_3.acc_seg": 94.5512, "loss": 0.71542, "time": 0.92607}
{"mode": "train", "epoch": 98, "iter": 2150, "lr": 0.08043, "memory": 14777, "data_time": 0.20715, "decode.loss_ce": 0.06569, "decode.acc_seg": 96.64919, "aux_0.loss_ce": 0.06609, "aux_0.acc_seg": 96.66484, "aux_1.loss_ce": 0.08303, "aux_1.acc_seg": 95.85141, "aux_2.loss_ce": 0.1183, "aux_2.loss_dice": 0.25168, "aux_2.acc_seg": 96.04823, "aux_3.loss_ce": 0.13137, "aux_3.acc_seg": 94.63802, "loss": 0.71615, "time": 0.93087}
{"mode": "train", "epoch": 100, "iter": 2200, "lr": 0.07997, "memory": 14777, "data_time": 0.22698, "decode.loss_ce": 0.06305, "decode.acc_seg": 96.67893, "aux_0.loss_ce": 0.06418, "aux_0.acc_seg": 96.66467, "aux_1.loss_ce": 0.081, "aux_1.acc_seg": 95.8268, "aux_2.loss_ce": 0.11795, "aux_2.loss_dice": 0.24978, "aux_2.acc_seg": 95.99519, "aux_3.loss_ce": 0.12644, "aux_3.acc_seg": 94.65259, "loss": 0.70239, "time": 0.95131}
{"mode": "train", "epoch": 103, "iter": 2250, "lr": 0.07951, "memory": 14777, "data_time": 0.30279, "decode.loss_ce": 0.06328, "decode.acc_seg": 96.71967, "aux_0.loss_ce": 0.06446, "aux_0.acc_seg": 96.68987, "aux_1.loss_ce": 0.08152, "aux_1.acc_seg": 95.86204, "aux_2.loss_ce": 0.11818, "aux_2.loss_dice": 0.25041, "aux_2.acc_seg": 96.0005, "aux_3.loss_ce": 0.1245, "aux_3.acc_seg": 94.74367, "loss": 0.70235, "time": 1.02425}
{"mode": "train", "epoch": 105, "iter": 2300, "lr": 0.07905, "memory": 14777, "data_time": 0.2081, "decode.loss_ce": 0.06382, "decode.acc_seg": 96.68277, "aux_0.loss_ce": 0.06462, "aux_0.acc_seg": 96.67756, "aux_1.loss_ce": 0.08196, "aux_1.acc_seg": 95.83171, "aux_2.loss_ce": 0.11794, "aux_2.loss_dice": 0.25087, "aux_2.acc_seg": 96.046, "aux_3.loss_ce": 0.12834, "aux_3.acc_seg": 94.6786, "loss": 0.70756, "time": 0.93232}
{"mode": "train", "epoch": 107, "iter": 2350, "lr": 0.07859, "memory": 14777, "data_time": 0.2053, "decode.loss_ce": 0.06392, "decode.acc_seg": 96.6527, "aux_0.loss_ce": 0.06499, "aux_0.acc_seg": 96.64726, "aux_1.loss_ce": 0.082, "aux_1.acc_seg": 95.81113, "aux_2.loss_ce": 0.11866, "aux_2.loss_dice": 0.251, "aux_2.acc_seg": 96.01994, "aux_3.loss_ce": 0.12988, "aux_3.acc_seg": 94.62704, "loss": 0.71045, "time": 0.92575}
