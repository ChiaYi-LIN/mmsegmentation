{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: None\nGCC: gcc (Ubuntu 11.3.0-1ubuntu1~22.04.1) 11.3.0\nPyTorch: 1.12.1+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1+cu113\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.30.0+7bf68e5", "seed": 2079351515, "exp_name": "tuneprompt_stage3_EN_1x24_512x1024_scale0.5_60k_cityscapes_contextlength16.py", "mmseg_version": "0.30.0+7bf68e5", "config": "norm_cfg = dict(type='BN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=None,\n    backbone=dict(\n        type='STDCContextNet',\n        backbone_cfg=dict(\n            type='STDCNet',\n            stdc_type='STDCNet1',\n            in_channels=3,\n            channels=(32, 64, 256, 512, 1024),\n            bottleneck_type='cat',\n            num_convs=4,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            act_cfg=dict(type='ReLU'),\n            with_final_conv=False),\n        last_in_channels=(1043, 512),\n        out_channels=128,\n        ffm_cfg=dict(in_channels=384, out_channels=256, scale_factor=4),\n        textencoder_cfg=dict(\n            type='CLIPTextContextEncoder',\n            context_length=16,\n            encoder_type='RN50',\n            pretrained='./pretrained/RN50.pt'),\n        context_mode='CSC',\n        CLASSES=('road', 'sidewalk', 'building', 'wall', 'fence', 'pole',\n                 'traffic light', 'traffic sign', 'vegetation', 'terrain',\n                 'sky', 'person', 'rider', 'car', 'truck', 'bus', 'train',\n                 'motorcycle', 'bicycle')),\n    decode_head=dict(\n        type='FCNHead',\n        in_channels=256,\n        channels=256,\n        num_convs=1,\n        num_classes=19,\n        in_index=3,\n        concat_input=False,\n        dropout_ratio=0.1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        align_corners=True,\n        sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=[\n        dict(\n            type='FCNHead',\n            in_channels=128,\n            channels=64,\n            num_convs=1,\n            num_classes=19,\n            in_index=2,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=False,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        dict(\n            type='FCNHead',\n            in_channels=128,\n            channels=64,\n            num_convs=1,\n            num_classes=19,\n            in_index=1,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=False,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        dict(\n            type='STDCHead',\n            in_channels=256,\n            channels=64,\n            num_convs=1,\n            num_classes=2,\n            boundary_threshold=0.1,\n            in_index=0,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=True,\n            loss_decode=[\n                dict(\n                    type='CrossEntropyLoss',\n                    loss_name='loss_ce',\n                    use_sigmoid=True,\n                    loss_weight=1.0),\n                dict(type='DiceLoss', loss_name='loss_dice', loss_weight=1.0)\n            ]),\n        dict(\n            type='VanillaHead',\n            temperature=0.07,\n            in_channels=19,\n            channels=1,\n            num_classes=19,\n            in_index=4,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0))\n    ],\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'),\n    init_cfg=dict(\n        type='Pretrained',\n        checkpoint=\n        './work_dirs/tuneprompt_EN_1x24_512x1024_scale0.5_60k_cityscapes_contextlength16_fixbackbone/latest.pth'\n    ))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(\n        type='Resize',\n        img_scale=(2048, 1024),\n        ratio_range=(0.125, 1.5),\n        scale_step_size=0.125),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=24,\n    workers_per_gpu=4,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize',\n                img_scale=(2048, 1024),\n                ratio_range=(0.125, 1.5),\n                scale_step_size=0.125),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='SGD',\n    lr=0.001,\n    momentum=0.9,\n    weight_decay=0.0005,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            {\n                'backbone.backbone': dict(lr_mult=0.1),\n                'backbone.text_encoder': dict(lr_mult=0.0, decay_mult=0.0),\n                'backbone.contexts': dict(lr_mult=0.1, decay_mult=0.0),\n                '.bn.': dict(decay_mult=0.0)\n            })))\noptimizer_config = dict()\nlr_config = dict(\n    policy='poly',\n    power=0.9,\n    min_lr=1e-06,\n    by_epoch=False,\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=1e-05)\nrunner = dict(type='IterBasedRunner', max_iters=60000)\ncheckpoint_config = dict(by_epoch=False, interval=1500)\nevaluation = dict(\n    interval=1500, metric='mIoU', pre_eval=True, save_best='mIoU')\ncheckpoint = './work_dirs/tuneprompt_EN_1x24_512x1024_scale0.5_60k_cityscapes_contextlength16_fixbackbone/latest.pth'\nwork_dir = './work_dirs/tuneprompt_stage3_EN_1x24_512x1024_scale0.5_60k_cityscapes_contextlength16'\ngpu_ids = [0]\nauto_resume = False\ndevice = 'cuda'\nseed = 2079351515\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]], "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 5e-05, "memory": 19944, "data_time": 0.15327, "decode.loss_ce": 0.07075, "decode.acc_seg": 96.56004, "aux_0.loss_ce": 0.07423, "aux_0.acc_seg": 96.42034, "aux_1.loss_ce": 0.09065, "aux_1.acc_seg": 95.62423, "aux_2.loss_ce": 0.08727, "aux_2.loss_dice": 0.23084, "aux_2.acc_seg": 97.28356, "aux_3.loss_ce": 0.1254, "aux_3.acc_seg": 94.21595, "loss": 0.67914, "time": 1.39981}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0001, "memory": 19944, "data_time": 0.07335, "decode.loss_ce": 0.07344, "decode.acc_seg": 96.47785, "aux_0.loss_ce": 0.07695, "aux_0.acc_seg": 96.35261, "aux_1.loss_ce": 0.09261, "aux_1.acc_seg": 95.60135, "aux_2.loss_ce": 0.08709, "aux_2.loss_dice": 0.23189, "aux_2.acc_seg": 97.33359, "aux_3.loss_ce": 0.12817, "aux_3.acc_seg": 94.19548, "loss": 0.69014, "time": 1.13738}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00015, "memory": 19944, "data_time": 0.18303, "decode.loss_ce": 0.07068, "decode.acc_seg": 96.56643, "aux_0.loss_ce": 0.07413, "aux_0.acc_seg": 96.43563, "aux_1.loss_ce": 0.09006, "aux_1.acc_seg": 95.65529, "aux_2.loss_ce": 0.0869, "aux_2.loss_dice": 0.2296, "aux_2.acc_seg": 97.31403, "aux_3.loss_ce": 0.12501, "aux_3.acc_seg": 94.22438, "loss": 0.67637, "time": 1.23443}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0002, "memory": 19944, "data_time": 0.08008, "decode.loss_ce": 0.07314, "decode.acc_seg": 96.52513, "aux_0.loss_ce": 0.07653, "aux_0.acc_seg": 96.40062, "aux_1.loss_ce": 0.09266, "aux_1.acc_seg": 95.62941, "aux_2.loss_ce": 0.08848, "aux_2.loss_dice": 0.23251, "aux_2.acc_seg": 97.29226, "aux_3.loss_ce": 0.12776, "aux_3.acc_seg": 94.23643, "loss": 0.69109, "time": 1.15051}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.00025, "memory": 19944, "data_time": 0.18575, "decode.loss_ce": 0.07311, "decode.acc_seg": 96.45555, "aux_0.loss_ce": 0.07692, "aux_0.acc_seg": 96.31312, "aux_1.loss_ce": 0.09309, "aux_1.acc_seg": 95.51464, "aux_2.loss_ce": 0.08766, "aux_2.loss_dice": 0.23107, "aux_2.acc_seg": 97.29949, "aux_3.loss_ce": 0.12863, "aux_3.acc_seg": 94.08069, "loss": 0.69048, "time": 1.2569}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.0003, "memory": 19944, "data_time": 0.07276, "decode.loss_ce": 0.07183, "decode.acc_seg": 96.51406, "aux_0.loss_ce": 0.07518, "aux_0.acc_seg": 96.38119, "aux_1.loss_ce": 0.09087, "aux_1.acc_seg": 95.62379, "aux_2.loss_ce": 0.08681, "aux_2.loss_dice": 0.22967, "aux_2.acc_seg": 97.3184, "aux_3.loss_ce": 0.12503, "aux_3.acc_seg": 94.26152, "loss": 0.67939, "time": 1.12951}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.00035, "memory": 19944, "data_time": 0.07621, "decode.loss_ce": 0.07182, "decode.acc_seg": 96.5111, "aux_0.loss_ce": 0.07531, "aux_0.acc_seg": 96.37727, "aux_1.loss_ce": 0.09139, "aux_1.acc_seg": 95.59809, "aux_2.loss_ce": 0.08649, "aux_2.loss_dice": 0.229, "aux_2.acc_seg": 97.32163, "aux_3.loss_ce": 0.12539, "aux_3.acc_seg": 94.22981, "loss": 0.67941, "time": 1.13355}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.0004, "memory": 19944, "data_time": 0.18082, "decode.loss_ce": 0.07052, "decode.acc_seg": 96.49992, "aux_0.loss_ce": 0.07396, "aux_0.acc_seg": 96.36103, "aux_1.loss_ce": 0.08927, "aux_1.acc_seg": 95.61074, "aux_2.loss_ce": 0.08467, "aux_2.loss_dice": 0.22828, "aux_2.acc_seg": 97.40095, "aux_3.loss_ce": 0.12218, "aux_3.acc_seg": 94.23017, "loss": 0.66889, "time": 1.24311}
{"mode": "train", "epoch": 4, "iter": 450, "lr": 0.00045, "memory": 19944, "data_time": 0.06989, "decode.loss_ce": 0.07612, "decode.acc_seg": 96.40922, "aux_0.loss_ce": 0.07988, "aux_0.acc_seg": 96.26553, "aux_1.loss_ce": 0.09672, "aux_1.acc_seg": 95.4615, "aux_2.loss_ce": 0.09063, "aux_2.loss_dice": 0.23389, "aux_2.acc_seg": 97.18462, "aux_3.loss_ce": 0.13343, "aux_3.acc_seg": 94.03116, "loss": 0.71068, "time": 1.12404}
{"mode": "train", "epoch": 5, "iter": 500, "lr": 0.0005, "memory": 19944, "data_time": 0.17677, "decode.loss_ce": 0.07378, "decode.acc_seg": 96.55006, "aux_0.loss_ce": 0.0776, "aux_0.acc_seg": 96.40849, "aux_1.loss_ce": 0.09372, "aux_1.acc_seg": 95.63946, "aux_2.loss_ce": 0.08902, "aux_2.loss_dice": 0.2341, "aux_2.acc_seg": 97.27407, "aux_3.loss_ce": 0.12946, "aux_3.acc_seg": 94.27136, "loss": 0.69768, "time": 1.23105}
{"mode": "train", "epoch": 5, "iter": 550, "lr": 0.00054, "memory": 19944, "data_time": 0.06466, "decode.loss_ce": 0.07281, "decode.acc_seg": 96.47151, "aux_0.loss_ce": 0.07653, "aux_0.acc_seg": 96.32951, "aux_1.loss_ce": 0.09293, "aux_1.acc_seg": 95.53971, "aux_2.loss_ce": 0.08867, "aux_2.loss_dice": 0.23128, "aux_2.acc_seg": 97.24291, "aux_3.loss_ce": 0.12748, "aux_3.acc_seg": 94.12286, "loss": 0.6897, "time": 1.10717}
{"mode": "train", "epoch": 5, "iter": 600, "lr": 0.00059, "memory": 19944, "data_time": 0.0605, "decode.loss_ce": 0.07217, "decode.acc_seg": 96.51103, "aux_0.loss_ce": 0.07576, "aux_0.acc_seg": 96.37578, "aux_1.loss_ce": 0.09193, "aux_1.acc_seg": 95.57844, "aux_2.loss_ce": 0.08757, "aux_2.loss_dice": 0.2307, "aux_2.acc_seg": 97.28852, "aux_3.loss_ce": 0.12608, "aux_3.acc_seg": 94.22903, "loss": 0.68421, "time": 1.0997}
{"mode": "train", "epoch": 6, "iter": 650, "lr": 0.00064, "memory": 19944, "data_time": 0.18049, "decode.loss_ce": 0.07117, "decode.acc_seg": 96.51161, "aux_0.loss_ce": 0.07477, "aux_0.acc_seg": 96.37228, "aux_1.loss_ce": 0.09096, "aux_1.acc_seg": 95.57467, "aux_2.loss_ce": 0.08783, "aux_2.loss_dice": 0.22975, "aux_2.acc_seg": 97.26361, "aux_3.loss_ce": 0.12497, "aux_3.acc_seg": 94.19407, "loss": 0.67946, "time": 1.24135}
