{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: None\nGCC: gcc (Ubuntu 11.3.0-1ubuntu1~22.04.1) 11.3.0\nPyTorch: 1.12.1+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1+cu113\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.30.0+7bf68e5", "seed": 1926731403, "exp_name": "tuneprompt_stage3_EN_1x24_512x1024_scale0.5_60k_cityscapes_contextlength16.py", "mmseg_version": "0.30.0+7bf68e5", "config": "norm_cfg = dict(type='BN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=None,\n    backbone=dict(\n        type='STDCContextNet',\n        backbone_cfg=dict(\n            type='STDCNet',\n            stdc_type='STDCNet1',\n            in_channels=3,\n            channels=(32, 64, 256, 512, 1024),\n            bottleneck_type='cat',\n            num_convs=4,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            act_cfg=dict(type='ReLU'),\n            with_final_conv=False),\n        last_in_channels=(1043, 512),\n        out_channels=128,\n        ffm_cfg=dict(in_channels=384, out_channels=256, scale_factor=4),\n        textencoder_cfg=dict(\n            type='CLIPTextContextEncoder',\n            context_length=16,\n            encoder_type='RN50',\n            pretrained='./pretrained/RN50.pt'),\n        context_mode='CSC',\n        CLASSES=('road', 'sidewalk', 'building', 'wall', 'fence', 'pole',\n                 'traffic light', 'traffic sign', 'vegetation', 'terrain',\n                 'sky', 'person', 'rider', 'car', 'truck', 'bus', 'train',\n                 'motorcycle', 'bicycle')),\n    decode_head=dict(\n        type='FCNHead',\n        in_channels=256,\n        channels=256,\n        num_convs=1,\n        num_classes=19,\n        in_index=3,\n        concat_input=False,\n        dropout_ratio=0.1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        align_corners=True,\n        sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=[\n        dict(\n            type='FCNHead',\n            in_channels=128,\n            channels=64,\n            num_convs=1,\n            num_classes=19,\n            in_index=2,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=False,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        dict(\n            type='FCNHead',\n            in_channels=128,\n            channels=64,\n            num_convs=1,\n            num_classes=19,\n            in_index=1,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=False,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        dict(\n            type='STDCHead',\n            in_channels=256,\n            channels=64,\n            num_convs=1,\n            num_classes=2,\n            boundary_threshold=0.1,\n            in_index=0,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=True,\n            loss_decode=[\n                dict(\n                    type='CrossEntropyLoss',\n                    loss_name='loss_ce',\n                    use_sigmoid=True,\n                    loss_weight=1.0),\n                dict(type='DiceLoss', loss_name='loss_dice', loss_weight=1.0)\n            ]),\n        dict(\n            type='VanillaHead',\n            temperature=0.07,\n            in_channels=19,\n            channels=1,\n            num_classes=19,\n            in_index=4,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0))\n    ],\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'),\n    init_cfg=dict(\n        type='Pretrained',\n        checkpoint=\n        './work_dirs/tuneprompt_EN_1x24_512x1024_scale0.5_60k_cityscapes_contextlength16_fixbackbone/latest.pth'\n    ))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(\n        type='Resize',\n        img_scale=(2048, 1024),\n        ratio_range=(0.125, 1.5),\n        scale_step_size=0.125),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=24,\n    workers_per_gpu=4,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize',\n                img_scale=(2048, 1024),\n                ratio_range=(0.125, 1.5),\n                scale_step_size=0.125),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='SGD',\n    lr=0.001,\n    momentum=0.9,\n    weight_decay=0.0005,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            {\n                'backbone.backbone': dict(lr_mult=0.1),\n                'backbone.text_encoder': dict(lr_mult=0.0, decay_mult=0.0),\n                'backbone.contexts': dict(lr_mult=0.1, decay_mult=0.0),\n                '.bn.': dict(decay_mult=0.0)\n            })))\noptimizer_config = dict()\nlr_config = dict(\n    policy='poly',\n    power=0.9,\n    min_lr=1e-06,\n    by_epoch=False,\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=1e-05)\nrunner = dict(type='IterBasedRunner', max_iters=60000)\ncheckpoint_config = dict(by_epoch=False, interval=1500)\nevaluation = dict(\n    interval=1500, metric='mIoU', pre_eval=True, save_best='mIoU')\ncheckpoint = './work_dirs/tuneprompt_EN_1x24_512x1024_scale0.5_60k_cityscapes_contextlength16_fixbackbone/latest.pth'\nwork_dir = './work_dirs/tuneprompt_stage3_EN_1x24_512x1024_scale0.5_60k_cityscapes_contextlength16'\ngpu_ids = [0]\nauto_resume = False\ndevice = 'cuda'\nseed = 1926731403\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]], "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 5e-05, "memory": 19944, "data_time": 0.7419, "decode.loss_ce": 0.07348, "decode.acc_seg": 96.45629, "aux_0.loss_ce": 0.07709, "aux_0.acc_seg": 96.3123, "aux_1.loss_ce": 0.09363, "aux_1.acc_seg": 95.5172, "aux_2.loss_ce": 0.08871, "aux_2.loss_dice": 0.23232, "aux_2.acc_seg": 97.25609, "aux_3.loss_ce": 0.13029, "aux_3.acc_seg": 94.06748, "loss": 0.69552, "time": 2.14449}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0001, "memory": 19944, "data_time": 0.07275, "decode.loss_ce": 0.07327, "decode.acc_seg": 96.4907, "aux_0.loss_ce": 0.07683, "aux_0.acc_seg": 96.35829, "aux_1.loss_ce": 0.09218, "aux_1.acc_seg": 95.61297, "aux_2.loss_ce": 0.08628, "aux_2.loss_dice": 0.23023, "aux_2.acc_seg": 97.34784, "aux_3.loss_ce": 0.1272, "aux_3.acc_seg": 94.20055, "loss": 0.68601, "time": 1.26055}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00015, "memory": 19944, "data_time": 0.17834, "decode.loss_ce": 0.07113, "decode.acc_seg": 96.51156, "aux_0.loss_ce": 0.07466, "aux_0.acc_seg": 96.37074, "aux_1.loss_ce": 0.09065, "aux_1.acc_seg": 95.58395, "aux_2.loss_ce": 0.08725, "aux_2.loss_dice": 0.22887, "aux_2.acc_seg": 97.29716, "aux_3.loss_ce": 0.12561, "aux_3.acc_seg": 94.14753, "loss": 0.67819, "time": 1.36057}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0002, "memory": 19944, "data_time": 0.07438, "decode.loss_ce": 0.07162, "decode.acc_seg": 96.53963, "aux_0.loss_ce": 0.07543, "aux_0.acc_seg": 96.40333, "aux_1.loss_ce": 0.09232, "aux_1.acc_seg": 95.6027, "aux_2.loss_ce": 0.0878, "aux_2.loss_dice": 0.23043, "aux_2.acc_seg": 97.27833, "aux_3.loss_ce": 0.12791, "aux_3.acc_seg": 94.16536, "loss": 0.68551, "time": 1.25091}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.00025, "memory": 19944, "data_time": 0.17904, "decode.loss_ce": 0.07214, "decode.acc_seg": 96.54031, "aux_0.loss_ce": 0.07578, "aux_0.acc_seg": 96.4091, "aux_1.loss_ce": 0.09183, "aux_1.acc_seg": 95.63335, "aux_2.loss_ce": 0.08788, "aux_2.loss_dice": 0.23186, "aux_2.acc_seg": 97.27298, "aux_3.loss_ce": 0.12697, "aux_3.acc_seg": 94.23245, "loss": 0.68647, "time": 1.36743}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.0003, "memory": 19944, "data_time": 0.07116, "decode.loss_ce": 0.07166, "decode.acc_seg": 96.45399, "aux_0.loss_ce": 0.07509, "aux_0.acc_seg": 96.31674, "aux_1.loss_ce": 0.09076, "aux_1.acc_seg": 95.53716, "aux_2.loss_ce": 0.08487, "aux_2.loss_dice": 0.22773, "aux_2.acc_seg": 97.38054, "aux_3.loss_ce": 0.12504, "aux_3.acc_seg": 94.1239, "loss": 0.67515, "time": 1.26344}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.00035, "memory": 19944, "data_time": 0.06963, "decode.loss_ce": 0.07186, "decode.acc_seg": 96.54194, "aux_0.loss_ce": 0.07547, "aux_0.acc_seg": 96.40407, "aux_1.loss_ce": 0.09145, "aux_1.acc_seg": 95.63536, "aux_2.loss_ce": 0.08749, "aux_2.loss_dice": 0.23219, "aux_2.acc_seg": 97.30523, "aux_3.loss_ce": 0.12642, "aux_3.acc_seg": 94.23718, "loss": 0.68489, "time": 1.24901}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.0004, "memory": 19944, "data_time": 0.17946, "decode.loss_ce": 0.07286, "decode.acc_seg": 96.45857, "aux_0.loss_ce": 0.07636, "aux_0.acc_seg": 96.32536, "aux_1.loss_ce": 0.09282, "aux_1.acc_seg": 95.52208, "aux_2.loss_ce": 0.08726, "aux_2.loss_dice": 0.22954, "aux_2.acc_seg": 97.2998, "aux_3.loss_ce": 0.12854, "aux_3.acc_seg": 94.08942, "loss": 0.68738, "time": 1.36546}
{"mode": "train", "epoch": 4, "iter": 450, "lr": 0.00045, "memory": 19944, "data_time": 0.06821, "decode.loss_ce": 0.07197, "decode.acc_seg": 96.5311, "aux_0.loss_ce": 0.07567, "aux_0.acc_seg": 96.38797, "aux_1.loss_ce": 0.09162, "aux_1.acc_seg": 95.61044, "aux_2.loss_ce": 0.08768, "aux_2.loss_dice": 0.23028, "aux_2.acc_seg": 97.2992, "aux_3.loss_ce": 0.12626, "aux_3.acc_seg": 94.22469, "loss": 0.68349, "time": 1.24913}
{"mode": "train", "epoch": 5, "iter": 500, "lr": 0.0005, "memory": 19944, "data_time": 0.17822, "decode.loss_ce": 0.07155, "decode.acc_seg": 96.45713, "aux_0.loss_ce": 0.07508, "aux_0.acc_seg": 96.31889, "aux_1.loss_ce": 0.09086, "aux_1.acc_seg": 95.53469, "aux_2.loss_ce": 0.08691, "aux_2.loss_dice": 0.23007, "aux_2.acc_seg": 97.32023, "aux_3.loss_ce": 0.12499, "aux_3.acc_seg": 94.11731, "loss": 0.67946, "time": 1.3404}
{"mode": "train", "epoch": 5, "iter": 550, "lr": 0.00054, "memory": 19944, "data_time": 0.07706, "decode.loss_ce": 0.0736, "decode.acc_seg": 96.50599, "aux_0.loss_ce": 0.07723, "aux_0.acc_seg": 96.36965, "aux_1.loss_ce": 0.09369, "aux_1.acc_seg": 95.57723, "aux_2.loss_ce": 0.08866, "aux_2.loss_dice": 0.23239, "aux_2.acc_seg": 97.27569, "aux_3.loss_ce": 0.12811, "aux_3.acc_seg": 94.21954, "loss": 0.69368, "time": 1.26191}
{"mode": "train", "epoch": 5, "iter": 600, "lr": 0.00059, "memory": 19944, "data_time": 0.0745, "decode.loss_ce": 0.0715, "decode.acc_seg": 96.52003, "aux_0.loss_ce": 0.07511, "aux_0.acc_seg": 96.37767, "aux_1.loss_ce": 0.09076, "aux_1.acc_seg": 95.60195, "aux_2.loss_ce": 0.0864, "aux_2.loss_dice": 0.22943, "aux_2.acc_seg": 97.32567, "aux_3.loss_ce": 0.12398, "aux_3.acc_seg": 94.24037, "loss": 0.67718, "time": 1.25752}
{"mode": "train", "epoch": 6, "iter": 650, "lr": 0.00064, "memory": 19944, "data_time": 0.19263, "decode.loss_ce": 0.07128, "decode.acc_seg": 96.58405, "aux_0.loss_ce": 0.07463, "aux_0.acc_seg": 96.45524, "aux_1.loss_ce": 0.09024, "aux_1.acc_seg": 95.69318, "aux_2.loss_ce": 0.08637, "aux_2.loss_dice": 0.22957, "aux_2.acc_seg": 97.34875, "aux_3.loss_ce": 0.12345, "aux_3.acc_seg": 94.36947, "loss": 0.67554, "time": 1.37683}
{"mode": "train", "epoch": 6, "iter": 700, "lr": 0.00069, "memory": 19944, "data_time": 0.08492, "decode.loss_ce": 0.07141, "decode.acc_seg": 96.57112, "aux_0.loss_ce": 0.07484, "aux_0.acc_seg": 96.43612, "aux_1.loss_ce": 0.09069, "aux_1.acc_seg": 95.66368, "aux_2.loss_ce": 0.08708, "aux_2.loss_dice": 0.23125, "aux_2.acc_seg": 97.3116, "aux_3.loss_ce": 0.12443, "aux_3.acc_seg": 94.3079, "loss": 0.67971, "time": 1.28025}
{"mode": "train", "epoch": 7, "iter": 750, "lr": 0.00074, "memory": 19944, "data_time": 0.20071, "decode.loss_ce": 0.06959, "decode.acc_seg": 96.58886, "aux_0.loss_ce": 0.0731, "aux_0.acc_seg": 96.44513, "aux_1.loss_ce": 0.08926, "aux_1.acc_seg": 95.65447, "aux_2.loss_ce": 0.08579, "aux_2.loss_dice": 0.22813, "aux_2.acc_seg": 97.34238, "aux_3.loss_ce": 0.1225, "aux_3.acc_seg": 94.28287, "loss": 0.66836, "time": 1.39626}
{"mode": "train", "epoch": 7, "iter": 800, "lr": 0.00079, "memory": 19944, "data_time": 0.08397, "decode.loss_ce": 0.07196, "decode.acc_seg": 96.55192, "aux_0.loss_ce": 0.0757, "aux_0.acc_seg": 96.41158, "aux_1.loss_ce": 0.0917, "aux_1.acc_seg": 95.63375, "aux_2.loss_ce": 0.08727, "aux_2.loss_dice": 0.23099, "aux_2.acc_seg": 97.29636, "aux_3.loss_ce": 0.1253, "aux_3.acc_seg": 94.28064, "loss": 0.68291, "time": 1.28556}
{"mode": "train", "epoch": 7, "iter": 850, "lr": 0.00084, "memory": 19944, "data_time": 0.08222, "decode.loss_ce": 0.07032, "decode.acc_seg": 96.49093, "aux_0.loss_ce": 0.07392, "aux_0.acc_seg": 96.34747, "aux_1.loss_ce": 0.09018, "aux_1.acc_seg": 95.5676, "aux_2.loss_ce": 0.08517, "aux_2.loss_dice": 0.22538, "aux_2.acc_seg": 97.36188, "aux_3.loss_ce": 0.1228, "aux_3.acc_seg": 94.18865, "loss": 0.66777, "time": 1.28037}
{"mode": "train", "epoch": 8, "iter": 900, "lr": 0.00089, "memory": 19944, "data_time": 0.19171, "decode.loss_ce": 0.07377, "decode.acc_seg": 96.49434, "aux_0.loss_ce": 0.07735, "aux_0.acc_seg": 96.36079, "aux_1.loss_ce": 0.09379, "aux_1.acc_seg": 95.57209, "aux_2.loss_ce": 0.08867, "aux_2.loss_dice": 0.23237, "aux_2.acc_seg": 97.25095, "aux_3.loss_ce": 0.12768, "aux_3.acc_seg": 94.20317, "loss": 0.69364, "time": 1.3874}
{"mode": "train", "epoch": 8, "iter": 950, "lr": 0.00094, "memory": 19944, "data_time": 0.07997, "decode.loss_ce": 0.0702, "decode.acc_seg": 96.55709, "aux_0.loss_ce": 0.07359, "aux_0.acc_seg": 96.43123, "aux_1.loss_ce": 0.08923, "aux_1.acc_seg": 95.66027, "aux_2.loss_ce": 0.08554, "aux_2.loss_dice": 0.2285, "aux_2.acc_seg": 97.35174, "aux_3.loss_ce": 0.12095, "aux_3.acc_seg": 94.36489, "loss": 0.66801, "time": 1.28301}
{"mode": "train", "epoch": 9, "iter": 1000, "lr": 0.00098, "memory": 19944, "data_time": 0.20174, "decode.loss_ce": 0.07263, "decode.acc_seg": 96.51925, "aux_0.loss_ce": 0.07616, "aux_0.acc_seg": 96.38729, "aux_1.loss_ce": 0.09189, "aux_1.acc_seg": 95.62793, "aux_2.loss_ce": 0.08699, "aux_2.loss_dice": 0.23056, "aux_2.acc_seg": 97.32117, "aux_3.loss_ce": 0.12389, "aux_3.acc_seg": 94.32975, "loss": 0.68213, "time": 1.40789}
{"mode": "train", "epoch": 9, "iter": 1050, "lr": 0.00098, "memory": 19944, "data_time": 0.08109, "decode.loss_ce": 0.07079, "decode.acc_seg": 96.5845, "aux_0.loss_ce": 0.07433, "aux_0.acc_seg": 96.45046, "aux_1.loss_ce": 0.09037, "aux_1.acc_seg": 95.6642, "aux_2.loss_ce": 0.08738, "aux_2.loss_dice": 0.23216, "aux_2.acc_seg": 97.3039, "aux_3.loss_ce": 0.12313, "aux_3.acc_seg": 94.35113, "loss": 0.67815, "time": 1.27492}
{"mode": "train", "epoch": 9, "iter": 1100, "lr": 0.00098, "memory": 19944, "data_time": 0.08736, "decode.loss_ce": 0.07112, "decode.acc_seg": 96.50315, "aux_0.loss_ce": 0.07463, "aux_0.acc_seg": 96.36709, "aux_1.loss_ce": 0.09049, "aux_1.acc_seg": 95.58269, "aux_2.loss_ce": 0.08541, "aux_2.loss_dice": 0.22657, "aux_2.acc_seg": 97.35322, "aux_3.loss_ce": 0.12211, "aux_3.acc_seg": 94.27538, "loss": 0.67032, "time": 1.29417}
{"mode": "train", "epoch": 10, "iter": 1150, "lr": 0.00098, "memory": 19944, "data_time": 0.18437, "decode.loss_ce": 0.07131, "decode.acc_seg": 96.51507, "aux_0.loss_ce": 0.07486, "aux_0.acc_seg": 96.37131, "aux_1.loss_ce": 0.09101, "aux_1.acc_seg": 95.57749, "aux_2.loss_ce": 0.08604, "aux_2.loss_dice": 0.22809, "aux_2.acc_seg": 97.33055, "aux_3.loss_ce": 0.12313, "aux_3.acc_seg": 94.28474, "loss": 0.67443, "time": 1.36479}
{"mode": "train", "epoch": 10, "iter": 1200, "lr": 0.00098, "memory": 19944, "data_time": 0.07241, "decode.loss_ce": 0.07219, "decode.acc_seg": 96.46445, "aux_0.loss_ce": 0.07584, "aux_0.acc_seg": 96.32397, "aux_1.loss_ce": 0.09164, "aux_1.acc_seg": 95.53866, "aux_2.loss_ce": 0.08655, "aux_2.loss_dice": 0.22942, "aux_2.acc_seg": 97.33079, "aux_3.loss_ce": 0.12445, "aux_3.acc_seg": 94.20766, "loss": 0.68009, "time": 1.25302}
{"mode": "train", "epoch": 11, "iter": 1250, "lr": 0.00098, "memory": 19944, "data_time": 0.1878, "decode.loss_ce": 0.07308, "decode.acc_seg": 96.47032, "aux_0.loss_ce": 0.07686, "aux_0.acc_seg": 96.32606, "aux_1.loss_ce": 0.09285, "aux_1.acc_seg": 95.54237, "aux_2.loss_ce": 0.08668, "aux_2.loss_dice": 0.22997, "aux_2.acc_seg": 97.33792, "aux_3.loss_ce": 0.12512, "aux_3.acc_seg": 94.23936, "loss": 0.68455, "time": 1.38012}
{"mode": "train", "epoch": 11, "iter": 1300, "lr": 0.00098, "memory": 19944, "data_time": 0.07931, "decode.loss_ce": 0.07281, "decode.acc_seg": 96.45628, "aux_0.loss_ce": 0.07628, "aux_0.acc_seg": 96.31877, "aux_1.loss_ce": 0.09222, "aux_1.acc_seg": 95.53863, "aux_2.loss_ce": 0.08751, "aux_2.loss_dice": 0.23031, "aux_2.acc_seg": 97.29531, "aux_3.loss_ce": 0.12424, "aux_3.acc_seg": 94.227, "loss": 0.68338, "time": 1.27295}
{"mode": "train", "epoch": 11, "iter": 1350, "lr": 0.00098, "memory": 19944, "data_time": 0.07076, "decode.loss_ce": 0.07183, "decode.acc_seg": 96.5361, "aux_0.loss_ce": 0.07536, "aux_0.acc_seg": 96.40144, "aux_1.loss_ce": 0.09133, "aux_1.acc_seg": 95.61489, "aux_2.loss_ce": 0.08805, "aux_2.loss_dice": 0.23148, "aux_2.acc_seg": 97.29193, "aux_3.loss_ce": 0.12355, "aux_3.acc_seg": 94.30722, "loss": 0.6816, "time": 1.25042}
{"mode": "train", "epoch": 12, "iter": 1400, "lr": 0.00098, "memory": 19944, "data_time": 0.1814, "decode.loss_ce": 0.06958, "decode.acc_seg": 96.56821, "aux_0.loss_ce": 0.07288, "aux_0.acc_seg": 96.43993, "aux_1.loss_ce": 0.08865, "aux_1.acc_seg": 95.66386, "aux_2.loss_ce": 0.08541, "aux_2.loss_dice": 0.22811, "aux_2.acc_seg": 97.37376, "aux_3.loss_ce": 0.11983, "aux_3.acc_seg": 94.37016, "loss": 0.66447, "time": 1.37091}
{"mode": "train", "epoch": 12, "iter": 1450, "lr": 0.00098, "memory": 19944, "data_time": 0.0746, "decode.loss_ce": 0.0743, "decode.acc_seg": 96.47532, "aux_0.loss_ce": 0.07821, "aux_0.acc_seg": 96.33436, "aux_1.loss_ce": 0.09468, "aux_1.acc_seg": 95.55293, "aux_2.loss_ce": 0.08894, "aux_2.loss_dice": 0.23337, "aux_2.acc_seg": 97.2622, "aux_3.loss_ce": 0.12701, "aux_3.acc_seg": 94.27487, "loss": 0.6965, "time": 1.25532}
