{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: None\nGCC: gcc (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0\nPyTorch: 1.12.1+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1+cu113\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.30.0+e7ed570", "seed": 1200128410, "exp_name": "tuneprompt_EN_1x24_512x1024_scale0.5_60k_cityscapes_contextlength16_fixbackbone_fromfinetune0.01.py", "mmseg_version": "0.30.0+e7ed570", "config": "norm_cfg = dict(type='BN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=None,\n    backbone=dict(\n        type='STDCContextNet',\n        backbone_cfg=dict(\n            type='STDCNet',\n            stdc_type='STDCNet1',\n            in_channels=3,\n            channels=(32, 64, 256, 512, 1024),\n            bottleneck_type='cat',\n            num_convs=4,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            act_cfg=dict(type='ReLU'),\n            with_final_conv=False),\n        last_in_channels=(1043, 512),\n        out_channels=128,\n        ffm_cfg=dict(in_channels=384, out_channels=256, scale_factor=4),\n        textencoder_cfg=dict(\n            type='CLIPTextContextEncoder',\n            context_length=16,\n            encoder_type='RN50',\n            pretrained='./pretrained/RN50.pt'),\n        context_mode='CSC',\n        CLASSES=('road', 'sidewalk', 'building', 'wall', 'fence', 'pole',\n                 'traffic light', 'traffic sign', 'vegetation', 'terrain',\n                 'sky', 'person', 'rider', 'car', 'truck', 'bus', 'train',\n                 'motorcycle', 'bicycle')),\n    decode_head=dict(\n        type='FCNHead',\n        in_channels=256,\n        channels=256,\n        num_convs=1,\n        num_classes=19,\n        in_index=3,\n        concat_input=False,\n        dropout_ratio=0.1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        align_corners=True,\n        sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=[\n        dict(\n            type='FCNHead',\n            in_channels=128,\n            channels=64,\n            num_convs=1,\n            num_classes=19,\n            in_index=2,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=False,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        dict(\n            type='FCNHead',\n            in_channels=128,\n            channels=64,\n            num_convs=1,\n            num_classes=19,\n            in_index=1,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=False,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        dict(\n            type='STDCHead',\n            in_channels=256,\n            channels=64,\n            num_convs=1,\n            num_classes=2,\n            boundary_threshold=0.1,\n            in_index=0,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=True,\n            loss_decode=[\n                dict(\n                    type='CrossEntropyLoss',\n                    loss_name='loss_ce',\n                    use_sigmoid=True,\n                    loss_weight=1.0),\n                dict(type='DiceLoss', loss_name='loss_dice', loss_weight=1.0)\n            ]),\n        dict(\n            type='VanillaHead',\n            temperature=0.07,\n            in_channels=19,\n            channels=1,\n            num_classes=19,\n            in_index=4,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0))\n    ],\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'),\n    init_cfg=dict(\n        type='Pretrained',\n        checkpoint=\n        './work_dirs/entextnet_stdc1_1x24_512x1024_scale0.5_60k_cityscapes_finetune0.01/best.pth'\n    ))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(\n        type='Resize',\n        img_scale=(2048, 1024),\n        ratio_range=(0.125, 1.5),\n        scale_step_size=0.125),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=24,\n    workers_per_gpu=4,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize',\n                img_scale=(2048, 1024),\n                ratio_range=(0.125, 1.5),\n                scale_step_size=0.125),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='SGD',\n    lr=0.1,\n    momentum=0.9,\n    weight_decay=0.0005,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            {\n                'backbone.backbone': dict(lr_mult=0.0),\n                'backbone.text_encoder': dict(lr_mult=0.0, decay_mult=0.0),\n                'backbone.contexts': dict(decay_mult=0.0),\n                '.bn.': dict(decay_mult=0.0)\n            })))\noptimizer_config = dict()\nlr_config = dict(\n    policy='poly',\n    power=0.9,\n    min_lr=1e-06,\n    by_epoch=False,\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=1e-05)\nrunner = dict(type='IterBasedRunner', max_iters=60000)\ncheckpoint_config = dict(by_epoch=False, interval=1500)\nevaluation = dict(interval=1500, metric='mIoU', pre_eval=True)\ncheckpoint = './work_dirs/entextnet_stdc1_1x24_512x1024_scale0.5_60k_cityscapes_finetune0.01/best.pth'\nwork_dir = './work_dirs/tuneprompt_EN_1x24_512x1024_scale0.5_60k_cityscapes_contextlength16_fixbackbone_fromfinetune0.01'\ngpu_ids = [0]\nauto_resume = False\ndevice = 'cuda'\nseed = 1200128410\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0049, "memory": 19944, "data_time": 0.15962, "decode.loss_ce": 0.07907, "decode.acc_seg": 96.24203, "aux_0.loss_ce": 0.08272, "aux_0.acc_seg": 96.11885, "aux_1.loss_ce": 0.10222, "aux_1.acc_seg": 95.21041, "aux_2.loss_ce": 0.08746, "aux_2.loss_dice": 0.2322, "aux_2.acc_seg": 97.32962, "aux_3.loss_ce": 0.43681, "aux_3.acc_seg": 89.70809, "loss": 1.02048, "time": 1.62924}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00989, "memory": 19944, "data_time": 0.08239, "decode.loss_ce": 0.08327, "decode.acc_seg": 96.06527, "aux_0.loss_ce": 0.0863, "aux_0.acc_seg": 95.9684, "aux_1.loss_ce": 0.10559, "aux_1.acc_seg": 95.06147, "aux_2.loss_ce": 0.08804, "aux_2.loss_dice": 0.23193, "aux_2.acc_seg": 97.27992, "aux_3.loss_ce": 0.18475, "aux_3.acc_seg": 92.74366, "loss": 0.77989, "time": 1.13648}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.01487, "memory": 19944, "data_time": 0.18399, "decode.loss_ce": 0.08588, "decode.acc_seg": 96.0084, "aux_0.loss_ce": 0.08823, "aux_0.acc_seg": 95.94825, "aux_1.loss_ce": 0.10702, "aux_1.acc_seg": 95.06651, "aux_2.loss_ce": 0.08664, "aux_2.loss_dice": 0.23217, "aux_2.acc_seg": 97.34097, "aux_3.loss_ce": 0.16991, "aux_3.acc_seg": 93.07816, "loss": 0.76983, "time": 1.2393}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.01984, "memory": 19944, "data_time": 0.07945, "decode.loss_ce": 0.09102, "decode.acc_seg": 95.86305, "aux_0.loss_ce": 0.09291, "aux_0.acc_seg": 95.81364, "aux_1.loss_ce": 0.1127, "aux_1.acc_seg": 94.90696, "aux_2.loss_ce": 0.08846, "aux_2.loss_dice": 0.23506, "aux_2.acc_seg": 97.30553, "aux_3.loss_ce": 0.16971, "aux_3.acc_seg": 93.13511, "loss": 0.78986, "time": 1.1332}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.02481, "memory": 19944, "data_time": 0.19225, "decode.loss_ce": 0.09472, "decode.acc_seg": 95.54108, "aux_0.loss_ce": 0.09587, "aux_0.acc_seg": 95.51954, "aux_1.loss_ce": 0.11666, "aux_1.acc_seg": 94.55338, "aux_2.loss_ce": 0.08779, "aux_2.loss_dice": 0.23152, "aux_2.acc_seg": 97.31354, "aux_3.loss_ce": 0.16624, "aux_3.acc_seg": 92.93345, "loss": 0.7928, "time": 1.24673}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.02977, "memory": 19944, "data_time": 0.07328, "decode.loss_ce": 0.09476, "decode.acc_seg": 95.68891, "aux_0.loss_ce": 0.09624, "aux_0.acc_seg": 95.66745, "aux_1.loss_ce": 0.11642, "aux_1.acc_seg": 94.73773, "aux_2.loss_ce": 0.08894, "aux_2.loss_dice": 0.23481, "aux_2.acc_seg": 97.27537, "aux_3.loss_ce": 0.16566, "aux_3.acc_seg": 93.13642, "loss": 0.79683, "time": 1.12773}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.03472, "memory": 19944, "data_time": 0.0848, "decode.loss_ce": 0.09567, "decode.acc_seg": 95.53389, "aux_0.loss_ce": 0.09715, "aux_0.acc_seg": 95.50363, "aux_1.loss_ce": 0.11743, "aux_1.acc_seg": 94.53593, "aux_2.loss_ce": 0.08753, "aux_2.loss_dice": 0.23188, "aux_2.acc_seg": 97.31003, "aux_3.loss_ce": 0.16183, "aux_3.acc_seg": 93.01125, "loss": 0.79149, "time": 1.141}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.03966, "memory": 19944, "data_time": 0.19342, "decode.loss_ce": 0.09497, "decode.acc_seg": 95.60054, "aux_0.loss_ce": 0.09624, "aux_0.acc_seg": 95.58049, "aux_1.loss_ce": 0.11535, "aux_1.acc_seg": 94.65203, "aux_2.loss_ce": 0.08804, "aux_2.loss_dice": 0.23275, "aux_2.acc_seg": 97.30312, "aux_3.loss_ce": 0.16156, "aux_3.acc_seg": 93.05187, "loss": 0.78891, "time": 1.25071}
{"mode": "train", "epoch": 4, "iter": 450, "lr": 0.0446, "memory": 19944, "data_time": 0.08533, "decode.loss_ce": 0.09786, "decode.acc_seg": 95.62965, "aux_0.loss_ce": 0.09877, "aux_0.acc_seg": 95.60315, "aux_1.loss_ce": 0.11961, "aux_1.acc_seg": 94.63856, "aux_2.loss_ce": 0.08887, "aux_2.loss_dice": 0.23551, "aux_2.acc_seg": 97.29237, "aux_3.loss_ce": 0.16249, "aux_3.acc_seg": 93.22048, "loss": 0.80311, "time": 1.14388}
{"mode": "train", "epoch": 5, "iter": 500, "lr": 0.04953, "memory": 19944, "data_time": 0.19756, "decode.loss_ce": 0.10242, "decode.acc_seg": 95.40223, "aux_0.loss_ce": 0.10285, "aux_0.acc_seg": 95.42102, "aux_1.loss_ce": 0.12439, "aux_1.acc_seg": 94.43215, "aux_2.loss_ce": 0.08872, "aux_2.loss_dice": 0.23313, "aux_2.acc_seg": 97.29353, "aux_3.loss_ce": 0.1646, "aux_3.acc_seg": 93.07347, "loss": 0.8161, "time": 1.26322}
{"mode": "train", "epoch": 5, "iter": 550, "lr": 0.05445, "memory": 19944, "data_time": 0.08852, "decode.loss_ce": 0.09781, "decode.acc_seg": 95.47581, "aux_0.loss_ce": 0.09877, "aux_0.acc_seg": 95.47022, "aux_1.loss_ce": 0.11981, "aux_1.acc_seg": 94.45189, "aux_2.loss_ce": 0.08749, "aux_2.loss_dice": 0.23268, "aux_2.acc_seg": 97.33874, "aux_3.loss_ce": 0.15864, "aux_3.acc_seg": 93.14474, "loss": 0.7952, "time": 1.15411}
{"mode": "train", "epoch": 5, "iter": 600, "lr": 0.05936, "memory": 19944, "data_time": 0.08514, "decode.loss_ce": 0.09414, "decode.acc_seg": 95.61587, "aux_0.loss_ce": 0.0955, "aux_0.acc_seg": 95.58125, "aux_1.loss_ce": 0.11662, "aux_1.acc_seg": 94.58982, "aux_2.loss_ce": 0.08706, "aux_2.loss_dice": 0.23028, "aux_2.acc_seg": 97.32934, "aux_3.loss_ce": 0.15697, "aux_3.acc_seg": 93.18577, "loss": 0.78057, "time": 1.14974}
{"mode": "train", "epoch": 6, "iter": 650, "lr": 0.06427, "memory": 19944, "data_time": 0.20381, "decode.loss_ce": 0.09605, "decode.acc_seg": 95.62417, "aux_0.loss_ce": 0.09727, "aux_0.acc_seg": 95.59582, "aux_1.loss_ce": 0.11818, "aux_1.acc_seg": 94.60196, "aux_2.loss_ce": 0.0885, "aux_2.loss_dice": 0.23251, "aux_2.acc_seg": 97.29434, "aux_3.loss_ce": 0.15801, "aux_3.acc_seg": 93.23433, "loss": 0.79052, "time": 1.27378}
{"mode": "train", "epoch": 6, "iter": 700, "lr": 0.06917, "memory": 19944, "data_time": 0.08743, "decode.loss_ce": 0.10087, "decode.acc_seg": 95.50288, "aux_0.loss_ce": 0.10169, "aux_0.acc_seg": 95.50178, "aux_1.loss_ce": 0.12375, "aux_1.acc_seg": 94.48626, "aux_2.loss_ce": 0.09012, "aux_2.loss_dice": 0.23554, "aux_2.acc_seg": 97.24795, "aux_3.loss_ce": 0.16313, "aux_3.acc_seg": 93.16316, "loss": 0.81509, "time": 1.15396}
{"mode": "train", "epoch": 7, "iter": 750, "lr": 0.07406, "memory": 19944, "data_time": 0.19792, "decode.loss_ce": 0.10022, "decode.acc_seg": 95.45728, "aux_0.loss_ce": 0.10108, "aux_0.acc_seg": 95.4573, "aux_1.loss_ce": 0.1221, "aux_1.acc_seg": 94.47724, "aux_2.loss_ce": 0.08964, "aux_2.loss_dice": 0.23601, "aux_2.acc_seg": 97.28972, "aux_3.loss_ce": 0.16113, "aux_3.acc_seg": 93.14843, "loss": 0.81018, "time": 1.26137}
{"mode": "train", "epoch": 7, "iter": 800, "lr": 0.07894, "memory": 19944, "data_time": 0.07596, "decode.loss_ce": 0.09791, "decode.acc_seg": 95.50948, "aux_0.loss_ce": 0.09922, "aux_0.acc_seg": 95.4873, "aux_1.loss_ce": 0.11926, "aux_1.acc_seg": 94.5456, "aux_2.loss_ce": 0.08687, "aux_2.loss_dice": 0.23153, "aux_2.acc_seg": 97.36763, "aux_3.loss_ce": 0.15649, "aux_3.acc_seg": 93.21521, "loss": 0.79129, "time": 1.12998}
{"mode": "train", "epoch": 7, "iter": 850, "lr": 0.08382, "memory": 19944, "data_time": 0.06586, "decode.loss_ce": 0.10507, "decode.acc_seg": 95.31252, "aux_0.loss_ce": 0.10488, "aux_0.acc_seg": 95.33832, "aux_1.loss_ce": 0.12894, "aux_1.acc_seg": 94.21296, "aux_2.loss_ce": 0.08739, "aux_2.loss_dice": 0.23286, "aux_2.acc_seg": 97.33387, "aux_3.loss_ce": 0.15639, "aux_3.acc_seg": 93.29862, "loss": 0.81555, "time": 1.1164}
{"mode": "train", "epoch": 8, "iter": 900, "lr": 0.08869, "memory": 19944, "data_time": 0.17371, "decode.loss_ce": 0.10157, "decode.acc_seg": 95.4209, "aux_0.loss_ce": 0.10256, "aux_0.acc_seg": 95.41245, "aux_1.loss_ce": 0.12908, "aux_1.acc_seg": 94.23064, "aux_2.loss_ce": 0.08794, "aux_2.loss_dice": 0.23293, "aux_2.acc_seg": 97.33061, "aux_3.loss_ce": 0.15834, "aux_3.acc_seg": 93.22084, "loss": 0.81242, "time": 1.22901}
{"mode": "train", "epoch": 8, "iter": 950, "lr": 0.09355, "memory": 19944, "data_time": 0.07112, "decode.loss_ce": 0.10312, "decode.acc_seg": 95.31198, "aux_0.loss_ce": 0.10404, "aux_0.acc_seg": 95.30229, "aux_1.loss_ce": 0.12848, "aux_1.acc_seg": 94.16628, "aux_2.loss_ce": 0.08795, "aux_2.loss_dice": 0.23262, "aux_2.acc_seg": 97.34653, "aux_3.loss_ce": 0.15825, "aux_3.acc_seg": 93.14891, "loss": 0.81445, "time": 1.12855}
{"mode": "train", "epoch": 9, "iter": 1000, "lr": 0.0984, "memory": 19944, "data_time": 0.16862, "decode.loss_ce": 0.10327, "decode.acc_seg": 95.45417, "aux_0.loss_ce": 0.10498, "aux_0.acc_seg": 95.42955, "aux_1.loss_ce": 0.12842, "aux_1.acc_seg": 94.38219, "aux_2.loss_ce": 0.08934, "aux_2.loss_dice": 0.23575, "aux_2.acc_seg": 97.28594, "aux_3.loss_ce": 0.16184, "aux_3.acc_seg": 93.25233, "loss": 0.82359, "time": 1.22205}
{"mode": "train", "epoch": 9, "iter": 1050, "lr": 0.09843, "memory": 19944, "data_time": 0.06755, "decode.loss_ce": 0.10539, "decode.acc_seg": 95.32644, "aux_0.loss_ce": 0.10538, "aux_0.acc_seg": 95.36578, "aux_1.loss_ce": 0.13196, "aux_1.acc_seg": 94.17345, "aux_2.loss_ce": 0.08959, "aux_2.loss_dice": 0.23538, "aux_2.acc_seg": 97.2478, "aux_3.loss_ce": 0.16089, "aux_3.acc_seg": 93.19711, "loss": 0.82858, "time": 1.12808}
{"mode": "train", "epoch": 9, "iter": 1100, "lr": 0.09835, "memory": 19944, "data_time": 0.06908, "decode.loss_ce": 0.09775, "decode.acc_seg": 95.52474, "aux_0.loss_ce": 0.09902, "aux_0.acc_seg": 95.50337, "aux_1.loss_ce": 0.12177, "aux_1.acc_seg": 94.43841, "aux_2.loss_ce": 0.08796, "aux_2.loss_dice": 0.23276, "aux_2.acc_seg": 97.31099, "aux_3.loss_ce": 0.15701, "aux_3.acc_seg": 93.18956, "loss": 0.79626, "time": 1.12713}
{"mode": "train", "epoch": 10, "iter": 1150, "lr": 0.09827, "memory": 19944, "data_time": 0.17156, "decode.loss_ce": 0.09893, "decode.acc_seg": 95.52372, "aux_0.loss_ce": 0.10044, "aux_0.acc_seg": 95.49222, "aux_1.loss_ce": 0.12258, "aux_1.acc_seg": 94.47918, "aux_2.loss_ce": 0.08964, "aux_2.loss_dice": 0.23528, "aux_2.acc_seg": 97.2676, "aux_3.loss_ce": 0.16063, "aux_3.acc_seg": 93.15071, "loss": 0.8075, "time": 1.22712}
{"mode": "train", "epoch": 10, "iter": 1200, "lr": 0.0982, "memory": 19944, "data_time": 0.06914, "decode.loss_ce": 0.10213, "decode.acc_seg": 95.42935, "aux_0.loss_ce": 0.10371, "aux_0.acc_seg": 95.40581, "aux_1.loss_ce": 0.12571, "aux_1.acc_seg": 94.4123, "aux_2.loss_ce": 0.08927, "aux_2.loss_dice": 0.23607, "aux_2.acc_seg": 97.32445, "aux_3.loss_ce": 0.16158, "aux_3.acc_seg": 93.2117, "loss": 0.81846, "time": 1.12987}
{"mode": "train", "epoch": 11, "iter": 1250, "lr": 0.09812, "memory": 19944, "data_time": 0.1721, "decode.loss_ce": 0.10216, "decode.acc_seg": 95.40444, "aux_0.loss_ce": 0.10358, "aux_0.acc_seg": 95.37466, "aux_1.loss_ce": 0.12643, "aux_1.acc_seg": 94.3276, "aux_2.loss_ce": 0.08935, "aux_2.loss_dice": 0.2346, "aux_2.acc_seg": 97.2709, "aux_3.loss_ce": 0.16061, "aux_3.acc_seg": 93.18072, "loss": 0.81671, "time": 1.22899}
{"mode": "train", "epoch": 11, "iter": 1300, "lr": 0.09805, "memory": 19944, "data_time": 0.06278, "decode.loss_ce": 0.10106, "decode.acc_seg": 95.42643, "aux_0.loss_ce": 0.10248, "aux_0.acc_seg": 95.39565, "aux_1.loss_ce": 0.12485, "aux_1.acc_seg": 94.37099, "aux_2.loss_ce": 0.08991, "aux_2.loss_dice": 0.23519, "aux_2.acc_seg": 97.26389, "aux_3.loss_ce": 0.16342, "aux_3.acc_seg": 93.11144, "loss": 0.81691, "time": 1.115}
{"mode": "train", "epoch": 11, "iter": 1350, "lr": 0.09797, "memory": 19944, "data_time": 0.06549, "decode.loss_ce": 0.10303, "decode.acc_seg": 95.40283, "aux_0.loss_ce": 0.10444, "aux_0.acc_seg": 95.39633, "aux_1.loss_ce": 0.12719, "aux_1.acc_seg": 94.33794, "aux_2.loss_ce": 0.08848, "aux_2.loss_dice": 0.23454, "aux_2.acc_seg": 97.31456, "aux_3.loss_ce": 0.15859, "aux_3.acc_seg": 93.23285, "loss": 0.81627, "time": 1.12136}
{"mode": "train", "epoch": 12, "iter": 1400, "lr": 0.0979, "memory": 19944, "data_time": 0.17132, "decode.loss_ce": 0.09762, "decode.acc_seg": 95.54892, "aux_0.loss_ce": 0.09877, "aux_0.acc_seg": 95.5179, "aux_1.loss_ce": 0.12282, "aux_1.acc_seg": 94.43071, "aux_2.loss_ce": 0.08964, "aux_2.loss_dice": 0.23447, "aux_2.acc_seg": 97.26354, "aux_3.loss_ce": 0.15583, "aux_3.acc_seg": 93.23976, "loss": 0.79915, "time": 1.22594}
{"mode": "train", "epoch": 12, "iter": 1450, "lr": 0.09782, "memory": 19944, "data_time": 0.06482, "decode.loss_ce": 0.09838, "decode.acc_seg": 95.57712, "aux_0.loss_ce": 0.10001, "aux_0.acc_seg": 95.55617, "aux_1.loss_ce": 0.12385, "aux_1.acc_seg": 94.48854, "aux_2.loss_ce": 0.08813, "aux_2.loss_dice": 0.23417, "aux_2.acc_seg": 97.34532, "aux_3.loss_ce": 0.15711, "aux_3.acc_seg": 93.30931, "loss": 0.80166, "time": 1.11705}
{"mode": "train", "epoch": 13, "iter": 1500, "lr": 0.09775, "memory": 19944, "data_time": 0.17106, "decode.loss_ce": 0.09639, "decode.acc_seg": 95.58509, "aux_0.loss_ce": 0.09856, "aux_0.acc_seg": 95.5254, "aux_1.loss_ce": 0.12034, "aux_1.acc_seg": 94.51427, "aux_2.loss_ce": 0.08745, "aux_2.loss_dice": 0.23276, "aux_2.acc_seg": 97.3229, "aux_3.loss_ce": 0.15415, "aux_3.acc_seg": 93.32975, "loss": 0.78965, "time": 1.30902}
{"mode": "val", "epoch": 13, "iter": 500, "lr": 0.09775, "aAcc": 0.9447, "mIoU": 0.6841, "mAcc": 0.7656, "IoU.road": 0.9731, "IoU.sidewalk": 0.801, "IoU.building": 0.9002, "IoU.wall": 0.4895, "IoU.fence": 0.5311, "IoU.pole": 0.4203, "IoU.traffic light": 0.5316, "IoU.traffic sign": 0.6561, "IoU.vegetation": 0.8972, "IoU.terrain": 0.6052, "IoU.sky": 0.9219, "IoU.person": 0.704, "IoU.rider": 0.493, "IoU.car": 0.9227, "IoU.truck": 0.6466, "IoU.bus": 0.761, "IoU.train": 0.5614, "IoU.motorcycle": 0.5125, "IoU.bicycle": 0.6704, "Acc.road": 0.9927, "Acc.sidewalk": 0.8592, "Acc.building": 0.9578, "Acc.wall": 0.5621, "Acc.fence": 0.6375, "Acc.pole": 0.479, "Acc.traffic light": 0.6358, "Acc.traffic sign": 0.7528, "Acc.vegetation": 0.9603, "Acc.terrain": 0.7811, "Acc.sky": 0.9752, "Acc.person": 0.793, "Acc.rider": 0.6438, "Acc.car": 0.9602, "Acc.truck": 0.7257, "Acc.bus": 0.8483, "Acc.train": 0.6132, "Acc.motorcycle": 0.5983, "Acc.bicycle": 0.77}
{"mode": "train", "epoch": 13, "iter": 1550, "lr": 0.09767, "memory": 19944, "data_time": 0.78132, "decode.loss_ce": 0.09686, "decode.acc_seg": 95.55085, "aux_0.loss_ce": 0.09828, "aux_0.acc_seg": 95.524, "aux_1.loss_ce": 0.11877, "aux_1.acc_seg": 94.57711, "aux_2.loss_ce": 0.08704, "aux_2.loss_dice": 0.23346, "aux_2.acc_seg": 97.38142, "aux_3.loss_ce": 0.15633, "aux_3.acc_seg": 93.28895, "loss": 0.79075, "time": 1.84279}
{"mode": "train", "epoch": 13, "iter": 1600, "lr": 0.0976, "memory": 19944, "data_time": 0.16642, "decode.loss_ce": 0.09852, "decode.acc_seg": 95.50285, "aux_0.loss_ce": 0.10047, "aux_0.acc_seg": 95.46488, "aux_1.loss_ce": 0.1222, "aux_1.acc_seg": 94.45779, "aux_2.loss_ce": 0.08936, "aux_2.loss_dice": 0.23513, "aux_2.acc_seg": 97.2977, "aux_3.loss_ce": 0.15771, "aux_3.acc_seg": 93.28476, "loss": 0.8034, "time": 1.21961}
{"mode": "train", "epoch": 14, "iter": 1650, "lr": 0.09752, "memory": 19944, "data_time": 0.06398, "decode.loss_ce": 0.09412, "decode.acc_seg": 95.66081, "aux_0.loss_ce": 0.09591, "aux_0.acc_seg": 95.61876, "aux_1.loss_ce": 0.11695, "aux_1.acc_seg": 94.63649, "aux_2.loss_ce": 0.08805, "aux_2.loss_dice": 0.23363, "aux_2.acc_seg": 97.34925, "aux_3.loss_ce": 0.15473, "aux_3.acc_seg": 93.32157, "loss": 0.78339, "time": 1.11906}
{"mode": "train", "epoch": 14, "iter": 1700, "lr": 0.09745, "memory": 19944, "data_time": 0.0624, "decode.loss_ce": 0.09501, "decode.acc_seg": 95.76418, "aux_0.loss_ce": 0.09686, "aux_0.acc_seg": 95.70951, "aux_1.loss_ce": 0.11758, "aux_1.acc_seg": 94.76868, "aux_2.loss_ce": 0.08807, "aux_2.loss_dice": 0.23448, "aux_2.acc_seg": 97.32527, "aux_3.loss_ce": 0.15696, "aux_3.acc_seg": 93.42472, "loss": 0.78897, "time": 1.11852}
{"mode": "train", "epoch": 15, "iter": 1750, "lr": 0.09737, "memory": 19944, "data_time": 0.16975, "decode.loss_ce": 0.09763, "decode.acc_seg": 95.57978, "aux_0.loss_ce": 0.09891, "aux_0.acc_seg": 95.56785, "aux_1.loss_ce": 0.12022, "aux_1.acc_seg": 94.58327, "aux_2.loss_ce": 0.08982, "aux_2.loss_dice": 0.23466, "aux_2.acc_seg": 97.25771, "aux_3.loss_ce": 0.15845, "aux_3.acc_seg": 93.23049, "loss": 0.79968, "time": 1.22442}
{"mode": "train", "epoch": 15, "iter": 1800, "lr": 0.0973, "memory": 19944, "data_time": 0.06374, "decode.loss_ce": 0.09381, "decode.acc_seg": 95.72452, "aux_0.loss_ce": 0.09518, "aux_0.acc_seg": 95.69922, "aux_1.loss_ce": 0.11626, "aux_1.acc_seg": 94.72662, "aux_2.loss_ce": 0.08814, "aux_2.loss_dice": 0.23497, "aux_2.acc_seg": 97.32799, "aux_3.loss_ce": 0.15571, "aux_3.acc_seg": 93.35909, "loss": 0.78408, "time": 1.1189}
{"mode": "train", "epoch": 16, "iter": 1850, "lr": 0.09722, "memory": 19944, "data_time": 0.16944, "decode.loss_ce": 0.09428, "decode.acc_seg": 95.6346, "aux_0.loss_ce": 0.09637, "aux_0.acc_seg": 95.58045, "aux_1.loss_ce": 0.117, "aux_1.acc_seg": 94.61065, "aux_2.loss_ce": 0.08769, "aux_2.loss_dice": 0.23188, "aux_2.acc_seg": 97.35182, "aux_3.loss_ce": 0.15639, "aux_3.acc_seg": 93.22124, "loss": 0.78362, "time": 1.2234}
{"mode": "train", "epoch": 16, "iter": 1900, "lr": 0.09715, "memory": 19944, "data_time": 0.06307, "decode.loss_ce": 0.09563, "decode.acc_seg": 95.62255, "aux_0.loss_ce": 0.09767, "aux_0.acc_seg": 95.57044, "aux_1.loss_ce": 0.1184, "aux_1.acc_seg": 94.59751, "aux_2.loss_ce": 0.08816, "aux_2.loss_dice": 0.23466, "aux_2.acc_seg": 97.33747, "aux_3.loss_ce": 0.15613, "aux_3.acc_seg": 93.30561, "loss": 0.79065, "time": 1.11709}
{"mode": "train", "epoch": 16, "iter": 1950, "lr": 0.09707, "memory": 19944, "data_time": 0.06783, "decode.loss_ce": 0.09356, "decode.acc_seg": 95.67254, "aux_0.loss_ce": 0.09574, "aux_0.acc_seg": 95.61583, "aux_1.loss_ce": 0.11569, "aux_1.acc_seg": 94.68036, "aux_2.loss_ce": 0.08802, "aux_2.loss_dice": 0.23316, "aux_2.acc_seg": 97.32217, "aux_3.loss_ce": 0.1541, "aux_3.acc_seg": 93.33234, "loss": 0.78027, "time": 1.12452}
