{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: None\nGCC: gcc (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0\nPyTorch: 1.12.1+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1+cu113\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.30.0+e7ed570", "seed": 886962079, "exp_name": "stdc1_1x24_512x1024_scale0.5_160k_cityscapes.py", "mmseg_version": "0.30.0+e7ed570", "config": "norm_cfg = dict(type='BN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=None,\n    backbone=dict(\n        type='STDCContextPathNet',\n        backbone_cfg=dict(\n            type='STDCNet',\n            stdc_type='STDCNet1',\n            in_channels=3,\n            channels=(32, 64, 256, 512, 1024),\n            bottleneck_type='cat',\n            num_convs=4,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            act_cfg=dict(type='ReLU'),\n            with_final_conv=False,\n            init_cfg=dict(\n                type='Pretrained',\n                checkpoint=\n                'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth'\n            )),\n        last_in_channels=(1024, 512),\n        out_channels=128,\n        ffm_cfg=dict(in_channels=384, out_channels=256, scale_factor=4)),\n    decode_head=dict(\n        type='FCNHead',\n        in_channels=256,\n        channels=256,\n        num_convs=1,\n        num_classes=19,\n        in_index=3,\n        concat_input=False,\n        dropout_ratio=0.1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        align_corners=True,\n        sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=[\n        dict(\n            type='FCNHead',\n            in_channels=128,\n            channels=64,\n            num_convs=1,\n            num_classes=19,\n            in_index=2,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=False,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        dict(\n            type='FCNHead',\n            in_channels=128,\n            channels=64,\n            num_convs=1,\n            num_classes=19,\n            in_index=1,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=False,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        dict(\n            type='STDCHead',\n            in_channels=256,\n            channels=64,\n            num_convs=1,\n            num_classes=2,\n            boundary_threshold=0.1,\n            in_index=0,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=True,\n            loss_decode=[\n                dict(\n                    type='CrossEntropyLoss',\n                    loss_name='loss_ce',\n                    use_sigmoid=True,\n                    loss_weight=1.0),\n                dict(type='DiceLoss', loss_name='loss_dice', loss_weight=1.0)\n            ])\n    ],\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(\n        type='Resize',\n        img_scale=(2048, 1024),\n        ratio_range=(0.125, 1.5),\n        scale_step_size=0.125),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=24,\n    workers_per_gpu=4,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize',\n                img_scale=(2048, 1024),\n                ratio_range=(0.125, 1.5),\n                scale_step_size=0.125),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='SGD',\n    lr=0.05,\n    momentum=0.9,\n    weight_decay=0.0005,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            {\n                'backbone.backbone': dict(lr_mult=0.1),\n                'backbone.text_encoder': dict(lr_mult=0.0, decay_mult=0.0),\n                '.bn.': dict(decay_mult=0.0)\n            })))\noptimizer_config = dict()\nlr_config = dict(\n    policy='poly',\n    power=0.9,\n    min_lr=1e-06,\n    by_epoch=False,\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=1e-05)\nrunner = dict(type='IterBasedRunner', max_iters=160000)\ncheckpoint_config = dict(by_epoch=False, interval=16000)\nevaluation = dict(interval=16000, metric='mIoU', pre_eval=True)\ncheckpoint = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth'\nwork_dir = './work_dirs/stdc1_1x24_512x1024_scale0.5_160k_cityscapes'\ngpu_ids = [0]\nauto_resume = False\ndevice = 'cuda'\nseed = 886962079\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00024, "memory": 19452, "data_time": 0.35479, "decode.loss_ce": 1.91182, "decode.acc_seg": 35.37859, "aux_0.loss_ce": 2.08467, "aux_0.acc_seg": 19.12813, "aux_1.loss_ce": 2.12902, "aux_1.acc_seg": 16.35995, "aux_2.loss_ce": 0.59912, "aux_2.loss_dice": 0.51937, "aux_2.acc_seg": 64.47801, "loss": 7.24401, "time": 1.12184}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00049, "memory": 19452, "data_time": 0.41936, "decode.loss_ce": 1.29964, "decode.acc_seg": 53.67523, "aux_0.loss_ce": 1.40896, "aux_0.acc_seg": 50.42828, "aux_1.loss_ce": 1.47522, "aux_1.acc_seg": 48.30212, "aux_2.loss_ce": 0.23251, "aux_2.loss_dice": 0.45723, "aux_2.acc_seg": 96.91243, "loss": 4.87356, "time": 0.96568}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00074, "memory": 19452, "data_time": 0.42342, "decode.loss_ce": 0.92785, "decode.acc_seg": 67.21368, "aux_0.loss_ce": 0.96946, "aux_0.acc_seg": 67.14415, "aux_1.loss_ce": 1.01882, "aux_1.acc_seg": 64.44831, "aux_2.loss_ce": 0.18146, "aux_2.loss_dice": 0.36578, "aux_2.acc_seg": 97.03053, "loss": 3.46337, "time": 0.98141}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00099, "memory": 19452, "data_time": 0.24031, "decode.loss_ce": 0.67597, "decode.acc_seg": 76.04826, "aux_0.loss_ce": 0.70786, "aux_0.acc_seg": 75.48526, "aux_1.loss_ce": 0.7376, "aux_1.acc_seg": 74.00022, "aux_2.loss_ce": 0.13844, "aux_2.loss_dice": 0.32903, "aux_2.acc_seg": 97.04168, "loss": 2.5889, "time": 0.81686}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.00124, "memory": 19452, "data_time": 0.29708, "decode.loss_ce": 0.56578, "decode.acc_seg": 79.03911, "aux_0.loss_ce": 0.60054, "aux_0.acc_seg": 78.69284, "aux_1.loss_ce": 0.62825, "aux_1.acc_seg": 77.38893, "aux_2.loss_ce": 0.12021, "aux_2.loss_dice": 0.31344, "aux_2.acc_seg": 97.11525, "loss": 2.22822, "time": 0.87726}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.00149, "memory": 19452, "data_time": 0.24441, "decode.loss_ce": 0.51695, "decode.acc_seg": 80.75264, "aux_0.loss_ce": 0.54195, "aux_0.acc_seg": 80.51623, "aux_1.loss_ce": 0.57012, "aux_1.acc_seg": 79.30587, "aux_2.loss_ce": 0.11283, "aux_2.loss_dice": 0.30742, "aux_2.acc_seg": 97.12105, "loss": 2.04927, "time": 0.81489}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.00174, "memory": 19452, "data_time": 0.2376, "decode.loss_ce": 0.47159, "decode.acc_seg": 82.22541, "aux_0.loss_ce": 0.49498, "aux_0.acc_seg": 81.94388, "aux_1.loss_ce": 0.52271, "aux_1.acc_seg": 80.67015, "aux_2.loss_ce": 0.1104, "aux_2.loss_dice": 0.30188, "aux_2.acc_seg": 97.07994, "loss": 1.90156, "time": 0.8035}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.00199, "memory": 19452, "data_time": 0.31454, "decode.loss_ce": 0.43531, "decode.acc_seg": 83.89677, "aux_0.loss_ce": 0.45597, "aux_0.acc_seg": 83.7018, "aux_1.loss_ce": 0.48537, "aux_1.acc_seg": 82.38279, "aux_2.loss_ce": 0.10915, "aux_2.loss_dice": 0.30017, "aux_2.acc_seg": 97.05683, "loss": 1.78597, "time": 0.88663}
{"mode": "train", "epoch": 4, "iter": 450, "lr": 0.00224, "memory": 19452, "data_time": 0.21981, "decode.loss_ce": 0.41816, "decode.acc_seg": 84.50495, "aux_0.loss_ce": 0.43499, "aux_0.acc_seg": 84.12333, "aux_1.loss_ce": 0.46169, "aux_1.acc_seg": 82.96033, "aux_2.loss_ce": 0.10654, "aux_2.loss_dice": 0.29504, "aux_2.acc_seg": 97.1416, "loss": 1.71642, "time": 0.79643}
{"mode": "train", "epoch": 5, "iter": 500, "lr": 0.00249, "memory": 19452, "data_time": 0.32493, "decode.loss_ce": 0.38563, "decode.acc_seg": 85.37529, "aux_0.loss_ce": 0.40384, "aux_0.acc_seg": 84.88539, "aux_1.loss_ce": 0.42986, "aux_1.acc_seg": 83.92943, "aux_2.loss_ce": 0.10542, "aux_2.loss_dice": 0.29313, "aux_2.acc_seg": 97.1489, "loss": 1.61789, "time": 0.8994}
{"mode": "train", "epoch": 5, "iter": 550, "lr": 0.00274, "memory": 19452, "data_time": 0.23436, "decode.loss_ce": 0.36707, "decode.acc_seg": 85.67065, "aux_0.loss_ce": 0.3844, "aux_0.acc_seg": 85.12947, "aux_1.loss_ce": 0.41104, "aux_1.acc_seg": 84.1387, "aux_2.loss_ce": 0.10495, "aux_2.loss_dice": 0.29004, "aux_2.acc_seg": 97.15446, "loss": 1.5575, "time": 0.81313}
{"mode": "train", "epoch": 5, "iter": 600, "lr": 0.00298, "memory": 19452, "data_time": 0.21574, "decode.loss_ce": 0.38321, "decode.acc_seg": 85.49273, "aux_0.loss_ce": 0.3963, "aux_0.acc_seg": 85.20593, "aux_1.loss_ce": 0.4276, "aux_1.acc_seg": 84.03379, "aux_2.loss_ce": 0.10585, "aux_2.loss_dice": 0.29128, "aux_2.acc_seg": 97.15332, "loss": 1.60423, "time": 0.7938}
{"mode": "train", "epoch": 6, "iter": 650, "lr": 0.00323, "memory": 19452, "data_time": 0.33098, "decode.loss_ce": 0.333, "decode.acc_seg": 86.9817, "aux_0.loss_ce": 0.3429, "aux_0.acc_seg": 86.67004, "aux_1.loss_ce": 0.37709, "aux_1.acc_seg": 85.37632, "aux_2.loss_ce": 0.10433, "aux_2.loss_dice": 0.28386, "aux_2.acc_seg": 97.17765, "loss": 1.44119, "time": 0.90352}
