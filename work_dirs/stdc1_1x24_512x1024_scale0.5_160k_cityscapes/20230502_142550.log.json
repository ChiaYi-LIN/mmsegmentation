{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: None\nGCC: gcc (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0\nPyTorch: 1.12.1+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1+cu113\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.30.0+e7ed570", "seed": 1768160885, "exp_name": "stdc1_1x24_512x1024_scale0.5_160k_cityscapes.py", "mmseg_version": "0.30.0+e7ed570", "config": "norm_cfg = dict(type='BN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=None,\n    backbone=dict(\n        type='STDCContextPathNet',\n        backbone_cfg=dict(\n            type='STDCNet',\n            stdc_type='STDCNet1',\n            in_channels=3,\n            channels=(32, 64, 256, 512, 1024),\n            bottleneck_type='cat',\n            num_convs=4,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            act_cfg=dict(type='ReLU'),\n            with_final_conv=False,\n            init_cfg=dict(\n                type='Pretrained',\n                checkpoint=\n                'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth'\n            )),\n        last_in_channels=(1024, 512),\n        out_channels=128,\n        ffm_cfg=dict(in_channels=384, out_channels=256, scale_factor=4)),\n    decode_head=dict(\n        type='FCNHead',\n        in_channels=256,\n        channels=256,\n        num_convs=1,\n        num_classes=19,\n        in_index=3,\n        concat_input=False,\n        dropout_ratio=0.1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        align_corners=True,\n        sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=[\n        dict(\n            type='FCNHead',\n            in_channels=128,\n            channels=64,\n            num_convs=1,\n            num_classes=19,\n            in_index=2,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=False,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        dict(\n            type='FCNHead',\n            in_channels=128,\n            channels=64,\n            num_convs=1,\n            num_classes=19,\n            in_index=1,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=False,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        dict(\n            type='STDCHead',\n            in_channels=256,\n            channels=64,\n            num_convs=1,\n            num_classes=2,\n            boundary_threshold=0.1,\n            in_index=0,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=True,\n            loss_decode=[\n                dict(\n                    type='CrossEntropyLoss',\n                    loss_name='loss_ce',\n                    use_sigmoid=True,\n                    loss_weight=1.0),\n                dict(type='DiceLoss', loss_name='loss_dice', loss_weight=1.0)\n            ])\n    ],\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(\n        type='Resize',\n        img_scale=(2048, 1024),\n        ratio_range=(0.125, 1.5),\n        scale_step_size=0.125),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=24,\n    workers_per_gpu=4,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize',\n                img_scale=(2048, 1024),\n                ratio_range=(0.125, 1.5),\n                scale_step_size=0.125),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='SGD',\n    lr=0.05,\n    momentum=0.9,\n    weight_decay=0.0005,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            {\n                'backbone.backbone': dict(lr_mult=0.1),\n                'backbone.text_encoder': dict(lr_mult=0.0, decay_mult=0.0),\n                '.bn.': dict(decay_mult=0.0)\n            })))\noptimizer_config = dict()\nlr_config = dict(\n    policy='poly',\n    power=0.9,\n    min_lr=1e-06,\n    by_epoch=False,\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=1e-05)\nrunner = dict(type='IterBasedRunner', max_iters=160000)\ncheckpoint_config = dict(by_epoch=False, interval=16000)\nevaluation = dict(interval=16000, metric='mIoU', pre_eval=True)\ncheckpoint = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth'\nwork_dir = './work_dirs/stdc1_1x24_512x1024_scale0.5_160k_cityscapes'\ngpu_ids = [0]\nauto_resume = False\ndevice = 'cuda'\nseed = 1768160885\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00024, "memory": 19452, "data_time": 0.3641, "decode.loss_ce": 1.91279, "decode.acc_seg": 32.47339, "aux_0.loss_ce": 2.09312, "aux_0.acc_seg": 18.32138, "aux_1.loss_ce": 2.06797, "aux_1.acc_seg": 21.49269, "aux_2.loss_ce": 0.50393, "aux_2.loss_dice": 0.49042, "aux_2.acc_seg": 85.93053, "loss": 7.06823, "time": 1.12158}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00049, "memory": 19452, "data_time": 0.39315, "decode.loss_ce": 1.27252, "decode.acc_seg": 53.73832, "aux_0.loss_ce": 1.3563, "aux_0.acc_seg": 54.21763, "aux_1.loss_ce": 1.43622, "aux_1.acc_seg": 49.42839, "aux_2.loss_ce": 0.23768, "aux_2.loss_dice": 0.46722, "aux_2.acc_seg": 96.87638, "loss": 4.76994, "time": 0.92158}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00074, "memory": 19452, "data_time": 0.42339, "decode.loss_ce": 0.91901, "decode.acc_seg": 67.24539, "aux_0.loss_ce": 0.91775, "aux_0.acc_seg": 68.34819, "aux_1.loss_ce": 1.00159, "aux_1.acc_seg": 64.7753, "aux_2.loss_ce": 0.18216, "aux_2.loss_dice": 0.40954, "aux_2.acc_seg": 97.02308, "loss": 3.43005, "time": 0.97472}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00099, "memory": 19452, "data_time": 0.26527, "decode.loss_ce": 0.67432, "decode.acc_seg": 75.37737, "aux_0.loss_ce": 0.69505, "aux_0.acc_seg": 74.71579, "aux_1.loss_ce": 0.7468, "aux_1.acc_seg": 72.80043, "aux_2.loss_ce": 0.14743, "aux_2.loss_dice": 0.33037, "aux_2.acc_seg": 97.06503, "loss": 2.59397, "time": 0.83635}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.00124, "memory": 19452, "data_time": 0.35091, "decode.loss_ce": 0.58345, "decode.acc_seg": 78.66578, "aux_0.loss_ce": 0.60784, "aux_0.acc_seg": 78.39289, "aux_1.loss_ce": 0.65176, "aux_1.acc_seg": 76.70657, "aux_2.loss_ce": 0.12344, "aux_2.loss_dice": 0.31737, "aux_2.acc_seg": 97.05306, "loss": 2.28386, "time": 0.9156}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.00149, "memory": 19452, "data_time": 0.27388, "decode.loss_ce": 0.52472, "decode.acc_seg": 80.70569, "aux_0.loss_ce": 0.54306, "aux_0.acc_seg": 80.78063, "aux_1.loss_ce": 0.58266, "aux_1.acc_seg": 79.20784, "aux_2.loss_ce": 0.11592, "aux_2.loss_dice": 0.30998, "aux_2.acc_seg": 97.03516, "loss": 2.07635, "time": 0.84384}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.00174, "memory": 19452, "data_time": 0.23086, "decode.loss_ce": 0.48672, "decode.acc_seg": 82.00753, "aux_0.loss_ce": 0.50139, "aux_0.acc_seg": 81.85168, "aux_1.loss_ce": 0.53631, "aux_1.acc_seg": 80.58576, "aux_2.loss_ce": 0.11078, "aux_2.loss_dice": 0.30559, "aux_2.acc_seg": 97.09936, "loss": 1.94079, "time": 0.79766}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.00199, "memory": 19452, "data_time": 0.36245, "decode.loss_ce": 0.43691, "decode.acc_seg": 83.93024, "aux_0.loss_ce": 0.45474, "aux_0.acc_seg": 83.50416, "aux_1.loss_ce": 0.48341, "aux_1.acc_seg": 82.46245, "aux_2.loss_ce": 0.10876, "aux_2.loss_dice": 0.3015, "aux_2.acc_seg": 97.12429, "loss": 1.78532, "time": 0.93079}
{"mode": "train", "epoch": 4, "iter": 450, "lr": 0.00224, "memory": 19452, "data_time": 0.26873, "decode.loss_ce": 0.39963, "decode.acc_seg": 85.10197, "aux_0.loss_ce": 0.41866, "aux_0.acc_seg": 84.57089, "aux_1.loss_ce": 0.45201, "aux_1.acc_seg": 83.35974, "aux_2.loss_ce": 0.10768, "aux_2.loss_dice": 0.29666, "aux_2.acc_seg": 97.11513, "loss": 1.67464, "time": 0.84099}
{"mode": "train", "epoch": 5, "iter": 500, "lr": 0.00249, "memory": 19452, "data_time": 0.34152, "decode.loss_ce": 0.39081, "decode.acc_seg": 85.4154, "aux_0.loss_ce": 0.40562, "aux_0.acc_seg": 84.98932, "aux_1.loss_ce": 0.43857, "aux_1.acc_seg": 83.8482, "aux_2.loss_ce": 0.10814, "aux_2.loss_dice": 0.29563, "aux_2.acc_seg": 97.10361, "loss": 1.63877, "time": 0.91213}
{"mode": "train", "epoch": 5, "iter": 550, "lr": 0.00274, "memory": 19452, "data_time": 0.25405, "decode.loss_ce": 0.36022, "decode.acc_seg": 85.78686, "aux_0.loss_ce": 0.37351, "aux_0.acc_seg": 85.35025, "aux_1.loss_ce": 0.40445, "aux_1.acc_seg": 84.21691, "aux_2.loss_ce": 0.1061, "aux_2.loss_dice": 0.28892, "aux_2.acc_seg": 97.13168, "loss": 1.5332, "time": 0.82627}
{"mode": "train", "epoch": 5, "iter": 600, "lr": 0.00298, "memory": 19452, "data_time": 0.27321, "decode.loss_ce": 0.37471, "decode.acc_seg": 85.71587, "aux_0.loss_ce": 0.38759, "aux_0.acc_seg": 85.32172, "aux_1.loss_ce": 0.42343, "aux_1.acc_seg": 84.00624, "aux_2.loss_ce": 0.1048, "aux_2.loss_dice": 0.28856, "aux_2.acc_seg": 97.21561, "loss": 1.5791, "time": 0.8538}
{"mode": "train", "epoch": 6, "iter": 650, "lr": 0.00323, "memory": 19452, "data_time": 0.36595, "decode.loss_ce": 0.32959, "decode.acc_seg": 87.43997, "aux_0.loss_ce": 0.34083, "aux_0.acc_seg": 87.01288, "aux_1.loss_ce": 0.37696, "aux_1.acc_seg": 85.78228, "aux_2.loss_ce": 0.10753, "aux_2.loss_dice": 0.29028, "aux_2.acc_seg": 97.11609, "loss": 1.44519, "time": 0.93315}
{"mode": "train", "epoch": 6, "iter": 700, "lr": 0.00348, "memory": 19452, "data_time": 0.25553, "decode.loss_ce": 0.30745, "decode.acc_seg": 87.26996, "aux_0.loss_ce": 0.31706, "aux_0.acc_seg": 86.86343, "aux_1.loss_ce": 0.35051, "aux_1.acc_seg": 85.53434, "aux_2.loss_ce": 0.10281, "aux_2.loss_dice": 0.27805, "aux_2.acc_seg": 97.23242, "loss": 1.35588, "time": 0.83711}
{"mode": "train", "epoch": 7, "iter": 750, "lr": 0.00373, "memory": 19452, "data_time": 0.33451, "decode.loss_ce": 0.31596, "decode.acc_seg": 87.13252, "aux_0.loss_ce": 0.32673, "aux_0.acc_seg": 86.65791, "aux_1.loss_ce": 0.35985, "aux_1.acc_seg": 85.39824, "aux_2.loss_ce": 0.10314, "aux_2.loss_dice": 0.27999, "aux_2.acc_seg": 97.25518, "loss": 1.38567, "time": 0.90394}
{"mode": "train", "epoch": 7, "iter": 800, "lr": 0.00398, "memory": 19452, "data_time": 0.26142, "decode.loss_ce": 0.29845, "decode.acc_seg": 87.81012, "aux_0.loss_ce": 0.30822, "aux_0.acc_seg": 87.4438, "aux_1.loss_ce": 0.33877, "aux_1.acc_seg": 86.20043, "aux_2.loss_ce": 0.10346, "aux_2.loss_dice": 0.27881, "aux_2.acc_seg": 97.23, "loss": 1.32771, "time": 0.82807}
{"mode": "train", "epoch": 7, "iter": 850, "lr": 0.00422, "memory": 19452, "data_time": 0.23272, "decode.loss_ce": 0.30068, "decode.acc_seg": 87.64033, "aux_0.loss_ce": 0.31152, "aux_0.acc_seg": 87.2445, "aux_1.loss_ce": 0.33912, "aux_1.acc_seg": 86.04513, "aux_2.loss_ce": 0.10402, "aux_2.loss_dice": 0.27701, "aux_2.acc_seg": 97.21037, "loss": 1.33235, "time": 0.81504}
{"mode": "train", "epoch": 8, "iter": 900, "lr": 0.00447, "memory": 19452, "data_time": 0.36002, "decode.loss_ce": 0.2835, "decode.acc_seg": 88.35465, "aux_0.loss_ce": 0.2921, "aux_0.acc_seg": 88.06265, "aux_1.loss_ce": 0.32172, "aux_1.acc_seg": 86.80677, "aux_2.loss_ce": 0.10251, "aux_2.loss_dice": 0.27608, "aux_2.acc_seg": 97.27218, "loss": 1.2759, "time": 0.93911}
{"mode": "train", "epoch": 8, "iter": 950, "lr": 0.00472, "memory": 19452, "data_time": 0.25157, "decode.loss_ce": 0.297, "decode.acc_seg": 87.94305, "aux_0.loss_ce": 0.30698, "aux_0.acc_seg": 87.53178, "aux_1.loss_ce": 0.33759, "aux_1.acc_seg": 86.26317, "aux_2.loss_ce": 0.10481, "aux_2.loss_dice": 0.27814, "aux_2.acc_seg": 97.19623, "loss": 1.32451, "time": 0.82985}
{"mode": "train", "epoch": 9, "iter": 1000, "lr": 0.00497, "memory": 19452, "data_time": 0.32597, "decode.loss_ce": 0.28032, "decode.acc_seg": 88.24151, "aux_0.loss_ce": 0.28656, "aux_0.acc_seg": 87.99013, "aux_1.loss_ce": 0.3141, "aux_1.acc_seg": 86.83895, "aux_2.loss_ce": 0.10396, "aux_2.loss_dice": 0.2719, "aux_2.acc_seg": 97.22255, "loss": 1.25684, "time": 0.89923}
{"mode": "train", "epoch": 9, "iter": 1050, "lr": 0.00497, "memory": 19452, "data_time": 0.25687, "decode.loss_ce": 0.27188, "decode.acc_seg": 88.5629, "aux_0.loss_ce": 0.2809, "aux_0.acc_seg": 88.22289, "aux_1.loss_ce": 0.3079, "aux_1.acc_seg": 87.0455, "aux_2.loss_ce": 0.10252, "aux_2.loss_dice": 0.27187, "aux_2.acc_seg": 97.24664, "loss": 1.23507, "time": 0.82589}
{"mode": "train", "epoch": 9, "iter": 1100, "lr": 0.00497, "memory": 19452, "data_time": 0.24913, "decode.loss_ce": 0.26375, "decode.acc_seg": 89.10968, "aux_0.loss_ce": 0.27102, "aux_0.acc_seg": 88.79828, "aux_1.loss_ce": 0.30056, "aux_1.acc_seg": 87.5188, "aux_2.loss_ce": 0.1026, "aux_2.loss_dice": 0.27203, "aux_2.acc_seg": 97.25476, "loss": 1.20996, "time": 0.82351}
{"mode": "train", "epoch": 10, "iter": 1150, "lr": 0.00497, "memory": 19452, "data_time": 0.30792, "decode.loss_ce": 0.25892, "decode.acc_seg": 88.92517, "aux_0.loss_ce": 0.26538, "aux_0.acc_seg": 88.62871, "aux_1.loss_ce": 0.2923, "aux_1.acc_seg": 87.38113, "aux_2.loss_ce": 0.10127, "aux_2.loss_dice": 0.26778, "aux_2.acc_seg": 97.28073, "loss": 1.18566, "time": 0.8848}
{"mode": "train", "epoch": 10, "iter": 1200, "lr": 0.00497, "memory": 19452, "data_time": 0.21876, "decode.loss_ce": 0.2565, "decode.acc_seg": 89.29185, "aux_0.loss_ce": 0.26396, "aux_0.acc_seg": 89.00878, "aux_1.loss_ce": 0.29009, "aux_1.acc_seg": 87.83802, "aux_2.loss_ce": 0.10083, "aux_2.loss_dice": 0.26894, "aux_2.acc_seg": 97.28878, "loss": 1.18032, "time": 0.78387}
{"mode": "train", "epoch": 11, "iter": 1250, "lr": 0.00496, "memory": 19452, "data_time": 0.3372, "decode.loss_ce": 0.24899, "decode.acc_seg": 89.42475, "aux_0.loss_ce": 0.25472, "aux_0.acc_seg": 89.10439, "aux_1.loss_ce": 0.28163, "aux_1.acc_seg": 87.95586, "aux_2.loss_ce": 0.09992, "aux_2.loss_dice": 0.26795, "aux_2.acc_seg": 97.33243, "loss": 1.1532, "time": 0.90301}
{"mode": "train", "epoch": 11, "iter": 1300, "lr": 0.00496, "memory": 19452, "data_time": 0.25241, "decode.loss_ce": 0.24601, "decode.acc_seg": 89.44953, "aux_0.loss_ce": 0.25358, "aux_0.acc_seg": 89.21421, "aux_1.loss_ce": 0.27674, "aux_1.acc_seg": 88.17268, "aux_2.loss_ce": 0.10045, "aux_2.loss_dice": 0.26758, "aux_2.acc_seg": 97.31436, "loss": 1.14436, "time": 0.82296}
{"mode": "train", "epoch": 11, "iter": 1350, "lr": 0.00496, "memory": 19452, "data_time": 0.22802, "decode.loss_ce": 0.25773, "decode.acc_seg": 89.08008, "aux_0.loss_ce": 0.26516, "aux_0.acc_seg": 88.80571, "aux_1.loss_ce": 0.29093, "aux_1.acc_seg": 87.64036, "aux_2.loss_ce": 0.10352, "aux_2.loss_dice": 0.2694, "aux_2.acc_seg": 97.22672, "loss": 1.18673, "time": 0.80721}
{"mode": "train", "epoch": 12, "iter": 1400, "lr": 0.00496, "memory": 19452, "data_time": 0.35236, "decode.loss_ce": 0.26103, "decode.acc_seg": 89.05667, "aux_0.loss_ce": 0.26825, "aux_0.acc_seg": 88.75353, "aux_1.loss_ce": 0.29306, "aux_1.acc_seg": 87.6602, "aux_2.loss_ce": 0.10262, "aux_2.loss_dice": 0.27036, "aux_2.acc_seg": 97.26552, "loss": 1.19532, "time": 0.94042}
{"mode": "train", "epoch": 12, "iter": 1450, "lr": 0.00496, "memory": 19452, "data_time": 0.24579, "decode.loss_ce": 0.23265, "decode.acc_seg": 90.03131, "aux_0.loss_ce": 0.23731, "aux_0.acc_seg": 89.86856, "aux_1.loss_ce": 0.26346, "aux_1.acc_seg": 88.68198, "aux_2.loss_ce": 0.09951, "aux_2.loss_dice": 0.26381, "aux_2.acc_seg": 97.34981, "loss": 1.09674, "time": 0.8284}
{"mode": "train", "epoch": 13, "iter": 1500, "lr": 0.00496, "memory": 19452, "data_time": 0.35025, "decode.loss_ce": 0.24869, "decode.acc_seg": 89.61179, "aux_0.loss_ce": 0.25593, "aux_0.acc_seg": 89.33476, "aux_1.loss_ce": 0.28167, "aux_1.acc_seg": 88.20315, "aux_2.loss_ce": 0.1022, "aux_2.loss_dice": 0.26945, "aux_2.acc_seg": 97.2616, "loss": 1.15795, "time": 0.93119}
{"mode": "train", "epoch": 13, "iter": 1550, "lr": 0.00496, "memory": 19452, "data_time": 0.24906, "decode.loss_ce": 0.22294, "decode.acc_seg": 90.41491, "aux_0.loss_ce": 0.23138, "aux_0.acc_seg": 90.10169, "aux_1.loss_ce": 0.25618, "aux_1.acc_seg": 88.99117, "aux_2.loss_ce": 0.10032, "aux_2.loss_dice": 0.26507, "aux_2.acc_seg": 97.30026, "loss": 1.07588, "time": 0.83301}
{"mode": "train", "epoch": 13, "iter": 1600, "lr": 0.00496, "memory": 19452, "data_time": 0.33936, "decode.loss_ce": 0.23586, "decode.acc_seg": 89.98025, "aux_0.loss_ce": 0.24314, "aux_0.acc_seg": 89.68613, "aux_1.loss_ce": 0.26644, "aux_1.acc_seg": 88.59874, "aux_2.loss_ce": 0.1014, "aux_2.loss_dice": 0.26645, "aux_2.acc_seg": 97.29085, "loss": 1.11328, "time": 0.92124}
{"mode": "train", "epoch": 14, "iter": 1650, "lr": 0.00495, "memory": 19452, "data_time": 0.25846, "decode.loss_ce": 0.22222, "decode.acc_seg": 90.40958, "aux_0.loss_ce": 0.23006, "aux_0.acc_seg": 90.15692, "aux_1.loss_ce": 0.25463, "aux_1.acc_seg": 88.99317, "aux_2.loss_ce": 0.09908, "aux_2.loss_dice": 0.26312, "aux_2.acc_seg": 97.33035, "loss": 1.06912, "time": 0.83907}
{"mode": "train", "epoch": 14, "iter": 1700, "lr": 0.00495, "memory": 19452, "data_time": 0.24689, "decode.loss_ce": 0.23034, "decode.acc_seg": 90.15485, "aux_0.loss_ce": 0.23902, "aux_0.acc_seg": 89.83482, "aux_1.loss_ce": 0.26598, "aux_1.acc_seg": 88.66951, "aux_2.loss_ce": 0.1008, "aux_2.loss_dice": 0.26551, "aux_2.acc_seg": 97.2857, "loss": 1.10164, "time": 0.82758}
{"mode": "train", "epoch": 15, "iter": 1750, "lr": 0.00495, "memory": 19452, "data_time": 0.33689, "decode.loss_ce": 0.24369, "decode.acc_seg": 89.6661, "aux_0.loss_ce": 0.25063, "aux_0.acc_seg": 89.4015, "aux_1.loss_ce": 0.27464, "aux_1.acc_seg": 88.34383, "aux_2.loss_ce": 0.102, "aux_2.loss_dice": 0.26769, "aux_2.acc_seg": 97.26122, "loss": 1.13865, "time": 0.91354}
{"mode": "train", "epoch": 15, "iter": 1800, "lr": 0.00495, "memory": 19452, "data_time": 0.26186, "decode.loss_ce": 0.21804, "decode.acc_seg": 90.52361, "aux_0.loss_ce": 0.22628, "aux_0.acc_seg": 90.21281, "aux_1.loss_ce": 0.25171, "aux_1.acc_seg": 89.04122, "aux_2.loss_ce": 0.09922, "aux_2.loss_dice": 0.26174, "aux_2.acc_seg": 97.33646, "loss": 1.05699, "time": 0.84403}
{"mode": "train", "epoch": 16, "iter": 1850, "lr": 0.00495, "memory": 19452, "data_time": 0.32777, "decode.loss_ce": 0.22148, "decode.acc_seg": 90.48221, "aux_0.loss_ce": 0.22783, "aux_0.acc_seg": 90.25959, "aux_1.loss_ce": 0.25207, "aux_1.acc_seg": 89.16672, "aux_2.loss_ce": 0.10057, "aux_2.loss_dice": 0.26409, "aux_2.acc_seg": 97.25709, "loss": 1.06605, "time": 0.90818}
{"mode": "train", "epoch": 16, "iter": 1900, "lr": 0.00495, "memory": 19452, "data_time": 0.25965, "decode.loss_ce": 0.21996, "decode.acc_seg": 90.66905, "aux_0.loss_ce": 0.22852, "aux_0.acc_seg": 90.35046, "aux_1.loss_ce": 0.25144, "aux_1.acc_seg": 89.30515, "aux_2.loss_ce": 0.10049, "aux_2.loss_dice": 0.26359, "aux_2.acc_seg": 97.28115, "loss": 1.06399, "time": 0.8325}
{"mode": "train", "epoch": 16, "iter": 1950, "lr": 0.00495, "memory": 19452, "data_time": 0.25719, "decode.loss_ce": 0.2163, "decode.acc_seg": 90.86338, "aux_0.loss_ce": 0.2238, "aux_0.acc_seg": 90.57214, "aux_1.loss_ce": 0.2505, "aux_1.acc_seg": 89.36512, "aux_2.loss_ce": 0.10108, "aux_2.loss_dice": 0.26388, "aux_2.acc_seg": 97.26967, "loss": 1.05556, "time": 0.83285}
{"mode": "train", "epoch": 17, "iter": 2000, "lr": 0.00494, "memory": 19452, "data_time": 0.28745, "decode.loss_ce": 0.21114, "decode.acc_seg": 90.93477, "aux_0.loss_ce": 0.21796, "aux_0.acc_seg": 90.71837, "aux_1.loss_ce": 0.24357, "aux_1.acc_seg": 89.54727, "aux_2.loss_ce": 0.10002, "aux_2.loss_dice": 0.2639, "aux_2.acc_seg": 97.31192, "loss": 1.03659, "time": 0.85726}
{"mode": "train", "epoch": 17, "iter": 2050, "lr": 0.00494, "memory": 19452, "data_time": 0.2523, "decode.loss_ce": 0.21344, "decode.acc_seg": 90.8725, "aux_0.loss_ce": 0.22126, "aux_0.acc_seg": 90.61295, "aux_1.loss_ce": 0.24617, "aux_1.acc_seg": 89.44934, "aux_2.loss_ce": 0.10045, "aux_2.loss_dice": 0.26329, "aux_2.acc_seg": 97.29456, "loss": 1.04461, "time": 0.8236}
{"mode": "train", "epoch": 18, "iter": 2100, "lr": 0.00494, "memory": 19452, "data_time": 0.35459, "decode.loss_ce": 0.20793, "decode.acc_seg": 91.03703, "aux_0.loss_ce": 0.21567, "aux_0.acc_seg": 90.77687, "aux_1.loss_ce": 0.24096, "aux_1.acc_seg": 89.62262, "aux_2.loss_ce": 0.09998, "aux_2.loss_dice": 0.26373, "aux_2.acc_seg": 97.26972, "loss": 1.02826, "time": 0.92315}
{"mode": "train", "epoch": 18, "iter": 2150, "lr": 0.00494, "memory": 19452, "data_time": 0.25325, "decode.loss_ce": 0.20773, "decode.acc_seg": 91.14434, "aux_0.loss_ce": 0.21355, "aux_0.acc_seg": 90.9259, "aux_1.loss_ce": 0.23907, "aux_1.acc_seg": 89.78511, "aux_2.loss_ce": 0.09868, "aux_2.loss_dice": 0.26234, "aux_2.acc_seg": 97.32942, "loss": 1.02137, "time": 0.82116}
{"mode": "train", "epoch": 18, "iter": 2200, "lr": 0.00494, "memory": 19452, "data_time": 0.25751, "decode.loss_ce": 0.2088, "decode.acc_seg": 91.03765, "aux_0.loss_ce": 0.21775, "aux_0.acc_seg": 90.74663, "aux_1.loss_ce": 0.24109, "aux_1.acc_seg": 89.61939, "aux_2.loss_ce": 0.09829, "aux_2.loss_dice": 0.26108, "aux_2.acc_seg": 97.3389, "loss": 1.02701, "time": 0.823}
{"mode": "train", "epoch": 19, "iter": 2250, "lr": 0.00494, "memory": 19452, "data_time": 0.34079, "decode.loss_ce": 0.20688, "decode.acc_seg": 91.1229, "aux_0.loss_ce": 0.21483, "aux_0.acc_seg": 90.85184, "aux_1.loss_ce": 0.23864, "aux_1.acc_seg": 89.76396, "aux_2.loss_ce": 0.09847, "aux_2.loss_dice": 0.26107, "aux_2.acc_seg": 97.30422, "loss": 1.01989, "time": 0.90974}
{"mode": "train", "epoch": 19, "iter": 2300, "lr": 0.00494, "memory": 19452, "data_time": 0.28947, "decode.loss_ce": 0.22583, "decode.acc_seg": 90.41291, "aux_0.loss_ce": 0.23364, "aux_0.acc_seg": 90.20238, "aux_1.loss_ce": 0.25381, "aux_1.acc_seg": 89.2619, "aux_2.loss_ce": 0.10038, "aux_2.loss_dice": 0.26425, "aux_2.acc_seg": 97.28614, "loss": 1.07791, "time": 0.8538}
{"mode": "train", "epoch": 20, "iter": 2350, "lr": 0.00493, "memory": 19452, "data_time": 0.3537, "decode.loss_ce": 0.20424, "decode.acc_seg": 91.28494, "aux_0.loss_ce": 0.21213, "aux_0.acc_seg": 91.03161, "aux_1.loss_ce": 0.2384, "aux_1.acc_seg": 89.85924, "aux_2.loss_ce": 0.09995, "aux_2.loss_dice": 0.2624, "aux_2.acc_seg": 97.27822, "loss": 1.01713, "time": 0.93416}
{"mode": "train", "epoch": 20, "iter": 2400, "lr": 0.00493, "memory": 19452, "data_time": 0.20281, "decode.loss_ce": 0.2047, "decode.acc_seg": 91.07388, "aux_0.loss_ce": 0.21001, "aux_0.acc_seg": 90.83924, "aux_1.loss_ce": 0.23438, "aux_1.acc_seg": 89.76254, "aux_2.loss_ce": 0.09806, "aux_2.loss_dice": 0.26012, "aux_2.acc_seg": 97.33857, "loss": 1.00728, "time": 0.78367}
{"mode": "train", "epoch": 20, "iter": 2450, "lr": 0.00493, "memory": 19452, "data_time": 0.26667, "decode.loss_ce": 0.19242, "decode.acc_seg": 91.71466, "aux_0.loss_ce": 0.19994, "aux_0.acc_seg": 91.41213, "aux_1.loss_ce": 0.22313, "aux_1.acc_seg": 90.3753, "aux_2.loss_ce": 0.09871, "aux_2.loss_dice": 0.26008, "aux_2.acc_seg": 97.2985, "loss": 0.97429, "time": 0.85003}
{"mode": "train", "epoch": 21, "iter": 2500, "lr": 0.00493, "memory": 19452, "data_time": 0.34535, "decode.loss_ce": 0.20583, "decode.acc_seg": 91.42754, "aux_0.loss_ce": 0.21428, "aux_0.acc_seg": 91.17997, "aux_1.loss_ce": 0.23922, "aux_1.acc_seg": 90.03433, "aux_2.loss_ce": 0.09931, "aux_2.loss_dice": 0.26207, "aux_2.acc_seg": 97.29902, "loss": 1.0207, "time": 0.92409}
{"mode": "train", "epoch": 21, "iter": 2550, "lr": 0.00493, "memory": 19452, "data_time": 0.26196, "decode.loss_ce": 0.20581, "decode.acc_seg": 91.14202, "aux_0.loss_ce": 0.21314, "aux_0.acc_seg": 90.88068, "aux_1.loss_ce": 0.23734, "aux_1.acc_seg": 89.70621, "aux_2.loss_ce": 0.09869, "aux_2.loss_dice": 0.25854, "aux_2.acc_seg": 97.31886, "loss": 1.01352, "time": 0.84388}
{"mode": "train", "epoch": 22, "iter": 2600, "lr": 0.00493, "memory": 19452, "data_time": 0.35077, "decode.loss_ce": 0.19386, "decode.acc_seg": 91.59124, "aux_0.loss_ce": 0.20202, "aux_0.acc_seg": 91.3469, "aux_1.loss_ce": 0.22366, "aux_1.acc_seg": 90.31752, "aux_2.loss_ce": 0.09853, "aux_2.loss_dice": 0.26053, "aux_2.acc_seg": 97.31699, "loss": 0.9786, "time": 0.9318}
{"mode": "train", "epoch": 22, "iter": 2650, "lr": 0.00493, "memory": 19452, "data_time": 0.23397, "decode.loss_ce": 0.22697, "decode.acc_seg": 90.55742, "aux_0.loss_ce": 0.23519, "aux_0.acc_seg": 90.31562, "aux_1.loss_ce": 0.25424, "aux_1.acc_seg": 89.31816, "aux_2.loss_ce": 0.09968, "aux_2.loss_dice": 0.26235, "aux_2.acc_seg": 97.2894, "loss": 1.07843, "time": 0.80532}
{"mode": "train", "epoch": 22, "iter": 2700, "lr": 0.00492, "memory": 19452, "data_time": 0.25269, "decode.loss_ce": 0.20713, "decode.acc_seg": 91.03538, "aux_0.loss_ce": 0.21193, "aux_0.acc_seg": 90.89953, "aux_1.loss_ce": 0.23767, "aux_1.acc_seg": 89.68458, "aux_2.loss_ce": 0.09979, "aux_2.loss_dice": 0.25852, "aux_2.acc_seg": 97.2584, "loss": 1.01504, "time": 0.83028}
{"mode": "train", "epoch": 23, "iter": 2750, "lr": 0.00492, "memory": 19452, "data_time": 0.31396, "decode.loss_ce": 0.20701, "decode.acc_seg": 91.24738, "aux_0.loss_ce": 0.21557, "aux_0.acc_seg": 90.92001, "aux_1.loss_ce": 0.2389, "aux_1.acc_seg": 89.84027, "aux_2.loss_ce": 0.10021, "aux_2.loss_dice": 0.26222, "aux_2.acc_seg": 97.26942, "loss": 1.0239, "time": 0.88361}
{"mode": "train", "epoch": 23, "iter": 2800, "lr": 0.00492, "memory": 19452, "data_time": 0.2226, "decode.loss_ce": 0.1957, "decode.acc_seg": 91.45237, "aux_0.loss_ce": 0.20215, "aux_0.acc_seg": 91.24022, "aux_1.loss_ce": 0.22571, "aux_1.acc_seg": 90.10125, "aux_2.loss_ce": 0.09788, "aux_2.loss_dice": 0.25857, "aux_2.acc_seg": 97.34542, "loss": 0.98, "time": 0.78215}
{"mode": "train", "epoch": 24, "iter": 2850, "lr": 0.00492, "memory": 19452, "data_time": 0.32218, "decode.loss_ce": 0.19953, "decode.acc_seg": 91.41969, "aux_0.loss_ce": 0.20846, "aux_0.acc_seg": 91.13625, "aux_1.loss_ce": 0.23066, "aux_1.acc_seg": 90.08862, "aux_2.loss_ce": 0.09981, "aux_2.loss_dice": 0.26071, "aux_2.acc_seg": 97.25883, "loss": 0.99917, "time": 0.89082}
{"mode": "train", "epoch": 24, "iter": 2900, "lr": 0.00492, "memory": 19452, "data_time": 0.24365, "decode.loss_ce": 0.1974, "decode.acc_seg": 91.44654, "aux_0.loss_ce": 0.20399, "aux_0.acc_seg": 91.28243, "aux_1.loss_ce": 0.22878, "aux_1.acc_seg": 90.11304, "aux_2.loss_ce": 0.09984, "aux_2.loss_dice": 0.25991, "aux_2.acc_seg": 97.24648, "loss": 0.98993, "time": 0.81616}
{"mode": "train", "epoch": 24, "iter": 2950, "lr": 0.00492, "memory": 19452, "data_time": 0.26156, "decode.loss_ce": 0.19427, "decode.acc_seg": 91.60997, "aux_0.loss_ce": 0.20122, "aux_0.acc_seg": 91.37047, "aux_1.loss_ce": 0.22384, "aux_1.acc_seg": 90.2944, "aux_2.loss_ce": 0.09841, "aux_2.loss_dice": 0.25947, "aux_2.acc_seg": 97.29855, "loss": 0.9772, "time": 0.83613}
{"mode": "train", "epoch": 25, "iter": 3000, "lr": 0.00492, "memory": 19452, "data_time": 0.35636, "decode.loss_ce": 0.19709, "decode.acc_seg": 91.64315, "aux_0.loss_ce": 0.20355, "aux_0.acc_seg": 91.40684, "aux_1.loss_ce": 0.22847, "aux_1.acc_seg": 90.31971, "aux_2.loss_ce": 0.09873, "aux_2.loss_dice": 0.25982, "aux_2.acc_seg": 97.29324, "loss": 0.98766, "time": 0.92717}
{"mode": "train", "epoch": 25, "iter": 3050, "lr": 0.00491, "memory": 19452, "data_time": 0.26484, "decode.loss_ce": 0.21283, "decode.acc_seg": 91.05431, "aux_0.loss_ce": 0.21976, "aux_0.acc_seg": 90.86331, "aux_1.loss_ce": 0.2418, "aux_1.acc_seg": 89.84652, "aux_2.loss_ce": 0.09922, "aux_2.loss_dice": 0.26183, "aux_2.acc_seg": 97.2883, "loss": 1.03544, "time": 0.84254}
{"mode": "train", "epoch": 26, "iter": 3100, "lr": 0.00491, "memory": 19452, "data_time": 0.33757, "decode.loss_ce": 0.20949, "decode.acc_seg": 91.10847, "aux_0.loss_ce": 0.21497, "aux_0.acc_seg": 90.97957, "aux_1.loss_ce": 0.23914, "aux_1.acc_seg": 89.83721, "aux_2.loss_ce": 0.09986, "aux_2.loss_dice": 0.26036, "aux_2.acc_seg": 97.29045, "loss": 1.02382, "time": 0.90858}
{"mode": "train", "epoch": 26, "iter": 3150, "lr": 0.00491, "memory": 19452, "data_time": 0.26421, "decode.loss_ce": 0.20391, "decode.acc_seg": 91.26516, "aux_0.loss_ce": 0.20845, "aux_0.acc_seg": 91.15016, "aux_1.loss_ce": 0.23295, "aux_1.acc_seg": 90.00138, "aux_2.loss_ce": 0.09828, "aux_2.loss_dice": 0.25995, "aux_2.acc_seg": 97.30357, "loss": 1.00354, "time": 0.83606}
