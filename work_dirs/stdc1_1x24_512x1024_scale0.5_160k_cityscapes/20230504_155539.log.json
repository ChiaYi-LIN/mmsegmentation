{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: None\nGCC: gcc (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0\nPyTorch: 1.12.1+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1+cu113\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.30.0+e7ed570", "seed": 187952274, "exp_name": "stdc1_1x24_512x1024_scale0.5_160k_cityscapes.py", "mmseg_version": "0.30.0+e7ed570", "config": "norm_cfg = dict(type='BN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=None,\n    backbone=dict(\n        type='STDCContextPathNet',\n        backbone_cfg=dict(\n            type='STDCNet',\n            stdc_type='STDCNet1',\n            in_channels=3,\n            channels=(32, 64, 256, 512, 1024),\n            bottleneck_type='cat',\n            num_convs=4,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            act_cfg=dict(type='ReLU'),\n            with_final_conv=False,\n            init_cfg=dict(\n                type='Pretrained',\n                checkpoint=\n                'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth'\n            )),\n        last_in_channels=(1024, 512),\n        out_channels=128,\n        ffm_cfg=dict(in_channels=384, out_channels=256, scale_factor=4)),\n    decode_head=dict(\n        type='FCNHead',\n        in_channels=256,\n        channels=256,\n        num_convs=1,\n        num_classes=19,\n        in_index=3,\n        concat_input=False,\n        dropout_ratio=0.1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        align_corners=True,\n        sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=[\n        dict(\n            type='FCNHead',\n            in_channels=128,\n            channels=64,\n            num_convs=1,\n            num_classes=19,\n            in_index=2,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=False,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        dict(\n            type='FCNHead',\n            in_channels=128,\n            channels=64,\n            num_convs=1,\n            num_classes=19,\n            in_index=1,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=False,\n            sampler=dict(type='OHEMPixelSampler', thresh=0.7, min_kept=780000),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        dict(\n            type='STDCHead',\n            in_channels=256,\n            channels=64,\n            num_convs=1,\n            num_classes=2,\n            boundary_threshold=0.1,\n            in_index=0,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            concat_input=False,\n            align_corners=True,\n            loss_decode=[\n                dict(\n                    type='CrossEntropyLoss',\n                    loss_name='loss_ce',\n                    use_sigmoid=True,\n                    loss_weight=1.0),\n                dict(type='DiceLoss', loss_name='loss_dice', loss_weight=1.0)\n            ])\n    ],\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(\n        type='Resize',\n        img_scale=(2048, 1024),\n        ratio_range=(0.125, 1.5),\n        scale_step_size=0.125),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=24,\n    workers_per_gpu=4,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize',\n                img_scale=(2048, 1024),\n                ratio_range=(0.125, 1.5),\n                scale_step_size=0.125),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='SGD',\n    lr=0.05,\n    momentum=0.9,\n    weight_decay=0.0005,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            {\n                'backbone.backbone': dict(lr_mult=0.1),\n                'backbone.text_encoder': dict(lr_mult=0.0, decay_mult=0.0),\n                '.bn.': dict(decay_mult=0.0)\n            })))\noptimizer_config = dict()\nlr_config = dict(\n    policy='poly',\n    power=0.9,\n    min_lr=1e-06,\n    by_epoch=False,\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=1e-05)\nrunner = dict(type='IterBasedRunner', max_iters=160000)\ncheckpoint_config = dict(by_epoch=False, interval=16000)\nevaluation = dict(interval=16000, metric='mIoU', pre_eval=True)\ncheckpoint = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/stdc/stdc1_20220308-5368626c.pth'\nwork_dir = './work_dirs/stdc1_1x24_512x1024_scale0.5_160k_cityscapes'\ngpu_ids = [0]\nauto_resume = False\ndevice = 'cuda'\nseed = 187952274\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00024, "memory": 14937, "data_time": 0.50841, "decode.loss_ce": 1.89234, "decode.acc_seg": 31.0554, "aux_0.loss_ce": 2.14989, "aux_0.acc_seg": 16.00917, "aux_1.loss_ce": 2.04656, "aux_1.acc_seg": 19.62419, "aux_2.loss_ce": 0.51384, "aux_2.loss_dice": 0.48264, "aux_2.acc_seg": 91.13196, "loss": 7.08528, "time": 1.46239}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00049, "memory": 14937, "data_time": 0.52406, "decode.loss_ce": 1.27014, "decode.acc_seg": 52.62369, "aux_0.loss_ce": 1.37688, "aux_0.acc_seg": 53.61414, "aux_1.loss_ce": 1.42377, "aux_1.acc_seg": 47.74535, "aux_2.loss_ce": 0.23409, "aux_2.loss_dice": 0.47201, "aux_2.acc_seg": 96.93021, "loss": 4.77689, "time": 1.22561}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00074, "memory": 14937, "data_time": 0.40721, "decode.loss_ce": 0.95272, "decode.acc_seg": 66.39586, "aux_0.loss_ce": 0.93724, "aux_0.acc_seg": 68.89609, "aux_1.loss_ce": 1.01539, "aux_1.acc_seg": 64.57092, "aux_2.loss_ce": 0.17026, "aux_2.loss_dice": 0.468, "aux_2.acc_seg": 96.87548, "loss": 3.5436, "time": 1.13762}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00099, "memory": 14937, "data_time": 0.4239, "decode.loss_ce": 0.68742, "decode.acc_seg": 75.61102, "aux_0.loss_ce": 0.70524, "aux_0.acc_seg": 75.15898, "aux_1.loss_ce": 0.7496, "aux_1.acc_seg": 73.48291, "aux_2.loss_ce": 0.15638, "aux_2.loss_dice": 0.35804, "aux_2.acc_seg": 97.01659, "loss": 2.65667, "time": 1.0048}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.00124, "memory": 14937, "data_time": 0.46447, "decode.loss_ce": 0.57042, "decode.acc_seg": 79.63639, "aux_0.loss_ce": 0.59081, "aux_0.acc_seg": 79.6502, "aux_1.loss_ce": 0.63029, "aux_1.acc_seg": 77.96826, "aux_2.loss_ce": 0.12598, "aux_2.loss_dice": 0.32591, "aux_2.acc_seg": 97.0909, "loss": 2.2434, "time": 1.05117}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.00149, "memory": 14937, "data_time": 0.37792, "decode.loss_ce": 0.51778, "decode.acc_seg": 81.0565, "aux_0.loss_ce": 0.529, "aux_0.acc_seg": 81.37017, "aux_1.loss_ce": 0.56744, "aux_1.acc_seg": 79.77322, "aux_2.loss_ce": 0.11614, "aux_2.loss_dice": 0.31528, "aux_2.acc_seg": 97.06392, "loss": 2.04564, "time": 0.94445}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.00174, "memory": 14937, "data_time": 0.32567, "decode.loss_ce": 0.48353, "decode.acc_seg": 82.62858, "aux_0.loss_ce": 0.49359, "aux_0.acc_seg": 82.55835, "aux_1.loss_ce": 0.5256, "aux_1.acc_seg": 81.34287, "aux_2.loss_ce": 0.11304, "aux_2.loss_dice": 0.30947, "aux_2.acc_seg": 97.05344, "loss": 1.92521, "time": 0.89403}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.00199, "memory": 14937, "data_time": 0.42104, "decode.loss_ce": 0.4218, "decode.acc_seg": 83.62637, "aux_0.loss_ce": 0.43733, "aux_0.acc_seg": 83.14536, "aux_1.loss_ce": 0.46944, "aux_1.acc_seg": 81.83831, "aux_2.loss_ce": 0.10731, "aux_2.loss_dice": 0.29851, "aux_2.acc_seg": 97.1408, "loss": 1.73439, "time": 0.98913}
{"mode": "train", "epoch": 4, "iter": 450, "lr": 0.00224, "memory": 14937, "data_time": 0.41416, "decode.loss_ce": 0.40607, "decode.acc_seg": 84.83452, "aux_0.loss_ce": 0.41902, "aux_0.acc_seg": 84.39249, "aux_1.loss_ce": 0.45026, "aux_1.acc_seg": 83.26282, "aux_2.loss_ce": 0.10714, "aux_2.loss_dice": 0.29905, "aux_2.acc_seg": 97.14366, "loss": 1.68153, "time": 0.9803}
{"mode": "train", "epoch": 5, "iter": 500, "lr": 0.00249, "memory": 14937, "data_time": 0.46497, "decode.loss_ce": 0.377, "decode.acc_seg": 85.5013, "aux_0.loss_ce": 0.39224, "aux_0.acc_seg": 84.99235, "aux_1.loss_ce": 0.42106, "aux_1.acc_seg": 83.89401, "aux_2.loss_ce": 0.10525, "aux_2.loss_dice": 0.29298, "aux_2.acc_seg": 97.1839, "loss": 1.58853, "time": 1.02773}
{"mode": "train", "epoch": 5, "iter": 550, "lr": 0.00274, "memory": 14937, "data_time": 0.32883, "decode.loss_ce": 0.37481, "decode.acc_seg": 85.5013, "aux_0.loss_ce": 0.38637, "aux_0.acc_seg": 85.12431, "aux_1.loss_ce": 0.41532, "aux_1.acc_seg": 83.92738, "aux_2.loss_ce": 0.10463, "aux_2.loss_dice": 0.29008, "aux_2.acc_seg": 97.19756, "loss": 1.57121, "time": 0.9654}
{"mode": "train", "epoch": 5, "iter": 600, "lr": 0.00298, "memory": 14937, "data_time": 0.16606, "decode.loss_ce": 0.36228, "decode.acc_seg": 85.60213, "aux_0.loss_ce": 0.37093, "aux_0.acc_seg": 85.49689, "aux_1.loss_ce": 0.39888, "aux_1.acc_seg": 84.33628, "aux_2.loss_ce": 0.10524, "aux_2.loss_dice": 0.28759, "aux_2.acc_seg": 97.16607, "loss": 1.52493, "time": 0.93366}
